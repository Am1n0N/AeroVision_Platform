// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package airport_etl.load_dim_airport_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Load_Dim_Airport Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Load_Dim_Airport implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Load_Dim_Airport";
	private final String projectName = "AIRPORT_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Load_Dim_Airport.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Load_Dim_Airport.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String airport_iata;

				public String getAirport_iata () {
					return this.airport_iata;
				}
				
			    public String airport_icao;

				public String getAirport_icao () {
					return this.airport_icao;
				}
				
			    public String airport_name;

				public String getAirport_name () {
					return this.airport_name;
				}
				
			    public BigDecimal latitude;

				public BigDecimal getLatitude () {
					return this.latitude;
				}
				
			    public BigDecimal longitude;

				public BigDecimal getLongitude () {
					return this.longitude;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String country_code;

				public String getCountry_code () {
					return this.country_code;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String timezone;

				public String getTimezone () {
					return this.timezone;
				}
				
			    public Integer timezone_offset;

				public Integer getTimezone_offset () {
					return this.timezone_offset;
				}
				
			    public BigDecimal avg_rating;

				public BigDecimal getAvg_rating () {
					return this.avg_rating;
				}
				
			    public Integer total_ratings;

				public Integer getTotal_ratings () {
					return this.total_ratings;
				}
				
			    public Integer reviews_count;

				public Integer getReviews_count () {
					return this.reviews_count;
				}
				
			    public Integer evaluation_score;

				public Integer getEvaluation_score () {
					return this.evaluation_score;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.airport_iata == null) ? 0 : this.airport_iata.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.airport_iata == null) {
							if (other.airport_iata != null)
								return false;
						
						} else if (!this.airport_iata.equals(other.airport_iata))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.airport_iata = this.airport_iata;
	            other.airport_icao = this.airport_icao;
	            other.airport_name = this.airport_name;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.country = this.country;
	            other.country_code = this.country_code;
	            other.city = this.city;
	            other.timezone = this.timezone;
	            other.timezone_offset = this.timezone_offset;
	            other.avg_rating = this.avg_rating;
	            other.total_ratings = this.total_ratings;
	            other.reviews_count = this.reviews_count;
	            other.evaluation_score = this.evaluation_score;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.airport_iata = this.airport_iata;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.airport_iata = readString(dis);
					
					this.airport_icao = readString(dis);
					
					this.airport_name = readString(dis);
					
						this.latitude = (BigDecimal) dis.readObject();
					
						this.longitude = (BigDecimal) dis.readObject();
					
					this.country = readString(dis);
					
					this.country_code = readString(dis);
					
					this.city = readString(dis);
					
					this.timezone = readString(dis);
					
						this.timezone_offset = readInteger(dis);
					
						this.avg_rating = (BigDecimal) dis.readObject();
					
						this.total_ratings = readInteger(dis);
					
						this.reviews_count = readInteger(dis);
					
						this.evaluation_score = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.airport_iata = readString(dis);
					
					this.airport_icao = readString(dis);
					
					this.airport_name = readString(dis);
					
						this.latitude = (BigDecimal) dis.readObject();
					
						this.longitude = (BigDecimal) dis.readObject();
					
					this.country = readString(dis);
					
					this.country_code = readString(dis);
					
					this.city = readString(dis);
					
					this.timezone = readString(dis);
					
						this.timezone_offset = readInteger(dis);
					
						this.avg_rating = (BigDecimal) dis.readObject();
					
						this.total_ratings = readInteger(dis);
					
						this.reviews_count = readInteger(dis);
					
						this.evaluation_score = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.airport_iata,dos);
					
					// String
				
						writeString(this.airport_icao,dos);
					
					// String
				
						writeString(this.airport_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.longitude);
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.country_code,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.timezone,dos);
					
					// Integer
				
						writeInteger(this.timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.avg_rating);
					
					// Integer
				
						writeInteger(this.total_ratings,dos);
					
					// Integer
				
						writeInteger(this.reviews_count,dos);
					
					// Integer
				
						writeInteger(this.evaluation_score,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.airport_iata,dos);
					
					// String
				
						writeString(this.airport_icao,dos);
					
					// String
				
						writeString(this.airport_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.longitude);
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.country_code,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.timezone,dos);
					
					// Integer
				
						writeInteger(this.timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.avg_rating);
					
					// Integer
				
						writeInteger(this.total_ratings,dos);
					
					// Integer
				
						writeInteger(this.reviews_count,dos);
					
					// Integer
				
						writeInteger(this.evaluation_score,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("airport_iata="+airport_iata);
		sb.append(",airport_icao="+airport_icao);
		sb.append(",airport_name="+airport_name);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",country="+country);
		sb.append(",country_code="+country_code);
		sb.append(",city="+city);
		sb.append(",timezone="+timezone);
		sb.append(",timezone_offset="+String.valueOf(timezone_offset));
		sb.append(",avg_rating="+String.valueOf(avg_rating));
		sb.append(",total_ratings="+String.valueOf(total_ratings));
		sb.append(",reviews_count="+String.valueOf(reviews_count));
		sb.append(",evaluation_score="+String.valueOf(evaluation_score));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.airport_iata, other.airport_iata);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class origin_airportsStruct implements routines.system.IPersistableRow<origin_airportsStruct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String airport_iata;

				public String getAirport_iata () {
					return this.airport_iata;
				}
				
			    public String airport_icao;

				public String getAirport_icao () {
					return this.airport_icao;
				}
				
			    public String airport_name;

				public String getAirport_name () {
					return this.airport_name;
				}
				
			    public BigDecimal latitude;

				public BigDecimal getLatitude () {
					return this.latitude;
				}
				
			    public BigDecimal longitude;

				public BigDecimal getLongitude () {
					return this.longitude;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String country_code;

				public String getCountry_code () {
					return this.country_code;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String timezone;

				public String getTimezone () {
					return this.timezone;
				}
				
			    public Integer timezone_offset;

				public Integer getTimezone_offset () {
					return this.timezone_offset;
				}
				
			    public BigDecimal avg_rating;

				public BigDecimal getAvg_rating () {
					return this.avg_rating;
				}
				
			    public Integer total_ratings;

				public Integer getTotal_ratings () {
					return this.total_ratings;
				}
				
			    public Integer reviews_count;

				public Integer getReviews_count () {
					return this.reviews_count;
				}
				
			    public Integer evaluation_score;

				public Integer getEvaluation_score () {
					return this.evaluation_score;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.airport_iata == null) ? 0 : this.airport_iata.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final origin_airportsStruct other = (origin_airportsStruct) obj;
		
						if (this.airport_iata == null) {
							if (other.airport_iata != null)
								return false;
						
						} else if (!this.airport_iata.equals(other.airport_iata))
						
							return false;
					

		return true;
    }

	public void copyDataTo(origin_airportsStruct other) {

		other.airport_iata = this.airport_iata;
	            other.airport_icao = this.airport_icao;
	            other.airport_name = this.airport_name;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.country = this.country;
	            other.country_code = this.country_code;
	            other.city = this.city;
	            other.timezone = this.timezone;
	            other.timezone_offset = this.timezone_offset;
	            other.avg_rating = this.avg_rating;
	            other.total_ratings = this.total_ratings;
	            other.reviews_count = this.reviews_count;
	            other.evaluation_score = this.evaluation_score;
	            
	}

	public void copyKeysDataTo(origin_airportsStruct other) {

		other.airport_iata = this.airport_iata;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.airport_iata = readString(dis);
					
					this.airport_icao = readString(dis);
					
					this.airport_name = readString(dis);
					
						this.latitude = (BigDecimal) dis.readObject();
					
						this.longitude = (BigDecimal) dis.readObject();
					
					this.country = readString(dis);
					
					this.country_code = readString(dis);
					
					this.city = readString(dis);
					
					this.timezone = readString(dis);
					
						this.timezone_offset = readInteger(dis);
					
						this.avg_rating = (BigDecimal) dis.readObject();
					
						this.total_ratings = readInteger(dis);
					
						this.reviews_count = readInteger(dis);
					
						this.evaluation_score = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.airport_iata = readString(dis);
					
					this.airport_icao = readString(dis);
					
					this.airport_name = readString(dis);
					
						this.latitude = (BigDecimal) dis.readObject();
					
						this.longitude = (BigDecimal) dis.readObject();
					
					this.country = readString(dis);
					
					this.country_code = readString(dis);
					
					this.city = readString(dis);
					
					this.timezone = readString(dis);
					
						this.timezone_offset = readInteger(dis);
					
						this.avg_rating = (BigDecimal) dis.readObject();
					
						this.total_ratings = readInteger(dis);
					
						this.reviews_count = readInteger(dis);
					
						this.evaluation_score = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.airport_iata,dos);
					
					// String
				
						writeString(this.airport_icao,dos);
					
					// String
				
						writeString(this.airport_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.longitude);
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.country_code,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.timezone,dos);
					
					// Integer
				
						writeInteger(this.timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.avg_rating);
					
					// Integer
				
						writeInteger(this.total_ratings,dos);
					
					// Integer
				
						writeInteger(this.reviews_count,dos);
					
					// Integer
				
						writeInteger(this.evaluation_score,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.airport_iata,dos);
					
					// String
				
						writeString(this.airport_icao,dos);
					
					// String
				
						writeString(this.airport_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.longitude);
					
					// String
				
						writeString(this.country,dos);
					
					// String
				
						writeString(this.country_code,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.timezone,dos);
					
					// Integer
				
						writeInteger(this.timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.avg_rating);
					
					// Integer
				
						writeInteger(this.total_ratings,dos);
					
					// Integer
				
						writeInteger(this.reviews_count,dos);
					
					// Integer
				
						writeInteger(this.evaluation_score,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("airport_iata="+airport_iata);
		sb.append(",airport_icao="+airport_icao);
		sb.append(",airport_name="+airport_name);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",country="+country);
		sb.append(",country_code="+country_code);
		sb.append(",city="+city);
		sb.append(",timezone="+timezone);
		sb.append(",timezone_offset="+String.valueOf(timezone_offset));
		sb.append(",avg_rating="+String.valueOf(avg_rating));
		sb.append(",total_ratings="+String.valueOf(total_ratings));
		sb.append(",reviews_count="+String.valueOf(reviews_count));
		sb.append(",evaluation_score="+String.valueOf(evaluation_score));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(origin_airportsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.airport_iata, other.airport_iata);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[0];

	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String status_text;

				public String getStatus_text () {
					return this.status_text;
				}
				
			    public Boolean status_live;

				public Boolean getStatus_live () {
					return this.status_live;
				}
				
			    public String status_color;

				public String getStatus_color () {
					return this.status_color;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public String origin_iata;

				public String getOrigin_iata () {
					return this.origin_iata;
				}
				
			    public String origin_icao;

				public String getOrigin_icao () {
					return this.origin_icao;
				}
				
			    public String origin_name;

				public String getOrigin_name () {
					return this.origin_name;
				}
				
			    public BigDecimal origin_latitude;

				public BigDecimal getOrigin_latitude () {
					return this.origin_latitude;
				}
				
			    public BigDecimal origin_longitude;

				public BigDecimal getOrigin_longitude () {
					return this.origin_longitude;
				}
				
			    public String origin_country;

				public String getOrigin_country () {
					return this.origin_country;
				}
				
			    public String origin_country_code;

				public String getOrigin_country_code () {
					return this.origin_country_code;
				}
				
			    public String origin_city;

				public String getOrigin_city () {
					return this.origin_city;
				}
				
			    public String origin_timezone;

				public String getOrigin_timezone () {
					return this.origin_timezone;
				}
				
			    public Integer origin_timezone_offset;

				public Integer getOrigin_timezone_offset () {
					return this.origin_timezone_offset;
				}
				
			    public BigDecimal origin_avg_rating;

				public BigDecimal getOrigin_avg_rating () {
					return this.origin_avg_rating;
				}
				
			    public Integer origin_total_ratings;

				public Integer getOrigin_total_ratings () {
					return this.origin_total_ratings;
				}
				
			    public Integer origin_reviews_count;

				public Integer getOrigin_reviews_count () {
					return this.origin_reviews_count;
				}
				
			    public Integer origin_evaluation_score;

				public Integer getOrigin_evaluation_score () {
					return this.origin_evaluation_score;
				}
				
			    public BigDecimal origin_arrivals_delay_index;

				public BigDecimal getOrigin_arrivals_delay_index () {
					return this.origin_arrivals_delay_index;
				}
				
			    public Integer origin_arrivals_delay_avg;

				public Integer getOrigin_arrivals_delay_avg () {
					return this.origin_arrivals_delay_avg;
				}
				
			    public BigDecimal origin_departures_delay_index;

				public BigDecimal getOrigin_departures_delay_index () {
					return this.origin_departures_delay_index;
				}
				
			    public Integer origin_departures_delay_avg;

				public Integer getOrigin_departures_delay_avg () {
					return this.origin_departures_delay_avg;
				}
				
			    public BigDecimal origin_arrivals_today_pct_delayed;

				public BigDecimal getOrigin_arrivals_today_pct_delayed () {
					return this.origin_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal origin_departures_today_pct_delayed;

				public BigDecimal getOrigin_departures_today_pct_delayed () {
					return this.origin_departures_today_pct_delayed;
				}
				
			    public BigDecimal origin_arrivals_today_pct_canceled;

				public BigDecimal getOrigin_arrivals_today_pct_canceled () {
					return this.origin_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal origin_departures_today_pct_canceled;

				public BigDecimal getOrigin_departures_today_pct_canceled () {
					return this.origin_departures_today_pct_canceled;
				}
				
			    public String destination_iata;

				public String getDestination_iata () {
					return this.destination_iata;
				}
				
			    public String destination_icao;

				public String getDestination_icao () {
					return this.destination_icao;
				}
				
			    public String destination_name;

				public String getDestination_name () {
					return this.destination_name;
				}
				
			    public BigDecimal destination_latitude;

				public BigDecimal getDestination_latitude () {
					return this.destination_latitude;
				}
				
			    public BigDecimal destination_longitude;

				public BigDecimal getDestination_longitude () {
					return this.destination_longitude;
				}
				
			    public String destination_country;

				public String getDestination_country () {
					return this.destination_country;
				}
				
			    public String destination_country_code;

				public String getDestination_country_code () {
					return this.destination_country_code;
				}
				
			    public String destination_city;

				public String getDestination_city () {
					return this.destination_city;
				}
				
			    public String destination_timezone;

				public String getDestination_timezone () {
					return this.destination_timezone;
				}
				
			    public Integer destination_timezone_offset;

				public Integer getDestination_timezone_offset () {
					return this.destination_timezone_offset;
				}
				
			    public Boolean destination_visible;

				public Boolean getDestination_visible () {
					return this.destination_visible;
				}
				
			    public BigDecimal destination_avg_rating;

				public BigDecimal getDestination_avg_rating () {
					return this.destination_avg_rating;
				}
				
			    public Integer destination_total_ratings;

				public Integer getDestination_total_ratings () {
					return this.destination_total_ratings;
				}
				
			    public Integer destination_reviews_count;

				public Integer getDestination_reviews_count () {
					return this.destination_reviews_count;
				}
				
			    public Integer destination_evaluation_score;

				public Integer getDestination_evaluation_score () {
					return this.destination_evaluation_score;
				}
				
			    public BigDecimal destination_arrivals_delay_index;

				public BigDecimal getDestination_arrivals_delay_index () {
					return this.destination_arrivals_delay_index;
				}
				
			    public Integer destination_arrivals_delay_avg;

				public Integer getDestination_arrivals_delay_avg () {
					return this.destination_arrivals_delay_avg;
				}
				
			    public BigDecimal destination_departures_delay_index;

				public BigDecimal getDestination_departures_delay_index () {
					return this.destination_departures_delay_index;
				}
				
			    public Integer destination_departures_delay_avg;

				public Integer getDestination_departures_delay_avg () {
					return this.destination_departures_delay_avg;
				}
				
			    public BigDecimal destination_arrivals_today_pct_delayed;

				public BigDecimal getDestination_arrivals_today_pct_delayed () {
					return this.destination_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal destination_departures_today_pct_delayed;

				public BigDecimal getDestination_departures_today_pct_delayed () {
					return this.destination_departures_today_pct_delayed;
				}
				
			    public BigDecimal destination_arrivals_today_pct_canceled;

				public BigDecimal getDestination_arrivals_today_pct_canceled () {
					return this.destination_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal destination_departures_today_pct_canceled;

				public BigDecimal getDestination_departures_today_pct_canceled () {
					return this.destination_departures_today_pct_canceled;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",status_text="+status_text);
		sb.append(",status_live="+String.valueOf(status_live));
		sb.append(",status_color="+status_color);
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_short="+airline_short);
		sb.append(",origin_iata="+origin_iata);
		sb.append(",origin_icao="+origin_icao);
		sb.append(",origin_name="+origin_name);
		sb.append(",origin_latitude="+String.valueOf(origin_latitude));
		sb.append(",origin_longitude="+String.valueOf(origin_longitude));
		sb.append(",origin_country="+origin_country);
		sb.append(",origin_country_code="+origin_country_code);
		sb.append(",origin_city="+origin_city);
		sb.append(",origin_timezone="+origin_timezone);
		sb.append(",origin_timezone_offset="+String.valueOf(origin_timezone_offset));
		sb.append(",origin_avg_rating="+String.valueOf(origin_avg_rating));
		sb.append(",origin_total_ratings="+String.valueOf(origin_total_ratings));
		sb.append(",origin_reviews_count="+String.valueOf(origin_reviews_count));
		sb.append(",origin_evaluation_score="+String.valueOf(origin_evaluation_score));
		sb.append(",origin_arrivals_delay_index="+String.valueOf(origin_arrivals_delay_index));
		sb.append(",origin_arrivals_delay_avg="+String.valueOf(origin_arrivals_delay_avg));
		sb.append(",origin_departures_delay_index="+String.valueOf(origin_departures_delay_index));
		sb.append(",origin_departures_delay_avg="+String.valueOf(origin_departures_delay_avg));
		sb.append(",origin_arrivals_today_pct_delayed="+String.valueOf(origin_arrivals_today_pct_delayed));
		sb.append(",origin_departures_today_pct_delayed="+String.valueOf(origin_departures_today_pct_delayed));
		sb.append(",origin_arrivals_today_pct_canceled="+String.valueOf(origin_arrivals_today_pct_canceled));
		sb.append(",origin_departures_today_pct_canceled="+String.valueOf(origin_departures_today_pct_canceled));
		sb.append(",destination_iata="+destination_iata);
		sb.append(",destination_icao="+destination_icao);
		sb.append(",destination_name="+destination_name);
		sb.append(",destination_latitude="+String.valueOf(destination_latitude));
		sb.append(",destination_longitude="+String.valueOf(destination_longitude));
		sb.append(",destination_country="+destination_country);
		sb.append(",destination_country_code="+destination_country_code);
		sb.append(",destination_city="+destination_city);
		sb.append(",destination_timezone="+destination_timezone);
		sb.append(",destination_timezone_offset="+String.valueOf(destination_timezone_offset));
		sb.append(",destination_visible="+String.valueOf(destination_visible));
		sb.append(",destination_avg_rating="+String.valueOf(destination_avg_rating));
		sb.append(",destination_total_ratings="+String.valueOf(destination_total_ratings));
		sb.append(",destination_reviews_count="+String.valueOf(destination_reviews_count));
		sb.append(",destination_evaluation_score="+String.valueOf(destination_evaluation_score));
		sb.append(",destination_arrivals_delay_index="+String.valueOf(destination_arrivals_delay_index));
		sb.append(",destination_arrivals_delay_avg="+String.valueOf(destination_arrivals_delay_avg));
		sb.append(",destination_departures_delay_index="+String.valueOf(destination_departures_delay_index));
		sb.append(",destination_departures_delay_avg="+String.valueOf(destination_departures_delay_avg));
		sb.append(",destination_arrivals_today_pct_delayed="+String.valueOf(destination_arrivals_today_pct_delayed));
		sb.append(",destination_departures_today_pct_delayed="+String.valueOf(destination_departures_today_pct_delayed));
		sb.append(",destination_arrivals_today_pct_canceled="+String.valueOf(destination_arrivals_today_pct_canceled));
		sb.append(",destination_departures_today_pct_canceled="+String.valueOf(destination_departures_today_pct_canceled));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String status_text;

				public String getStatus_text () {
					return this.status_text;
				}
				
			    public Boolean status_live;

				public Boolean getStatus_live () {
					return this.status_live;
				}
				
			    public String status_color;

				public String getStatus_color () {
					return this.status_color;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public String origin_iata;

				public String getOrigin_iata () {
					return this.origin_iata;
				}
				
			    public String origin_icao;

				public String getOrigin_icao () {
					return this.origin_icao;
				}
				
			    public String origin_name;

				public String getOrigin_name () {
					return this.origin_name;
				}
				
			    public BigDecimal origin_latitude;

				public BigDecimal getOrigin_latitude () {
					return this.origin_latitude;
				}
				
			    public BigDecimal origin_longitude;

				public BigDecimal getOrigin_longitude () {
					return this.origin_longitude;
				}
				
			    public String origin_country;

				public String getOrigin_country () {
					return this.origin_country;
				}
				
			    public String origin_country_code;

				public String getOrigin_country_code () {
					return this.origin_country_code;
				}
				
			    public String origin_city;

				public String getOrigin_city () {
					return this.origin_city;
				}
				
			    public String origin_timezone;

				public String getOrigin_timezone () {
					return this.origin_timezone;
				}
				
			    public Integer origin_timezone_offset;

				public Integer getOrigin_timezone_offset () {
					return this.origin_timezone_offset;
				}
				
			    public BigDecimal origin_avg_rating;

				public BigDecimal getOrigin_avg_rating () {
					return this.origin_avg_rating;
				}
				
			    public Integer origin_total_ratings;

				public Integer getOrigin_total_ratings () {
					return this.origin_total_ratings;
				}
				
			    public Integer origin_reviews_count;

				public Integer getOrigin_reviews_count () {
					return this.origin_reviews_count;
				}
				
			    public Integer origin_evaluation_score;

				public Integer getOrigin_evaluation_score () {
					return this.origin_evaluation_score;
				}
				
			    public BigDecimal origin_arrivals_delay_index;

				public BigDecimal getOrigin_arrivals_delay_index () {
					return this.origin_arrivals_delay_index;
				}
				
			    public Integer origin_arrivals_delay_avg;

				public Integer getOrigin_arrivals_delay_avg () {
					return this.origin_arrivals_delay_avg;
				}
				
			    public BigDecimal origin_departures_delay_index;

				public BigDecimal getOrigin_departures_delay_index () {
					return this.origin_departures_delay_index;
				}
				
			    public Integer origin_departures_delay_avg;

				public Integer getOrigin_departures_delay_avg () {
					return this.origin_departures_delay_avg;
				}
				
			    public BigDecimal origin_arrivals_today_pct_delayed;

				public BigDecimal getOrigin_arrivals_today_pct_delayed () {
					return this.origin_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal origin_departures_today_pct_delayed;

				public BigDecimal getOrigin_departures_today_pct_delayed () {
					return this.origin_departures_today_pct_delayed;
				}
				
			    public BigDecimal origin_arrivals_today_pct_canceled;

				public BigDecimal getOrigin_arrivals_today_pct_canceled () {
					return this.origin_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal origin_departures_today_pct_canceled;

				public BigDecimal getOrigin_departures_today_pct_canceled () {
					return this.origin_departures_today_pct_canceled;
				}
				
			    public String destination_iata;

				public String getDestination_iata () {
					return this.destination_iata;
				}
				
			    public String destination_icao;

				public String getDestination_icao () {
					return this.destination_icao;
				}
				
			    public String destination_name;

				public String getDestination_name () {
					return this.destination_name;
				}
				
			    public BigDecimal destination_latitude;

				public BigDecimal getDestination_latitude () {
					return this.destination_latitude;
				}
				
			    public BigDecimal destination_longitude;

				public BigDecimal getDestination_longitude () {
					return this.destination_longitude;
				}
				
			    public String destination_country;

				public String getDestination_country () {
					return this.destination_country;
				}
				
			    public String destination_country_code;

				public String getDestination_country_code () {
					return this.destination_country_code;
				}
				
			    public String destination_city;

				public String getDestination_city () {
					return this.destination_city;
				}
				
			    public String destination_timezone;

				public String getDestination_timezone () {
					return this.destination_timezone;
				}
				
			    public Integer destination_timezone_offset;

				public Integer getDestination_timezone_offset () {
					return this.destination_timezone_offset;
				}
				
			    public Boolean destination_visible;

				public Boolean getDestination_visible () {
					return this.destination_visible;
				}
				
			    public BigDecimal destination_avg_rating;

				public BigDecimal getDestination_avg_rating () {
					return this.destination_avg_rating;
				}
				
			    public Integer destination_total_ratings;

				public Integer getDestination_total_ratings () {
					return this.destination_total_ratings;
				}
				
			    public Integer destination_reviews_count;

				public Integer getDestination_reviews_count () {
					return this.destination_reviews_count;
				}
				
			    public Integer destination_evaluation_score;

				public Integer getDestination_evaluation_score () {
					return this.destination_evaluation_score;
				}
				
			    public BigDecimal destination_arrivals_delay_index;

				public BigDecimal getDestination_arrivals_delay_index () {
					return this.destination_arrivals_delay_index;
				}
				
			    public Integer destination_arrivals_delay_avg;

				public Integer getDestination_arrivals_delay_avg () {
					return this.destination_arrivals_delay_avg;
				}
				
			    public BigDecimal destination_departures_delay_index;

				public BigDecimal getDestination_departures_delay_index () {
					return this.destination_departures_delay_index;
				}
				
			    public Integer destination_departures_delay_avg;

				public Integer getDestination_departures_delay_avg () {
					return this.destination_departures_delay_avg;
				}
				
			    public BigDecimal destination_arrivals_today_pct_delayed;

				public BigDecimal getDestination_arrivals_today_pct_delayed () {
					return this.destination_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal destination_departures_today_pct_delayed;

				public BigDecimal getDestination_departures_today_pct_delayed () {
					return this.destination_departures_today_pct_delayed;
				}
				
			    public BigDecimal destination_arrivals_today_pct_canceled;

				public BigDecimal getDestination_arrivals_today_pct_canceled () {
					return this.destination_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal destination_departures_today_pct_canceled;

				public BigDecimal getDestination_departures_today_pct_canceled () {
					return this.destination_departures_today_pct_canceled;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.flight_number == null) {
							if (other.flight_number != null)
								return false;
						
						} else if (!this.flight_number.equals(other.flight_number))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.flight_number = this.flight_number;
	            other.flight_alternative = this.flight_alternative;
	            other.status_text = this.status_text;
	            other.status_live = this.status_live;
	            other.status_color = this.status_color;
	            other.aircraft_code = this.aircraft_code;
	            other.aircraft_text = this.aircraft_text;
	            other.aircraft_hex = this.aircraft_hex;
	            other.aircraft_registration = this.aircraft_registration;
	            other.airline_name = this.airline_name;
	            other.airline_iata = this.airline_iata;
	            other.airline_icao = this.airline_icao;
	            other.airline_short = this.airline_short;
	            other.origin_iata = this.origin_iata;
	            other.origin_icao = this.origin_icao;
	            other.origin_name = this.origin_name;
	            other.origin_latitude = this.origin_latitude;
	            other.origin_longitude = this.origin_longitude;
	            other.origin_country = this.origin_country;
	            other.origin_country_code = this.origin_country_code;
	            other.origin_city = this.origin_city;
	            other.origin_timezone = this.origin_timezone;
	            other.origin_timezone_offset = this.origin_timezone_offset;
	            other.origin_avg_rating = this.origin_avg_rating;
	            other.origin_total_ratings = this.origin_total_ratings;
	            other.origin_reviews_count = this.origin_reviews_count;
	            other.origin_evaluation_score = this.origin_evaluation_score;
	            other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
	            other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
	            other.origin_departures_delay_index = this.origin_departures_delay_index;
	            other.origin_departures_delay_avg = this.origin_departures_delay_avg;
	            other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
	            other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
	            other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
	            other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
	            other.destination_iata = this.destination_iata;
	            other.destination_icao = this.destination_icao;
	            other.destination_name = this.destination_name;
	            other.destination_latitude = this.destination_latitude;
	            other.destination_longitude = this.destination_longitude;
	            other.destination_country = this.destination_country;
	            other.destination_country_code = this.destination_country_code;
	            other.destination_city = this.destination_city;
	            other.destination_timezone = this.destination_timezone;
	            other.destination_timezone_offset = this.destination_timezone_offset;
	            other.destination_visible = this.destination_visible;
	            other.destination_avg_rating = this.destination_avg_rating;
	            other.destination_total_ratings = this.destination_total_ratings;
	            other.destination_reviews_count = this.destination_reviews_count;
	            other.destination_evaluation_score = this.destination_evaluation_score;
	            other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
	            other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
	            other.destination_departures_delay_index = this.destination_departures_delay_index;
	            other.destination_departures_delay_avg = this.destination_departures_delay_avg;
	            other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
	            other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
	            other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
	            other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
	            other.scheduled_departure = this.scheduled_departure;
	            other.scheduled_arrival = this.scheduled_arrival;
	            other.real_departure = this.real_departure;
	            other.real_arrival = this.real_arrival;
	            other.estimated_departure = this.estimated_departure;
	            other.estimated_arrival = this.estimated_arrival;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.flight_number = this.flight_number;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",status_text="+status_text);
		sb.append(",status_live="+String.valueOf(status_live));
		sb.append(",status_color="+status_color);
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_short="+airline_short);
		sb.append(",origin_iata="+origin_iata);
		sb.append(",origin_icao="+origin_icao);
		sb.append(",origin_name="+origin_name);
		sb.append(",origin_latitude="+String.valueOf(origin_latitude));
		sb.append(",origin_longitude="+String.valueOf(origin_longitude));
		sb.append(",origin_country="+origin_country);
		sb.append(",origin_country_code="+origin_country_code);
		sb.append(",origin_city="+origin_city);
		sb.append(",origin_timezone="+origin_timezone);
		sb.append(",origin_timezone_offset="+String.valueOf(origin_timezone_offset));
		sb.append(",origin_avg_rating="+String.valueOf(origin_avg_rating));
		sb.append(",origin_total_ratings="+String.valueOf(origin_total_ratings));
		sb.append(",origin_reviews_count="+String.valueOf(origin_reviews_count));
		sb.append(",origin_evaluation_score="+String.valueOf(origin_evaluation_score));
		sb.append(",origin_arrivals_delay_index="+String.valueOf(origin_arrivals_delay_index));
		sb.append(",origin_arrivals_delay_avg="+String.valueOf(origin_arrivals_delay_avg));
		sb.append(",origin_departures_delay_index="+String.valueOf(origin_departures_delay_index));
		sb.append(",origin_departures_delay_avg="+String.valueOf(origin_departures_delay_avg));
		sb.append(",origin_arrivals_today_pct_delayed="+String.valueOf(origin_arrivals_today_pct_delayed));
		sb.append(",origin_departures_today_pct_delayed="+String.valueOf(origin_departures_today_pct_delayed));
		sb.append(",origin_arrivals_today_pct_canceled="+String.valueOf(origin_arrivals_today_pct_canceled));
		sb.append(",origin_departures_today_pct_canceled="+String.valueOf(origin_departures_today_pct_canceled));
		sb.append(",destination_iata="+destination_iata);
		sb.append(",destination_icao="+destination_icao);
		sb.append(",destination_name="+destination_name);
		sb.append(",destination_latitude="+String.valueOf(destination_latitude));
		sb.append(",destination_longitude="+String.valueOf(destination_longitude));
		sb.append(",destination_country="+destination_country);
		sb.append(",destination_country_code="+destination_country_code);
		sb.append(",destination_city="+destination_city);
		sb.append(",destination_timezone="+destination_timezone);
		sb.append(",destination_timezone_offset="+String.valueOf(destination_timezone_offset));
		sb.append(",destination_visible="+String.valueOf(destination_visible));
		sb.append(",destination_avg_rating="+String.valueOf(destination_avg_rating));
		sb.append(",destination_total_ratings="+String.valueOf(destination_total_ratings));
		sb.append(",destination_reviews_count="+String.valueOf(destination_reviews_count));
		sb.append(",destination_evaluation_score="+String.valueOf(destination_evaluation_score));
		sb.append(",destination_arrivals_delay_index="+String.valueOf(destination_arrivals_delay_index));
		sb.append(",destination_arrivals_delay_avg="+String.valueOf(destination_arrivals_delay_avg));
		sb.append(",destination_departures_delay_index="+String.valueOf(destination_departures_delay_index));
		sb.append(",destination_departures_delay_avg="+String.valueOf(destination_departures_delay_avg));
		sb.append(",destination_arrivals_today_pct_delayed="+String.valueOf(destination_arrivals_today_pct_delayed));
		sb.append(",destination_departures_today_pct_delayed="+String.valueOf(destination_departures_today_pct_delayed));
		sb.append(",destination_arrivals_today_pct_canceled="+String.valueOf(destination_arrivals_today_pct_canceled));
		sb.append(",destination_departures_today_pct_canceled="+String.valueOf(destination_departures_today_pct_canceled));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String status_text;

				public String getStatus_text () {
					return this.status_text;
				}
				
			    public Boolean status_live;

				public Boolean getStatus_live () {
					return this.status_live;
				}
				
			    public String status_color;

				public String getStatus_color () {
					return this.status_color;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public String origin_iata;

				public String getOrigin_iata () {
					return this.origin_iata;
				}
				
			    public String origin_icao;

				public String getOrigin_icao () {
					return this.origin_icao;
				}
				
			    public String origin_name;

				public String getOrigin_name () {
					return this.origin_name;
				}
				
			    public BigDecimal origin_latitude;

				public BigDecimal getOrigin_latitude () {
					return this.origin_latitude;
				}
				
			    public BigDecimal origin_longitude;

				public BigDecimal getOrigin_longitude () {
					return this.origin_longitude;
				}
				
			    public String origin_country;

				public String getOrigin_country () {
					return this.origin_country;
				}
				
			    public String origin_country_code;

				public String getOrigin_country_code () {
					return this.origin_country_code;
				}
				
			    public String origin_city;

				public String getOrigin_city () {
					return this.origin_city;
				}
				
			    public String origin_timezone;

				public String getOrigin_timezone () {
					return this.origin_timezone;
				}
				
			    public Integer origin_timezone_offset;

				public Integer getOrigin_timezone_offset () {
					return this.origin_timezone_offset;
				}
				
			    public BigDecimal origin_avg_rating;

				public BigDecimal getOrigin_avg_rating () {
					return this.origin_avg_rating;
				}
				
			    public Integer origin_total_ratings;

				public Integer getOrigin_total_ratings () {
					return this.origin_total_ratings;
				}
				
			    public Integer origin_reviews_count;

				public Integer getOrigin_reviews_count () {
					return this.origin_reviews_count;
				}
				
			    public Integer origin_evaluation_score;

				public Integer getOrigin_evaluation_score () {
					return this.origin_evaluation_score;
				}
				
			    public BigDecimal origin_arrivals_delay_index;

				public BigDecimal getOrigin_arrivals_delay_index () {
					return this.origin_arrivals_delay_index;
				}
				
			    public Integer origin_arrivals_delay_avg;

				public Integer getOrigin_arrivals_delay_avg () {
					return this.origin_arrivals_delay_avg;
				}
				
			    public BigDecimal origin_departures_delay_index;

				public BigDecimal getOrigin_departures_delay_index () {
					return this.origin_departures_delay_index;
				}
				
			    public Integer origin_departures_delay_avg;

				public Integer getOrigin_departures_delay_avg () {
					return this.origin_departures_delay_avg;
				}
				
			    public BigDecimal origin_arrivals_today_pct_delayed;

				public BigDecimal getOrigin_arrivals_today_pct_delayed () {
					return this.origin_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal origin_departures_today_pct_delayed;

				public BigDecimal getOrigin_departures_today_pct_delayed () {
					return this.origin_departures_today_pct_delayed;
				}
				
			    public BigDecimal origin_arrivals_today_pct_canceled;

				public BigDecimal getOrigin_arrivals_today_pct_canceled () {
					return this.origin_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal origin_departures_today_pct_canceled;

				public BigDecimal getOrigin_departures_today_pct_canceled () {
					return this.origin_departures_today_pct_canceled;
				}
				
			    public String destination_iata;

				public String getDestination_iata () {
					return this.destination_iata;
				}
				
			    public String destination_icao;

				public String getDestination_icao () {
					return this.destination_icao;
				}
				
			    public String destination_name;

				public String getDestination_name () {
					return this.destination_name;
				}
				
			    public BigDecimal destination_latitude;

				public BigDecimal getDestination_latitude () {
					return this.destination_latitude;
				}
				
			    public BigDecimal destination_longitude;

				public BigDecimal getDestination_longitude () {
					return this.destination_longitude;
				}
				
			    public String destination_country;

				public String getDestination_country () {
					return this.destination_country;
				}
				
			    public String destination_country_code;

				public String getDestination_country_code () {
					return this.destination_country_code;
				}
				
			    public String destination_city;

				public String getDestination_city () {
					return this.destination_city;
				}
				
			    public String destination_timezone;

				public String getDestination_timezone () {
					return this.destination_timezone;
				}
				
			    public Integer destination_timezone_offset;

				public Integer getDestination_timezone_offset () {
					return this.destination_timezone_offset;
				}
				
			    public Boolean destination_visible;

				public Boolean getDestination_visible () {
					return this.destination_visible;
				}
				
			    public BigDecimal destination_avg_rating;

				public BigDecimal getDestination_avg_rating () {
					return this.destination_avg_rating;
				}
				
			    public Integer destination_total_ratings;

				public Integer getDestination_total_ratings () {
					return this.destination_total_ratings;
				}
				
			    public Integer destination_reviews_count;

				public Integer getDestination_reviews_count () {
					return this.destination_reviews_count;
				}
				
			    public Integer destination_evaluation_score;

				public Integer getDestination_evaluation_score () {
					return this.destination_evaluation_score;
				}
				
			    public BigDecimal destination_arrivals_delay_index;

				public BigDecimal getDestination_arrivals_delay_index () {
					return this.destination_arrivals_delay_index;
				}
				
			    public Integer destination_arrivals_delay_avg;

				public Integer getDestination_arrivals_delay_avg () {
					return this.destination_arrivals_delay_avg;
				}
				
			    public BigDecimal destination_departures_delay_index;

				public BigDecimal getDestination_departures_delay_index () {
					return this.destination_departures_delay_index;
				}
				
			    public Integer destination_departures_delay_avg;

				public Integer getDestination_departures_delay_avg () {
					return this.destination_departures_delay_avg;
				}
				
			    public BigDecimal destination_arrivals_today_pct_delayed;

				public BigDecimal getDestination_arrivals_today_pct_delayed () {
					return this.destination_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal destination_departures_today_pct_delayed;

				public BigDecimal getDestination_departures_today_pct_delayed () {
					return this.destination_departures_today_pct_delayed;
				}
				
			    public BigDecimal destination_arrivals_today_pct_canceled;

				public BigDecimal getDestination_arrivals_today_pct_canceled () {
					return this.destination_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal destination_departures_today_pct_canceled;

				public BigDecimal getDestination_departures_today_pct_canceled () {
					return this.destination_departures_today_pct_canceled;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.flight_number == null) {
							if (other.flight_number != null)
								return false;
						
						} else if (!this.flight_number.equals(other.flight_number))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.flight_number = this.flight_number;
	            other.flight_alternative = this.flight_alternative;
	            other.status_text = this.status_text;
	            other.status_live = this.status_live;
	            other.status_color = this.status_color;
	            other.aircraft_code = this.aircraft_code;
	            other.aircraft_text = this.aircraft_text;
	            other.aircraft_hex = this.aircraft_hex;
	            other.aircraft_registration = this.aircraft_registration;
	            other.airline_name = this.airline_name;
	            other.airline_iata = this.airline_iata;
	            other.airline_icao = this.airline_icao;
	            other.airline_short = this.airline_short;
	            other.origin_iata = this.origin_iata;
	            other.origin_icao = this.origin_icao;
	            other.origin_name = this.origin_name;
	            other.origin_latitude = this.origin_latitude;
	            other.origin_longitude = this.origin_longitude;
	            other.origin_country = this.origin_country;
	            other.origin_country_code = this.origin_country_code;
	            other.origin_city = this.origin_city;
	            other.origin_timezone = this.origin_timezone;
	            other.origin_timezone_offset = this.origin_timezone_offset;
	            other.origin_avg_rating = this.origin_avg_rating;
	            other.origin_total_ratings = this.origin_total_ratings;
	            other.origin_reviews_count = this.origin_reviews_count;
	            other.origin_evaluation_score = this.origin_evaluation_score;
	            other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
	            other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
	            other.origin_departures_delay_index = this.origin_departures_delay_index;
	            other.origin_departures_delay_avg = this.origin_departures_delay_avg;
	            other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
	            other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
	            other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
	            other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
	            other.destination_iata = this.destination_iata;
	            other.destination_icao = this.destination_icao;
	            other.destination_name = this.destination_name;
	            other.destination_latitude = this.destination_latitude;
	            other.destination_longitude = this.destination_longitude;
	            other.destination_country = this.destination_country;
	            other.destination_country_code = this.destination_country_code;
	            other.destination_city = this.destination_city;
	            other.destination_timezone = this.destination_timezone;
	            other.destination_timezone_offset = this.destination_timezone_offset;
	            other.destination_visible = this.destination_visible;
	            other.destination_avg_rating = this.destination_avg_rating;
	            other.destination_total_ratings = this.destination_total_ratings;
	            other.destination_reviews_count = this.destination_reviews_count;
	            other.destination_evaluation_score = this.destination_evaluation_score;
	            other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
	            other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
	            other.destination_departures_delay_index = this.destination_departures_delay_index;
	            other.destination_departures_delay_avg = this.destination_departures_delay_avg;
	            other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
	            other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
	            other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
	            other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
	            other.scheduled_departure = this.scheduled_departure;
	            other.scheduled_arrival = this.scheduled_arrival;
	            other.real_departure = this.real_departure;
	            other.real_arrival = this.real_arrival;
	            other.estimated_departure = this.estimated_departure;
	            other.estimated_arrival = this.estimated_arrival;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.flight_number = this.flight_number;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",status_text="+status_text);
		sb.append(",status_live="+String.valueOf(status_live));
		sb.append(",status_color="+status_color);
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_short="+airline_short);
		sb.append(",origin_iata="+origin_iata);
		sb.append(",origin_icao="+origin_icao);
		sb.append(",origin_name="+origin_name);
		sb.append(",origin_latitude="+String.valueOf(origin_latitude));
		sb.append(",origin_longitude="+String.valueOf(origin_longitude));
		sb.append(",origin_country="+origin_country);
		sb.append(",origin_country_code="+origin_country_code);
		sb.append(",origin_city="+origin_city);
		sb.append(",origin_timezone="+origin_timezone);
		sb.append(",origin_timezone_offset="+String.valueOf(origin_timezone_offset));
		sb.append(",origin_avg_rating="+String.valueOf(origin_avg_rating));
		sb.append(",origin_total_ratings="+String.valueOf(origin_total_ratings));
		sb.append(",origin_reviews_count="+String.valueOf(origin_reviews_count));
		sb.append(",origin_evaluation_score="+String.valueOf(origin_evaluation_score));
		sb.append(",origin_arrivals_delay_index="+String.valueOf(origin_arrivals_delay_index));
		sb.append(",origin_arrivals_delay_avg="+String.valueOf(origin_arrivals_delay_avg));
		sb.append(",origin_departures_delay_index="+String.valueOf(origin_departures_delay_index));
		sb.append(",origin_departures_delay_avg="+String.valueOf(origin_departures_delay_avg));
		sb.append(",origin_arrivals_today_pct_delayed="+String.valueOf(origin_arrivals_today_pct_delayed));
		sb.append(",origin_departures_today_pct_delayed="+String.valueOf(origin_departures_today_pct_delayed));
		sb.append(",origin_arrivals_today_pct_canceled="+String.valueOf(origin_arrivals_today_pct_canceled));
		sb.append(",origin_departures_today_pct_canceled="+String.valueOf(origin_departures_today_pct_canceled));
		sb.append(",destination_iata="+destination_iata);
		sb.append(",destination_icao="+destination_icao);
		sb.append(",destination_name="+destination_name);
		sb.append(",destination_latitude="+String.valueOf(destination_latitude));
		sb.append(",destination_longitude="+String.valueOf(destination_longitude));
		sb.append(",destination_country="+destination_country);
		sb.append(",destination_country_code="+destination_country_code);
		sb.append(",destination_city="+destination_city);
		sb.append(",destination_timezone="+destination_timezone);
		sb.append(",destination_timezone_offset="+String.valueOf(destination_timezone_offset));
		sb.append(",destination_visible="+String.valueOf(destination_visible));
		sb.append(",destination_avg_rating="+String.valueOf(destination_avg_rating));
		sb.append(",destination_total_ratings="+String.valueOf(destination_total_ratings));
		sb.append(",destination_reviews_count="+String.valueOf(destination_reviews_count));
		sb.append(",destination_evaluation_score="+String.valueOf(destination_evaluation_score));
		sb.append(",destination_arrivals_delay_index="+String.valueOf(destination_arrivals_delay_index));
		sb.append(",destination_arrivals_delay_avg="+String.valueOf(destination_arrivals_delay_avg));
		sb.append(",destination_departures_delay_index="+String.valueOf(destination_departures_delay_index));
		sb.append(",destination_departures_delay_avg="+String.valueOf(destination_departures_delay_avg));
		sb.append(",destination_arrivals_today_pct_delayed="+String.valueOf(destination_arrivals_today_pct_delayed));
		sb.append(",destination_departures_today_pct_delayed="+String.valueOf(destination_departures_today_pct_delayed));
		sb.append(",destination_arrivals_today_pct_canceled="+String.valueOf(destination_arrivals_today_pct_canceled));
		sb.append(",destination_departures_today_pct_canceled="+String.valueOf(destination_departures_today_pct_canceled));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String status_text;

				public String getStatus_text () {
					return this.status_text;
				}
				
			    public Boolean status_live;

				public Boolean getStatus_live () {
					return this.status_live;
				}
				
			    public String status_color;

				public String getStatus_color () {
					return this.status_color;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public String origin_iata;

				public String getOrigin_iata () {
					return this.origin_iata;
				}
				
			    public String origin_icao;

				public String getOrigin_icao () {
					return this.origin_icao;
				}
				
			    public String origin_name;

				public String getOrigin_name () {
					return this.origin_name;
				}
				
			    public BigDecimal origin_latitude;

				public BigDecimal getOrigin_latitude () {
					return this.origin_latitude;
				}
				
			    public BigDecimal origin_longitude;

				public BigDecimal getOrigin_longitude () {
					return this.origin_longitude;
				}
				
			    public String origin_country;

				public String getOrigin_country () {
					return this.origin_country;
				}
				
			    public String origin_country_code;

				public String getOrigin_country_code () {
					return this.origin_country_code;
				}
				
			    public String origin_city;

				public String getOrigin_city () {
					return this.origin_city;
				}
				
			    public String origin_timezone;

				public String getOrigin_timezone () {
					return this.origin_timezone;
				}
				
			    public Integer origin_timezone_offset;

				public Integer getOrigin_timezone_offset () {
					return this.origin_timezone_offset;
				}
				
			    public BigDecimal origin_avg_rating;

				public BigDecimal getOrigin_avg_rating () {
					return this.origin_avg_rating;
				}
				
			    public Integer origin_total_ratings;

				public Integer getOrigin_total_ratings () {
					return this.origin_total_ratings;
				}
				
			    public Integer origin_reviews_count;

				public Integer getOrigin_reviews_count () {
					return this.origin_reviews_count;
				}
				
			    public Integer origin_evaluation_score;

				public Integer getOrigin_evaluation_score () {
					return this.origin_evaluation_score;
				}
				
			    public BigDecimal origin_arrivals_delay_index;

				public BigDecimal getOrigin_arrivals_delay_index () {
					return this.origin_arrivals_delay_index;
				}
				
			    public Integer origin_arrivals_delay_avg;

				public Integer getOrigin_arrivals_delay_avg () {
					return this.origin_arrivals_delay_avg;
				}
				
			    public BigDecimal origin_departures_delay_index;

				public BigDecimal getOrigin_departures_delay_index () {
					return this.origin_departures_delay_index;
				}
				
			    public Integer origin_departures_delay_avg;

				public Integer getOrigin_departures_delay_avg () {
					return this.origin_departures_delay_avg;
				}
				
			    public BigDecimal origin_arrivals_today_pct_delayed;

				public BigDecimal getOrigin_arrivals_today_pct_delayed () {
					return this.origin_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal origin_departures_today_pct_delayed;

				public BigDecimal getOrigin_departures_today_pct_delayed () {
					return this.origin_departures_today_pct_delayed;
				}
				
			    public BigDecimal origin_arrivals_today_pct_canceled;

				public BigDecimal getOrigin_arrivals_today_pct_canceled () {
					return this.origin_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal origin_departures_today_pct_canceled;

				public BigDecimal getOrigin_departures_today_pct_canceled () {
					return this.origin_departures_today_pct_canceled;
				}
				
			    public String destination_iata;

				public String getDestination_iata () {
					return this.destination_iata;
				}
				
			    public String destination_icao;

				public String getDestination_icao () {
					return this.destination_icao;
				}
				
			    public String destination_name;

				public String getDestination_name () {
					return this.destination_name;
				}
				
			    public BigDecimal destination_latitude;

				public BigDecimal getDestination_latitude () {
					return this.destination_latitude;
				}
				
			    public BigDecimal destination_longitude;

				public BigDecimal getDestination_longitude () {
					return this.destination_longitude;
				}
				
			    public String destination_country;

				public String getDestination_country () {
					return this.destination_country;
				}
				
			    public String destination_country_code;

				public String getDestination_country_code () {
					return this.destination_country_code;
				}
				
			    public String destination_city;

				public String getDestination_city () {
					return this.destination_city;
				}
				
			    public String destination_timezone;

				public String getDestination_timezone () {
					return this.destination_timezone;
				}
				
			    public Integer destination_timezone_offset;

				public Integer getDestination_timezone_offset () {
					return this.destination_timezone_offset;
				}
				
			    public Boolean destination_visible;

				public Boolean getDestination_visible () {
					return this.destination_visible;
				}
				
			    public BigDecimal destination_avg_rating;

				public BigDecimal getDestination_avg_rating () {
					return this.destination_avg_rating;
				}
				
			    public Integer destination_total_ratings;

				public Integer getDestination_total_ratings () {
					return this.destination_total_ratings;
				}
				
			    public Integer destination_reviews_count;

				public Integer getDestination_reviews_count () {
					return this.destination_reviews_count;
				}
				
			    public Integer destination_evaluation_score;

				public Integer getDestination_evaluation_score () {
					return this.destination_evaluation_score;
				}
				
			    public BigDecimal destination_arrivals_delay_index;

				public BigDecimal getDestination_arrivals_delay_index () {
					return this.destination_arrivals_delay_index;
				}
				
			    public Integer destination_arrivals_delay_avg;

				public Integer getDestination_arrivals_delay_avg () {
					return this.destination_arrivals_delay_avg;
				}
				
			    public BigDecimal destination_departures_delay_index;

				public BigDecimal getDestination_departures_delay_index () {
					return this.destination_departures_delay_index;
				}
				
			    public Integer destination_departures_delay_avg;

				public Integer getDestination_departures_delay_avg () {
					return this.destination_departures_delay_avg;
				}
				
			    public BigDecimal destination_arrivals_today_pct_delayed;

				public BigDecimal getDestination_arrivals_today_pct_delayed () {
					return this.destination_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal destination_departures_today_pct_delayed;

				public BigDecimal getDestination_departures_today_pct_delayed () {
					return this.destination_departures_today_pct_delayed;
				}
				
			    public BigDecimal destination_arrivals_today_pct_canceled;

				public BigDecimal getDestination_arrivals_today_pct_canceled () {
					return this.destination_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal destination_departures_today_pct_canceled;

				public BigDecimal getDestination_departures_today_pct_canceled () {
					return this.destination_departures_today_pct_canceled;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.flight_number == null) {
							if (other.flight_number != null)
								return false;
						
						} else if (!this.flight_number.equals(other.flight_number))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.flight_number = this.flight_number;
	            other.flight_alternative = this.flight_alternative;
	            other.status_text = this.status_text;
	            other.status_live = this.status_live;
	            other.status_color = this.status_color;
	            other.aircraft_code = this.aircraft_code;
	            other.aircraft_text = this.aircraft_text;
	            other.aircraft_hex = this.aircraft_hex;
	            other.aircraft_registration = this.aircraft_registration;
	            other.airline_name = this.airline_name;
	            other.airline_iata = this.airline_iata;
	            other.airline_icao = this.airline_icao;
	            other.airline_short = this.airline_short;
	            other.origin_iata = this.origin_iata;
	            other.origin_icao = this.origin_icao;
	            other.origin_name = this.origin_name;
	            other.origin_latitude = this.origin_latitude;
	            other.origin_longitude = this.origin_longitude;
	            other.origin_country = this.origin_country;
	            other.origin_country_code = this.origin_country_code;
	            other.origin_city = this.origin_city;
	            other.origin_timezone = this.origin_timezone;
	            other.origin_timezone_offset = this.origin_timezone_offset;
	            other.origin_avg_rating = this.origin_avg_rating;
	            other.origin_total_ratings = this.origin_total_ratings;
	            other.origin_reviews_count = this.origin_reviews_count;
	            other.origin_evaluation_score = this.origin_evaluation_score;
	            other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
	            other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
	            other.origin_departures_delay_index = this.origin_departures_delay_index;
	            other.origin_departures_delay_avg = this.origin_departures_delay_avg;
	            other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
	            other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
	            other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
	            other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
	            other.destination_iata = this.destination_iata;
	            other.destination_icao = this.destination_icao;
	            other.destination_name = this.destination_name;
	            other.destination_latitude = this.destination_latitude;
	            other.destination_longitude = this.destination_longitude;
	            other.destination_country = this.destination_country;
	            other.destination_country_code = this.destination_country_code;
	            other.destination_city = this.destination_city;
	            other.destination_timezone = this.destination_timezone;
	            other.destination_timezone_offset = this.destination_timezone_offset;
	            other.destination_visible = this.destination_visible;
	            other.destination_avg_rating = this.destination_avg_rating;
	            other.destination_total_ratings = this.destination_total_ratings;
	            other.destination_reviews_count = this.destination_reviews_count;
	            other.destination_evaluation_score = this.destination_evaluation_score;
	            other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
	            other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
	            other.destination_departures_delay_index = this.destination_departures_delay_index;
	            other.destination_departures_delay_avg = this.destination_departures_delay_avg;
	            other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
	            other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
	            other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
	            other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
	            other.scheduled_departure = this.scheduled_departure;
	            other.scheduled_arrival = this.scheduled_arrival;
	            other.real_departure = this.real_departure;
	            other.real_arrival = this.real_arrival;
	            other.estimated_departure = this.estimated_departure;
	            other.estimated_arrival = this.estimated_arrival;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.flight_number = this.flight_number;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",status_text="+status_text);
		sb.append(",status_live="+String.valueOf(status_live));
		sb.append(",status_color="+status_color);
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_short="+airline_short);
		sb.append(",origin_iata="+origin_iata);
		sb.append(",origin_icao="+origin_icao);
		sb.append(",origin_name="+origin_name);
		sb.append(",origin_latitude="+String.valueOf(origin_latitude));
		sb.append(",origin_longitude="+String.valueOf(origin_longitude));
		sb.append(",origin_country="+origin_country);
		sb.append(",origin_country_code="+origin_country_code);
		sb.append(",origin_city="+origin_city);
		sb.append(",origin_timezone="+origin_timezone);
		sb.append(",origin_timezone_offset="+String.valueOf(origin_timezone_offset));
		sb.append(",origin_avg_rating="+String.valueOf(origin_avg_rating));
		sb.append(",origin_total_ratings="+String.valueOf(origin_total_ratings));
		sb.append(",origin_reviews_count="+String.valueOf(origin_reviews_count));
		sb.append(",origin_evaluation_score="+String.valueOf(origin_evaluation_score));
		sb.append(",origin_arrivals_delay_index="+String.valueOf(origin_arrivals_delay_index));
		sb.append(",origin_arrivals_delay_avg="+String.valueOf(origin_arrivals_delay_avg));
		sb.append(",origin_departures_delay_index="+String.valueOf(origin_departures_delay_index));
		sb.append(",origin_departures_delay_avg="+String.valueOf(origin_departures_delay_avg));
		sb.append(",origin_arrivals_today_pct_delayed="+String.valueOf(origin_arrivals_today_pct_delayed));
		sb.append(",origin_departures_today_pct_delayed="+String.valueOf(origin_departures_today_pct_delayed));
		sb.append(",origin_arrivals_today_pct_canceled="+String.valueOf(origin_arrivals_today_pct_canceled));
		sb.append(",origin_departures_today_pct_canceled="+String.valueOf(origin_departures_today_pct_canceled));
		sb.append(",destination_iata="+destination_iata);
		sb.append(",destination_icao="+destination_icao);
		sb.append(",destination_name="+destination_name);
		sb.append(",destination_latitude="+String.valueOf(destination_latitude));
		sb.append(",destination_longitude="+String.valueOf(destination_longitude));
		sb.append(",destination_country="+destination_country);
		sb.append(",destination_country_code="+destination_country_code);
		sb.append(",destination_city="+destination_city);
		sb.append(",destination_timezone="+destination_timezone);
		sb.append(",destination_timezone_offset="+String.valueOf(destination_timezone_offset));
		sb.append(",destination_visible="+String.valueOf(destination_visible));
		sb.append(",destination_avg_rating="+String.valueOf(destination_avg_rating));
		sb.append(",destination_total_ratings="+String.valueOf(destination_total_ratings));
		sb.append(",destination_reviews_count="+String.valueOf(destination_reviews_count));
		sb.append(",destination_evaluation_score="+String.valueOf(destination_evaluation_score));
		sb.append(",destination_arrivals_delay_index="+String.valueOf(destination_arrivals_delay_index));
		sb.append(",destination_arrivals_delay_avg="+String.valueOf(destination_arrivals_delay_avg));
		sb.append(",destination_departures_delay_index="+String.valueOf(destination_departures_delay_index));
		sb.append(",destination_departures_delay_avg="+String.valueOf(destination_departures_delay_avg));
		sb.append(",destination_arrivals_today_pct_delayed="+String.valueOf(destination_arrivals_today_pct_delayed));
		sb.append(",destination_departures_today_pct_delayed="+String.valueOf(destination_departures_today_pct_delayed));
		sb.append(",destination_arrivals_today_pct_canceled="+String.valueOf(destination_arrivals_today_pct_canceled));
		sb.append(",destination_departures_today_pct_canceled="+String.valueOf(destination_departures_today_pct_canceled));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);

		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
row2Struct row4 = row2;
origin_airportsStruct origin_airports = new origin_airportsStruct();
origin_airportsStruct row6 = origin_airports;








	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 14 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "dim_airports";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		
        String properties_tDBOutput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
            properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBOutput_1;
		
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "root";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:nK7w9mbO6dagPPqGGvKqnTiDc2HskpXP8Gp47umQ9zI=");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
	    String update_tDBOutput_1 = "UPDATE `" + "dim_airports" + "` SET `airport_icao` = ?,`airport_name` = ?,`latitude` = ?,`longitude` = ?,`country` = ?,`country_code` = ?,`city` = ?,`timezone` = ?,`timezone_offset` = ?,`avg_rating` = ?,`total_ratings` = ?,`reviews_count` = ?,`evaluation_score` = ? WHERE `airport_iata` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO `" + "dim_airports" + "` (`airport_iata`,`airport_icao`,`airport_name`,`latitude`,`longitude`,`country`,`country_code`,`city`,`timezone`,`timezone_offset`,`avg_rating`,`total_ratings`,`reviews_count`,`evaluation_score`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	         
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"origin_airports");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[14];

        public void addRow(String[] row) {

            for (int i = 0; i < 14; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 13 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 13 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[13] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"airport_iata","airport_icao","airport_name","latitude","longitude","country","country_code","city","timezone","timezone_offset","avg_rating","total_ratings","reviews_count","evaluation_score",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
origin_airportsStruct origin_airports_tmp = new origin_airportsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[64];

        public void addRow(String[] row) {

            for (int i = 0; i < 64; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 63 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 63 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[63] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"flight_number","flight_alternative","status_text","status_live","status_color","aircraft_code","aircraft_text","aircraft_hex","aircraft_registration","airline_name","airline_iata","airline_icao","airline_short","origin_iata","origin_icao","origin_name","origin_latitude","origin_longitude","origin_country","origin_country_code","origin_city","origin_timezone","origin_timezone_offset","origin_avg_rating","origin_total_ratings","origin_reviews_count","origin_evaluation_score","origin_arrivals_delay_index","origin_arrivals_delay_avg","origin_departures_delay_index","origin_departures_delay_avg","origin_arrivals_today_pct_delayed","origin_departures_today_pct_delayed","origin_arrivals_today_pct_canceled","origin_departures_today_pct_canceled","destination_iata","destination_icao","destination_name","destination_latitude","destination_longitude","destination_country","destination_country_code","destination_city","destination_timezone","destination_timezone_offset","destination_visible","destination_avg_rating","destination_total_ratings","destination_reviews_count","destination_evaluation_score","destination_arrivals_delay_index","destination_arrivals_delay_avg","destination_departures_delay_index","destination_departures_delay_avg","destination_arrivals_today_pct_delayed","destination_departures_today_pct_delayed","destination_arrivals_today_pct_canceled","destination_departures_today_pct_canceled","scheduled_departure","scheduled_arrival","real_departure","real_arrival","estimated_departure","estimated_arrival",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String origin_iata;
					String origin_icao;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.origin_iata == null) ? 0 : this.origin_iata.hashCode());
								
								result = prime * result + ((this.origin_icao == null) ? 0 : this.origin_icao.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.origin_iata == null) {
										if (other.origin_iata != null) 
											return false;
								
									} else if (!this.origin_iata.equals(other.origin_iata))
								 
										return false;
								
									if (this.origin_icao == null) {
										if (other.origin_icao != null) 
											return false;
								
									} else if (!this.origin_icao.equals(other.origin_icao))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:V+3mpkAXTqiCaWcbAwCqZVxWWRH2VGLOMXUWlKFcKDU=");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
        String properties_tDBInput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_1 == null || properties_tDBInput_1.trim().length() == 0) {
            properties_tDBInput_1 = "";
        }
        String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBInput_1;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `raw_flights`.`flight_number`, \n  `raw_flights`.`flight_alternative`, \n  `raw_flights`.`status_text`, \n  `raw"
+"_flights`.`status_live`, \n  `raw_flights`.`status_color`, \n  `raw_flights`.`aircraft_code`, \n  `raw_flights`.`aircraft_t"
+"ext`, \n  `raw_flights`.`aircraft_hex`, \n  `raw_flights`.`aircraft_registration`, \n  `raw_flights`.`airline_name`, \n  `ra"
+"w_flights`.`airline_iata`, \n  `raw_flights`.`airline_icao`, \n  `raw_flights`.`airline_short`, \n  `raw_flights`.`origin_i"
+"ata`, \n  `raw_flights`.`origin_icao`, \n  `raw_flights`.`origin_name`, \n  `raw_flights`.`origin_latitude`, \n  `raw_flight"
+"s`.`origin_longitude`, \n  `raw_flights`.`origin_country`, \n  `raw_flights`.`origin_country_code`, \n  `raw_flights`.`orig"
+"in_city`, \n  `raw_flights`.`origin_timezone`, \n  `raw_flights`.`origin_timezone_offset`, \n  `raw_flights`.`origin_avg_ra"
+"ting`, \n  `raw_flights`.`origin_total_ratings`, \n  `raw_flights`.`origin_reviews_count`, \n  `raw_flights`.`origin_evalua"
+"tion_score`, \n  `raw_flights`.`origin_arrivals_delay_index`, \n  `raw_flights`.`origin_arrivals_delay_avg`, \n  `raw_fligh"
+"ts`.`origin_departures_delay_index`, \n  `raw_flights`.`origin_departures_delay_avg`, \n  `raw_flights`.`origin_arrivals_t"
+"oday_pct_delayed`, \n  `raw_flights`.`origin_departures_today_pct_delayed`, \n  `raw_flights`.`origin_arrivals_today_pct_c"
+"anceled`, \n  `raw_flights`.`origin_departures_today_pct_canceled`, \n  `raw_flights`.`destination_iata`, \n  `raw_flights`"
+".`destination_icao`, \n  `raw_flights`.`destination_name`, \n  `raw_flights`.`destination_latitude`, \n  `raw_flights`.`des"
+"tination_longitude`, \n  `raw_flights`.`destination_country`, \n  `raw_flights`.`destination_country_code`, \n  `raw_flight"
+"s`.`destination_city`, \n  `raw_flights`.`destination_timezone`, \n  `raw_flights`.`destination_timezone_offset`, \n  `raw_"
+"flights`.`destination_visible`, \n  `raw_flights`.`destination_avg_rating`, \n  `raw_flights`.`destination_total_ratings`,"
+" \n  `raw_flights`.`destination_reviews_count`, \n  `raw_flights`.`destination_evaluation_score`, \n  `raw_flights`.`destin"
+"ation_arrivals_delay_index`, \n  `raw_flights`.`destination_arrivals_delay_avg`, \n  `raw_flights`.`destination_departures"
+"_delay_index`, \n  `raw_flights`.`destination_departures_delay_avg`, \n  `raw_flights`.`destination_arrivals_today_pct_del"
+"ayed`, \n  `raw_flights`.`destination_departures_today_pct_delayed`, \n  `raw_flights`.`destination_arrivals_today_pct_can"
+"celed`, \n  `raw_flights`.`destination_departures_today_pct_canceled`, \n  `raw_flights`.`scheduled_departure`, \n  `raw_fl"
+"ights`.`scheduled_arrival`, \n  `raw_flights`.`real_departure`, \n  `raw_flights`.`real_arrival`, \n  `raw_flights`.`estima"
+"ted_departure`, \n  `raw_flights`.`estimated_arrival`\nFROM `raw_flights`";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.flight_number = null;
							} else {
	                         		
        	row1.flight_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.flight_alternative = null;
							} else {
	                         		
        	row1.flight_alternative = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.status_text = null;
							} else {
	                         		
        	row1.status_text = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.status_live = null;
							} else {
	                         		
            row1.status_live = rs_tDBInput_1.getBoolean(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.status_live = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.status_color = null;
							} else {
	                         		
        	row1.status_color = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.aircraft_code = null;
							} else {
	                         		
        	row1.aircraft_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.aircraft_text = null;
							} else {
	                         		
        	row1.aircraft_text = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.aircraft_hex = null;
							} else {
	                         		
        	row1.aircraft_hex = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.aircraft_registration = null;
							} else {
	                         		
        	row1.aircraft_registration = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.airline_name = null;
							} else {
	                         		
        	row1.airline_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.airline_iata = null;
							} else {
	                         		
        	row1.airline_iata = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.airline_icao = null;
							} else {
	                         		
        	row1.airline_icao = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.airline_short = null;
							} else {
	                         		
        	row1.airline_short = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.origin_iata = null;
							} else {
	                         		
        	row1.origin_iata = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.origin_icao = null;
							} else {
	                         		
        	row1.origin_icao = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.origin_name = null;
							} else {
	                         		
        	row1.origin_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.origin_latitude = null;
							} else {
		                          
            row1.origin_latitude = rs_tDBInput_1.getBigDecimal(17);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.origin_longitude = null;
							} else {
		                          
            row1.origin_longitude = rs_tDBInput_1.getBigDecimal(18);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.origin_country = null;
							} else {
	                         		
        	row1.origin_country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.origin_country_code = null;
							} else {
	                         		
        	row1.origin_country_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.origin_city = null;
							} else {
	                         		
        	row1.origin_city = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.origin_timezone = null;
							} else {
	                         		
        	row1.origin_timezone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.origin_timezone_offset = null;
							} else {
		                          
            row1.origin_timezone_offset = rs_tDBInput_1.getInt(23);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_timezone_offset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.origin_avg_rating = null;
							} else {
		                          
            row1.origin_avg_rating = rs_tDBInput_1.getBigDecimal(24);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_avg_rating = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.origin_total_ratings = null;
							} else {
		                          
            row1.origin_total_ratings = rs_tDBInput_1.getInt(25);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_total_ratings = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.origin_reviews_count = null;
							} else {
		                          
            row1.origin_reviews_count = rs_tDBInput_1.getInt(26);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_reviews_count = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.origin_evaluation_score = null;
							} else {
		                          
            row1.origin_evaluation_score = rs_tDBInput_1.getInt(27);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_evaluation_score = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.origin_arrivals_delay_index = null;
							} else {
		                          
            row1.origin_arrivals_delay_index = rs_tDBInput_1.getBigDecimal(28);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_arrivals_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.origin_arrivals_delay_avg = null;
							} else {
		                          
            row1.origin_arrivals_delay_avg = rs_tDBInput_1.getInt(29);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_arrivals_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.origin_departures_delay_index = null;
							} else {
		                          
            row1.origin_departures_delay_index = rs_tDBInput_1.getBigDecimal(30);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_departures_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.origin_departures_delay_avg = null;
							} else {
		                          
            row1.origin_departures_delay_avg = rs_tDBInput_1.getInt(31);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_departures_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.origin_arrivals_today_pct_delayed = null;
							} else {
		                          
            row1.origin_arrivals_today_pct_delayed = rs_tDBInput_1.getBigDecimal(32);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_arrivals_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.origin_departures_today_pct_delayed = null;
							} else {
		                          
            row1.origin_departures_today_pct_delayed = rs_tDBInput_1.getBigDecimal(33);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_departures_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.origin_arrivals_today_pct_canceled = null;
							} else {
		                          
            row1.origin_arrivals_today_pct_canceled = rs_tDBInput_1.getBigDecimal(34);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_arrivals_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.origin_departures_today_pct_canceled = null;
							} else {
		                          
            row1.origin_departures_today_pct_canceled = rs_tDBInput_1.getBigDecimal(35);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_departures_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.destination_iata = null;
							} else {
	                         		
        	row1.destination_iata = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.destination_icao = null;
							} else {
	                         		
        	row1.destination_icao = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.destination_name = null;
							} else {
	                         		
        	row1.destination_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.destination_latitude = null;
							} else {
		                          
            row1.destination_latitude = rs_tDBInput_1.getBigDecimal(39);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.destination_longitude = null;
							} else {
		                          
            row1.destination_longitude = rs_tDBInput_1.getBigDecimal(40);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.destination_country = null;
							} else {
	                         		
        	row1.destination_country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.destination_country_code = null;
							} else {
	                         		
        	row1.destination_country_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.destination_city = null;
							} else {
	                         		
        	row1.destination_city = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.destination_timezone = null;
							} else {
	                         		
        	row1.destination_timezone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.destination_timezone_offset = null;
							} else {
		                          
            row1.destination_timezone_offset = rs_tDBInput_1.getInt(45);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_timezone_offset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.destination_visible = null;
							} else {
	                         		
            row1.destination_visible = rs_tDBInput_1.getBoolean(46);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_visible = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.destination_avg_rating = null;
							} else {
		                          
            row1.destination_avg_rating = rs_tDBInput_1.getBigDecimal(47);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_avg_rating = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.destination_total_ratings = null;
							} else {
		                          
            row1.destination_total_ratings = rs_tDBInput_1.getInt(48);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_total_ratings = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.destination_reviews_count = null;
							} else {
		                          
            row1.destination_reviews_count = rs_tDBInput_1.getInt(49);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_reviews_count = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.destination_evaluation_score = null;
							} else {
		                          
            row1.destination_evaluation_score = rs_tDBInput_1.getInt(50);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_evaluation_score = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.destination_arrivals_delay_index = null;
							} else {
		                          
            row1.destination_arrivals_delay_index = rs_tDBInput_1.getBigDecimal(51);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_arrivals_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.destination_arrivals_delay_avg = null;
							} else {
		                          
            row1.destination_arrivals_delay_avg = rs_tDBInput_1.getInt(52);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_arrivals_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.destination_departures_delay_index = null;
							} else {
		                          
            row1.destination_departures_delay_index = rs_tDBInput_1.getBigDecimal(53);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_departures_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.destination_departures_delay_avg = null;
							} else {
		                          
            row1.destination_departures_delay_avg = rs_tDBInput_1.getInt(54);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_departures_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.destination_arrivals_today_pct_delayed = null;
							} else {
		                          
            row1.destination_arrivals_today_pct_delayed = rs_tDBInput_1.getBigDecimal(55);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_arrivals_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.destination_departures_today_pct_delayed = null;
							} else {
		                          
            row1.destination_departures_today_pct_delayed = rs_tDBInput_1.getBigDecimal(56);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_departures_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.destination_arrivals_today_pct_canceled = null;
							} else {
		                          
            row1.destination_arrivals_today_pct_canceled = rs_tDBInput_1.getBigDecimal(57);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_arrivals_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.destination_departures_today_pct_canceled = null;
							} else {
		                          
            row1.destination_departures_today_pct_canceled = rs_tDBInput_1.getBigDecimal(58);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_departures_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.scheduled_departure = null;
							} else {
		                          
            row1.scheduled_departure = rs_tDBInput_1.getLong(59);
            if(rs_tDBInput_1.wasNull()){
                    row1.scheduled_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.scheduled_arrival = null;
							} else {
		                          
            row1.scheduled_arrival = rs_tDBInput_1.getLong(60);
            if(rs_tDBInput_1.wasNull()){
                    row1.scheduled_arrival = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.real_departure = null;
							} else {
		                          
            row1.real_departure = rs_tDBInput_1.getLong(61);
            if(rs_tDBInput_1.wasNull()){
                    row1.real_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.real_arrival = null;
							} else {
		                          
            row1.real_arrival = rs_tDBInput_1.getLong(62);
            if(rs_tDBInput_1.wasNull()){
                    row1.real_arrival = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.estimated_departure = null;
							} else {
		                          
            row1.estimated_departure = rs_tDBInput_1.getLong(63);
            if(rs_tDBInput_1.wasNull()){
                    row1.estimated_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.estimated_arrival = null;
							} else {
		                          
            row1.estimated_arrival = rs_tDBInput_1.getLong(64);
            if(rs_tDBInput_1.wasNull()){
                    row1.estimated_arrival = null;
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
row2 = null;			
if(row1.origin_iata == null){
	finder_tUniqRow_1.origin_iata = null;
}else{
	finder_tUniqRow_1.origin_iata = row1.origin_iata.toLowerCase();
}
if(row1.origin_icao == null){
	finder_tUniqRow_1.origin_icao = null;
}else{
	finder_tUniqRow_1.origin_icao = row1.origin_icao.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row1.origin_iata == null){
	new_tUniqRow_1.origin_iata = null;
}else{
	new_tUniqRow_1.origin_iata = row1.origin_iata.toLowerCase();
}
if(row1.origin_icao == null){
	new_tUniqRow_1.origin_icao = null;
}else{
	new_tUniqRow_1.origin_icao = row1.origin_icao.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.flight_number = row1.flight_number;			row2.flight_alternative = row1.flight_alternative;			row2.status_text = row1.status_text;			row2.status_live = row1.status_live;			row2.status_color = row1.status_color;			row2.aircraft_code = row1.aircraft_code;			row2.aircraft_text = row1.aircraft_text;			row2.aircraft_hex = row1.aircraft_hex;			row2.aircraft_registration = row1.aircraft_registration;			row2.airline_name = row1.airline_name;			row2.airline_iata = row1.airline_iata;			row2.airline_icao = row1.airline_icao;			row2.airline_short = row1.airline_short;			row2.origin_iata = row1.origin_iata;			row2.origin_icao = row1.origin_icao;			row2.origin_name = row1.origin_name;			row2.origin_latitude = row1.origin_latitude;			row2.origin_longitude = row1.origin_longitude;			row2.origin_country = row1.origin_country;			row2.origin_country_code = row1.origin_country_code;			row2.origin_city = row1.origin_city;			row2.origin_timezone = row1.origin_timezone;			row2.origin_timezone_offset = row1.origin_timezone_offset;			row2.origin_avg_rating = row1.origin_avg_rating;			row2.origin_total_ratings = row1.origin_total_ratings;			row2.origin_reviews_count = row1.origin_reviews_count;			row2.origin_evaluation_score = row1.origin_evaluation_score;			row2.origin_arrivals_delay_index = row1.origin_arrivals_delay_index;			row2.origin_arrivals_delay_avg = row1.origin_arrivals_delay_avg;			row2.origin_departures_delay_index = row1.origin_departures_delay_index;			row2.origin_departures_delay_avg = row1.origin_departures_delay_avg;			row2.origin_arrivals_today_pct_delayed = row1.origin_arrivals_today_pct_delayed;			row2.origin_departures_today_pct_delayed = row1.origin_departures_today_pct_delayed;			row2.origin_arrivals_today_pct_canceled = row1.origin_arrivals_today_pct_canceled;			row2.origin_departures_today_pct_canceled = row1.origin_departures_today_pct_canceled;			row2.destination_iata = row1.destination_iata;			row2.destination_icao = row1.destination_icao;			row2.destination_name = row1.destination_name;			row2.destination_latitude = row1.destination_latitude;			row2.destination_longitude = row1.destination_longitude;			row2.destination_country = row1.destination_country;			row2.destination_country_code = row1.destination_country_code;			row2.destination_city = row1.destination_city;			row2.destination_timezone = row1.destination_timezone;			row2.destination_timezone_offset = row1.destination_timezone_offset;			row2.destination_visible = row1.destination_visible;			row2.destination_avg_rating = row1.destination_avg_rating;			row2.destination_total_ratings = row1.destination_total_ratings;			row2.destination_reviews_count = row1.destination_reviews_count;			row2.destination_evaluation_score = row1.destination_evaluation_score;			row2.destination_arrivals_delay_index = row1.destination_arrivals_delay_index;			row2.destination_arrivals_delay_avg = row1.destination_arrivals_delay_avg;			row2.destination_departures_delay_index = row1.destination_departures_delay_index;			row2.destination_departures_delay_avg = row1.destination_departures_delay_avg;			row2.destination_arrivals_today_pct_delayed = row1.destination_arrivals_today_pct_delayed;			row2.destination_departures_today_pct_delayed = row1.destination_departures_today_pct_delayed;			row2.destination_arrivals_today_pct_canceled = row1.destination_arrivals_today_pct_canceled;			row2.destination_departures_today_pct_canceled = row1.destination_departures_today_pct_canceled;			row2.scheduled_departure = row1.scheduled_departure;			row2.scheduled_arrival = row1.scheduled_arrival;			row2.real_departure = row1.real_departure;			row2.real_arrival = row1.real_arrival;			row2.estimated_departure = row1.estimated_departure;			row2.estimated_arrival = row1.estimated_arrival;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[64];
   				
	    		if(row2.flight_number != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row2.flight_number)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.flight_alternative != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row2.flight_alternative)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.status_text != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row2.status_text)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.status_live != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row2.status_live)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.status_color != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(row2.status_color)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.aircraft_code != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(row2.aircraft_code)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.aircraft_text != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row2.aircraft_text)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.aircraft_hex != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row2.aircraft_hex)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.aircraft_registration != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(row2.aircraft_registration)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.airline_name != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row2.airline_name)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.airline_iata != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(row2.airline_iata)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.airline_icao != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(row2.airline_icao)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.airline_short != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(row2.airline_short)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_iata != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(row2.origin_iata)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_icao != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(row2.origin_icao)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_name != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(row2.origin_name)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_latitude != null) { //              
                 row_tLogRow_1[16]=    						
								row2.origin_latitude.setScale(7, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_longitude != null) { //              
                 row_tLogRow_1[17]=    						
								row2.origin_longitude.setScale(7, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_country != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(row2.origin_country)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_country_code != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(row2.origin_country_code)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_city != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(row2.origin_city)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_timezone != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(row2.origin_timezone)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_timezone_offset != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(row2.origin_timezone_offset)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_avg_rating != null) { //              
                 row_tLogRow_1[23]=    						
								row2.origin_avg_rating.toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_total_ratings != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(row2.origin_total_ratings)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_reviews_count != null) { //              
                 row_tLogRow_1[25]=    						    
				                String.valueOf(row2.origin_reviews_count)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_evaluation_score != null) { //              
                 row_tLogRow_1[26]=    						    
				                String.valueOf(row2.origin_evaluation_score)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_arrivals_delay_index != null) { //              
                 row_tLogRow_1[27]=    						
								row2.origin_arrivals_delay_index.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_arrivals_delay_avg != null) { //              
                 row_tLogRow_1[28]=    						    
				                String.valueOf(row2.origin_arrivals_delay_avg)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_departures_delay_index != null) { //              
                 row_tLogRow_1[29]=    						
								row2.origin_departures_delay_index.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_departures_delay_avg != null) { //              
                 row_tLogRow_1[30]=    						    
				                String.valueOf(row2.origin_departures_delay_avg)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_arrivals_today_pct_delayed != null) { //              
                 row_tLogRow_1[31]=    						
								row2.origin_arrivals_today_pct_delayed.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_departures_today_pct_delayed != null) { //              
                 row_tLogRow_1[32]=    						
								row2.origin_departures_today_pct_delayed.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_arrivals_today_pct_canceled != null) { //              
                 row_tLogRow_1[33]=    						
								row2.origin_arrivals_today_pct_canceled.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.origin_departures_today_pct_canceled != null) { //              
                 row_tLogRow_1[34]=    						
								row2.origin_departures_today_pct_canceled.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_iata != null) { //              
                 row_tLogRow_1[35]=    						    
				                String.valueOf(row2.destination_iata)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_icao != null) { //              
                 row_tLogRow_1[36]=    						    
				                String.valueOf(row2.destination_icao)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_name != null) { //              
                 row_tLogRow_1[37]=    						    
				                String.valueOf(row2.destination_name)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_latitude != null) { //              
                 row_tLogRow_1[38]=    						
								row2.destination_latitude.setScale(7, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_longitude != null) { //              
                 row_tLogRow_1[39]=    						
								row2.destination_longitude.setScale(7, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_country != null) { //              
                 row_tLogRow_1[40]=    						    
				                String.valueOf(row2.destination_country)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_country_code != null) { //              
                 row_tLogRow_1[41]=    						    
				                String.valueOf(row2.destination_country_code)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_city != null) { //              
                 row_tLogRow_1[42]=    						    
				                String.valueOf(row2.destination_city)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_timezone != null) { //              
                 row_tLogRow_1[43]=    						    
				                String.valueOf(row2.destination_timezone)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_timezone_offset != null) { //              
                 row_tLogRow_1[44]=    						    
				                String.valueOf(row2.destination_timezone_offset)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_visible != null) { //              
                 row_tLogRow_1[45]=    						    
				                String.valueOf(row2.destination_visible)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_avg_rating != null) { //              
                 row_tLogRow_1[46]=    						
								row2.destination_avg_rating.toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_total_ratings != null) { //              
                 row_tLogRow_1[47]=    						    
				                String.valueOf(row2.destination_total_ratings)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_reviews_count != null) { //              
                 row_tLogRow_1[48]=    						    
				                String.valueOf(row2.destination_reviews_count)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_evaluation_score != null) { //              
                 row_tLogRow_1[49]=    						    
				                String.valueOf(row2.destination_evaluation_score)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_arrivals_delay_index != null) { //              
                 row_tLogRow_1[50]=    						
								row2.destination_arrivals_delay_index.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_arrivals_delay_avg != null) { //              
                 row_tLogRow_1[51]=    						    
				                String.valueOf(row2.destination_arrivals_delay_avg)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_departures_delay_index != null) { //              
                 row_tLogRow_1[52]=    						
								row2.destination_departures_delay_index.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_departures_delay_avg != null) { //              
                 row_tLogRow_1[53]=    						    
				                String.valueOf(row2.destination_departures_delay_avg)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_arrivals_today_pct_delayed != null) { //              
                 row_tLogRow_1[54]=    						
								row2.destination_arrivals_today_pct_delayed.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_departures_today_pct_delayed != null) { //              
                 row_tLogRow_1[55]=    						
								row2.destination_departures_today_pct_delayed.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_arrivals_today_pct_canceled != null) { //              
                 row_tLogRow_1[56]=    						
								row2.destination_arrivals_today_pct_canceled.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.destination_departures_today_pct_canceled != null) { //              
                 row_tLogRow_1[57]=    						
								row2.destination_departures_today_pct_canceled.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(row2.scheduled_departure != null) { //              
                 row_tLogRow_1[58]=    						    
				                String.valueOf(row2.scheduled_departure)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.scheduled_arrival != null) { //              
                 row_tLogRow_1[59]=    						    
				                String.valueOf(row2.scheduled_arrival)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.real_departure != null) { //              
                 row_tLogRow_1[60]=    						    
				                String.valueOf(row2.real_departure)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.real_arrival != null) { //              
                 row_tLogRow_1[61]=    						    
				                String.valueOf(row2.real_arrival)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.estimated_departure != null) { //              
                 row_tLogRow_1[62]=    						    
				                String.valueOf(row2.estimated_departure)			
					          ;	
							
	    		} //			
    			   				
	    		if(row2.estimated_arrival != null) { //              
                 row_tLogRow_1[63]=    						    
				                String.valueOf(row2.estimated_arrival)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row4 = row2;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row10HashKey.destination_iata = row4.origin_iata ;
                        		    		
                        		    		    row10HashKey.destination_icao = row4.origin_icao;
                        		    		
                        		    		    row10HashKey.destination_name = row4.origin_name;
                        		    		
                        		    		    row10HashKey.destination_latitude = row4.origin_latitude;
                        		    		
                        		    		    row10HashKey.destination_longitude = row4.origin_longitude;
                        		    		
                        		    		    row10HashKey.destination_country = row4.origin_country;
                        		    		
                        		    		    row10HashKey.destination_country_code = row4.origin_country_code;
                        		    		
                        		    		    row10HashKey.destination_city = row4.origin_city;
                        		    		
                        		    		    row10HashKey.destination_timezone = row4.origin_timezone;
                        		    		
                        		    		    row10HashKey.destination_timezone_offset = row4.origin_timezone_offset;
                        		    		
                        		    		    row10HashKey.destination_avg_rating = row4.origin_avg_rating;
                        		    		
                        		    		    row10HashKey.destination_total_ratings = row4.origin_total_ratings;
                        		    		
                        		    		    row10HashKey.destination_reviews_count = row4.origin_reviews_count;
                        		    		
                        		    		    row10HashKey.destination_evaluation_score = row4.origin_evaluation_score;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.destination_iata = '" + row10HashKey.destination_iata + "', row10.destination_icao = '" + row10HashKey.destination_icao + "', row10.destination_name = '" + row10HashKey.destination_name + "', row10.destination_latitude = '" + row10HashKey.destination_latitude + "', row10.destination_longitude = '" + row10HashKey.destination_longitude + "', row10.destination_country = '" + row10HashKey.destination_country + "', row10.destination_country_code = '" + row10HashKey.destination_country_code + "', row10.destination_city = '" + row10HashKey.destination_city + "', row10.destination_timezone = '" + row10HashKey.destination_timezone + "', row10.destination_timezone_offset = '" + row10HashKey.destination_timezone_offset + "', row10.destination_avg_rating = '" + row10HashKey.destination_avg_rating + "', row10.destination_total_ratings = '" + row10HashKey.destination_total_ratings + "', row10.destination_reviews_count = '" + row10HashKey.destination_reviews_count + "', row10.destination_evaluation_score = '" + row10HashKey.destination_evaluation_score + "'");
								} // G 071
							

							row10Struct row10 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

origin_airports = null;


// # Output table : 'origin_airports'
// # Filter conditions 
if( 

row10.destination_iata == null ||  row10.destination_icao == null  ||
row10.destination_avg_rating == null ||  row10.destination_total_ratings == null  ||
row10.destination_reviews_count == null ||  row10.destination_evaluation_score == null  

 ) {
origin_airports_tmp.airport_iata = row4.origin_iata  ;
origin_airports_tmp.airport_icao = row4.origin_icao  ;
origin_airports_tmp.airport_name = row4.origin_name  ;
origin_airports_tmp.latitude = row4.origin_latitude  ;
origin_airports_tmp.longitude = row4.origin_longitude  ;
origin_airports_tmp.country = row4.origin_country  ;
origin_airports_tmp.country_code = row4.origin_country_code  ;
origin_airports_tmp.city = row4.origin_city  ;
origin_airports_tmp.timezone = row4.origin_timezone  ;
origin_airports_tmp.timezone_offset = row4.origin_timezone_offset  ;
origin_airports_tmp.avg_rating = row4.origin_avg_rating  ;
origin_airports_tmp.total_ratings = row4.origin_total_ratings  ;
origin_airports_tmp.reviews_count = row4.origin_reviews_count  ;
origin_airports_tmp.evaluation_score = row4.origin_evaluation_score  ;
origin_airports = origin_airports_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "origin_airports"
if(origin_airports != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"origin_airports"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[14];
   				
	    		if(origin_airports.airport_iata != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(origin_airports.airport_iata)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.airport_icao != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(origin_airports.airport_icao)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.airport_name != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(origin_airports.airport_name)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.latitude != null) { //              
                 row_tLogRow_2[3]=    						
								origin_airports.latitude.setScale(7, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.longitude != null) { //              
                 row_tLogRow_2[4]=    						
								origin_airports.longitude.setScale(7, java.math.RoundingMode.HALF_UP).toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.country != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(origin_airports.country)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.country_code != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(origin_airports.country_code)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.city != null) { //              
                 row_tLogRow_2[7]=    						    
				                String.valueOf(origin_airports.city)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.timezone != null) { //              
                 row_tLogRow_2[8]=    						    
				                String.valueOf(origin_airports.timezone)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.timezone_offset != null) { //              
                 row_tLogRow_2[9]=    						    
				                String.valueOf(origin_airports.timezone_offset)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.avg_rating != null) { //              
                 row_tLogRow_2[10]=    						
								origin_airports.avg_rating.toPlainString()
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.total_ratings != null) { //              
                 row_tLogRow_2[11]=    						    
				                String.valueOf(origin_airports.total_ratings)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.reviews_count != null) { //              
                 row_tLogRow_2[12]=    						    
				                String.valueOf(origin_airports.reviews_count)			
					          ;	
							
	    		} //			
    			   				
	    		if(origin_airports.evaluation_score != null) { //              
                 row_tLogRow_2[13]=    						    
				                String.valueOf(origin_airports.evaluation_score)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row6 = origin_airports;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
            int updateFlag_tDBOutput_1=0;
                    if(row6.airport_icao == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, row6.airport_icao);
}

                    if(row6.airport_name == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, row6.airport_name);
}

                    pstmtUpdate_tDBOutput_1.setBigDecimal(3, row6.latitude);

                    pstmtUpdate_tDBOutput_1.setBigDecimal(4, row6.longitude);

                    if(row6.country == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, row6.country);
}

                    if(row6.country_code == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, row6.country_code);
}

                    if(row6.city == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, row6.city);
}

                    if(row6.timezone == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(8, row6.timezone);
}

                    if(row6.timezone_offset == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(9, row6.timezone_offset);
}

                    pstmtUpdate_tDBOutput_1.setBigDecimal(10, row6.avg_rating);

                    if(row6.total_ratings == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(11, row6.total_ratings);
}

                    if(row6.reviews_count == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(12, row6.reviews_count);
}

                    if(row6.evaluation_score == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(13, row6.evaluation_score);
}


                    if(row6.airport_iata == null) {
pstmtUpdate_tDBOutput_1.setNull(14 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(14 + count_tDBOutput_1, row6.airport_iata);
}


            try {
                updateFlag_tDBOutput_1=pstmtUpdate_tDBOutput_1.executeUpdate();
                updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1+updateFlag_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += updateFlag_tDBOutput_1;

            if(updateFlag_tDBOutput_1 == 0) {

                        if(row6.airport_iata == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, row6.airport_iata);
}

                        if(row6.airport_icao == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, row6.airport_icao);
}

                        if(row6.airport_name == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, row6.airport_name);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(4, row6.latitude);

                        pstmtInsert_tDBOutput_1.setBigDecimal(5, row6.longitude);

                        if(row6.country == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, row6.country);
}

                        if(row6.country_code == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, row6.country_code);
}

                        if(row6.city == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(8, row6.city);
}

                        if(row6.timezone == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(9, row6.timezone);
}

                        if(row6.timezone_offset == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(10, row6.timezone_offset);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(11, row6.avg_rating);

                        if(row6.total_ratings == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(12, row6.total_ratings);
}

                        if(row6.reviews_count == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(13, row6.reviews_count);
}

                        if(row6.evaluation_score == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(14, row6.evaluation_score);
}

                    int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                    insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
                }else{
                    nb_line_tDBOutput_1++;
             }
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    whetherReject_tDBOutput_1 = true;
                        throw(e);
                }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                        rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "origin_airports"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"origin_airports");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
    	}
    	conn_tDBOutput_1.commit();
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
			rowsToCommitCount_tDBOutput_1 = 0;
    	}
		commitCounter_tDBOutput_1 = 0;
    	
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String status_text;

				public String getStatus_text () {
					return this.status_text;
				}
				
			    public Boolean status_live;

				public Boolean getStatus_live () {
					return this.status_live;
				}
				
			    public String status_color;

				public String getStatus_color () {
					return this.status_color;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public String origin_iata;

				public String getOrigin_iata () {
					return this.origin_iata;
				}
				
			    public String origin_icao;

				public String getOrigin_icao () {
					return this.origin_icao;
				}
				
			    public String origin_name;

				public String getOrigin_name () {
					return this.origin_name;
				}
				
			    public BigDecimal origin_latitude;

				public BigDecimal getOrigin_latitude () {
					return this.origin_latitude;
				}
				
			    public BigDecimal origin_longitude;

				public BigDecimal getOrigin_longitude () {
					return this.origin_longitude;
				}
				
			    public String origin_country;

				public String getOrigin_country () {
					return this.origin_country;
				}
				
			    public String origin_country_code;

				public String getOrigin_country_code () {
					return this.origin_country_code;
				}
				
			    public String origin_city;

				public String getOrigin_city () {
					return this.origin_city;
				}
				
			    public String origin_timezone;

				public String getOrigin_timezone () {
					return this.origin_timezone;
				}
				
			    public Integer origin_timezone_offset;

				public Integer getOrigin_timezone_offset () {
					return this.origin_timezone_offset;
				}
				
			    public BigDecimal origin_avg_rating;

				public BigDecimal getOrigin_avg_rating () {
					return this.origin_avg_rating;
				}
				
			    public Integer origin_total_ratings;

				public Integer getOrigin_total_ratings () {
					return this.origin_total_ratings;
				}
				
			    public Integer origin_reviews_count;

				public Integer getOrigin_reviews_count () {
					return this.origin_reviews_count;
				}
				
			    public Integer origin_evaluation_score;

				public Integer getOrigin_evaluation_score () {
					return this.origin_evaluation_score;
				}
				
			    public BigDecimal origin_arrivals_delay_index;

				public BigDecimal getOrigin_arrivals_delay_index () {
					return this.origin_arrivals_delay_index;
				}
				
			    public Integer origin_arrivals_delay_avg;

				public Integer getOrigin_arrivals_delay_avg () {
					return this.origin_arrivals_delay_avg;
				}
				
			    public BigDecimal origin_departures_delay_index;

				public BigDecimal getOrigin_departures_delay_index () {
					return this.origin_departures_delay_index;
				}
				
			    public Integer origin_departures_delay_avg;

				public Integer getOrigin_departures_delay_avg () {
					return this.origin_departures_delay_avg;
				}
				
			    public BigDecimal origin_arrivals_today_pct_delayed;

				public BigDecimal getOrigin_arrivals_today_pct_delayed () {
					return this.origin_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal origin_departures_today_pct_delayed;

				public BigDecimal getOrigin_departures_today_pct_delayed () {
					return this.origin_departures_today_pct_delayed;
				}
				
			    public BigDecimal origin_arrivals_today_pct_canceled;

				public BigDecimal getOrigin_arrivals_today_pct_canceled () {
					return this.origin_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal origin_departures_today_pct_canceled;

				public BigDecimal getOrigin_departures_today_pct_canceled () {
					return this.origin_departures_today_pct_canceled;
				}
				
			    public String destination_iata;

				public String getDestination_iata () {
					return this.destination_iata;
				}
				
			    public String destination_icao;

				public String getDestination_icao () {
					return this.destination_icao;
				}
				
			    public String destination_name;

				public String getDestination_name () {
					return this.destination_name;
				}
				
			    public BigDecimal destination_latitude;

				public BigDecimal getDestination_latitude () {
					return this.destination_latitude;
				}
				
			    public BigDecimal destination_longitude;

				public BigDecimal getDestination_longitude () {
					return this.destination_longitude;
				}
				
			    public String destination_country;

				public String getDestination_country () {
					return this.destination_country;
				}
				
			    public String destination_country_code;

				public String getDestination_country_code () {
					return this.destination_country_code;
				}
				
			    public String destination_city;

				public String getDestination_city () {
					return this.destination_city;
				}
				
			    public String destination_timezone;

				public String getDestination_timezone () {
					return this.destination_timezone;
				}
				
			    public Integer destination_timezone_offset;

				public Integer getDestination_timezone_offset () {
					return this.destination_timezone_offset;
				}
				
			    public Boolean destination_visible;

				public Boolean getDestination_visible () {
					return this.destination_visible;
				}
				
			    public BigDecimal destination_avg_rating;

				public BigDecimal getDestination_avg_rating () {
					return this.destination_avg_rating;
				}
				
			    public Integer destination_total_ratings;

				public Integer getDestination_total_ratings () {
					return this.destination_total_ratings;
				}
				
			    public Integer destination_reviews_count;

				public Integer getDestination_reviews_count () {
					return this.destination_reviews_count;
				}
				
			    public Integer destination_evaluation_score;

				public Integer getDestination_evaluation_score () {
					return this.destination_evaluation_score;
				}
				
			    public BigDecimal destination_arrivals_delay_index;

				public BigDecimal getDestination_arrivals_delay_index () {
					return this.destination_arrivals_delay_index;
				}
				
			    public Integer destination_arrivals_delay_avg;

				public Integer getDestination_arrivals_delay_avg () {
					return this.destination_arrivals_delay_avg;
				}
				
			    public BigDecimal destination_departures_delay_index;

				public BigDecimal getDestination_departures_delay_index () {
					return this.destination_departures_delay_index;
				}
				
			    public Integer destination_departures_delay_avg;

				public Integer getDestination_departures_delay_avg () {
					return this.destination_departures_delay_avg;
				}
				
			    public BigDecimal destination_arrivals_today_pct_delayed;

				public BigDecimal getDestination_arrivals_today_pct_delayed () {
					return this.destination_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal destination_departures_today_pct_delayed;

				public BigDecimal getDestination_departures_today_pct_delayed () {
					return this.destination_departures_today_pct_delayed;
				}
				
			    public BigDecimal destination_arrivals_today_pct_canceled;

				public BigDecimal getDestination_arrivals_today_pct_canceled () {
					return this.destination_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal destination_departures_today_pct_canceled;

				public BigDecimal getDestination_departures_today_pct_canceled () {
					return this.destination_departures_today_pct_canceled;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.destination_iata == null) ? 0 : this.destination_iata.hashCode());
					
						result = prime * result + ((this.destination_icao == null) ? 0 : this.destination_icao.hashCode());
					
						result = prime * result + ((this.destination_name == null) ? 0 : this.destination_name.hashCode());
					
						result = prime * result + ((this.destination_latitude == null) ? 0 : new Double(this.destination_latitude.doubleValue()).hashCode());
						
						result = prime * result + ((this.destination_longitude == null) ? 0 : new Double(this.destination_longitude.doubleValue()).hashCode());
						
						result = prime * result + ((this.destination_country == null) ? 0 : this.destination_country.hashCode());
					
						result = prime * result + ((this.destination_country_code == null) ? 0 : this.destination_country_code.hashCode());
					
						result = prime * result + ((this.destination_city == null) ? 0 : this.destination_city.hashCode());
					
						result = prime * result + ((this.destination_timezone == null) ? 0 : this.destination_timezone.hashCode());
					
						result = prime * result + ((this.destination_timezone_offset == null) ? 0 : this.destination_timezone_offset.hashCode());
					
						result = prime * result + ((this.destination_avg_rating == null) ? 0 : new Double(this.destination_avg_rating.doubleValue()).hashCode());
						
						result = prime * result + ((this.destination_total_ratings == null) ? 0 : this.destination_total_ratings.hashCode());
					
						result = prime * result + ((this.destination_reviews_count == null) ? 0 : this.destination_reviews_count.hashCode());
					
						result = prime * result + ((this.destination_evaluation_score == null) ? 0 : this.destination_evaluation_score.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.destination_iata == null) {
							if (other.destination_iata != null)
								return false;
						
						} else if (!this.destination_iata.equals(other.destination_iata))
						
							return false;
					
						if (this.destination_icao == null) {
							if (other.destination_icao != null)
								return false;
						
						} else if (!this.destination_icao.equals(other.destination_icao))
						
							return false;
					
						if (this.destination_name == null) {
							if (other.destination_name != null)
								return false;
						
						} else if (!this.destination_name.equals(other.destination_name))
						
							return false;
					
						if (this.destination_latitude == null) {
							if (other.destination_latitude != null)
								return false;
						
						} else if ((other.destination_latitude == null) || (this.destination_latitude.compareTo(other.destination_latitude)!=0))
						
							return false;
					
						if (this.destination_longitude == null) {
							if (other.destination_longitude != null)
								return false;
						
						} else if ((other.destination_longitude == null) || (this.destination_longitude.compareTo(other.destination_longitude)!=0))
						
							return false;
					
						if (this.destination_country == null) {
							if (other.destination_country != null)
								return false;
						
						} else if (!this.destination_country.equals(other.destination_country))
						
							return false;
					
						if (this.destination_country_code == null) {
							if (other.destination_country_code != null)
								return false;
						
						} else if (!this.destination_country_code.equals(other.destination_country_code))
						
							return false;
					
						if (this.destination_city == null) {
							if (other.destination_city != null)
								return false;
						
						} else if (!this.destination_city.equals(other.destination_city))
						
							return false;
					
						if (this.destination_timezone == null) {
							if (other.destination_timezone != null)
								return false;
						
						} else if (!this.destination_timezone.equals(other.destination_timezone))
						
							return false;
					
						if (this.destination_timezone_offset == null) {
							if (other.destination_timezone_offset != null)
								return false;
						
						} else if (!this.destination_timezone_offset.equals(other.destination_timezone_offset))
						
							return false;
					
						if (this.destination_avg_rating == null) {
							if (other.destination_avg_rating != null)
								return false;
						
						} else if ((other.destination_avg_rating == null) || (this.destination_avg_rating.compareTo(other.destination_avg_rating)!=0))
						
							return false;
					
						if (this.destination_total_ratings == null) {
							if (other.destination_total_ratings != null)
								return false;
						
						} else if (!this.destination_total_ratings.equals(other.destination_total_ratings))
						
							return false;
					
						if (this.destination_reviews_count == null) {
							if (other.destination_reviews_count != null)
								return false;
						
						} else if (!this.destination_reviews_count.equals(other.destination_reviews_count))
						
							return false;
					
						if (this.destination_evaluation_score == null) {
							if (other.destination_evaluation_score != null)
								return false;
						
						} else if (!this.destination_evaluation_score.equals(other.destination_evaluation_score))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.flight_number = this.flight_number;
	            other.flight_alternative = this.flight_alternative;
	            other.status_text = this.status_text;
	            other.status_live = this.status_live;
	            other.status_color = this.status_color;
	            other.aircraft_code = this.aircraft_code;
	            other.aircraft_text = this.aircraft_text;
	            other.aircraft_hex = this.aircraft_hex;
	            other.aircraft_registration = this.aircraft_registration;
	            other.airline_name = this.airline_name;
	            other.airline_iata = this.airline_iata;
	            other.airline_icao = this.airline_icao;
	            other.airline_short = this.airline_short;
	            other.origin_iata = this.origin_iata;
	            other.origin_icao = this.origin_icao;
	            other.origin_name = this.origin_name;
	            other.origin_latitude = this.origin_latitude;
	            other.origin_longitude = this.origin_longitude;
	            other.origin_country = this.origin_country;
	            other.origin_country_code = this.origin_country_code;
	            other.origin_city = this.origin_city;
	            other.origin_timezone = this.origin_timezone;
	            other.origin_timezone_offset = this.origin_timezone_offset;
	            other.origin_avg_rating = this.origin_avg_rating;
	            other.origin_total_ratings = this.origin_total_ratings;
	            other.origin_reviews_count = this.origin_reviews_count;
	            other.origin_evaluation_score = this.origin_evaluation_score;
	            other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
	            other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
	            other.origin_departures_delay_index = this.origin_departures_delay_index;
	            other.origin_departures_delay_avg = this.origin_departures_delay_avg;
	            other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
	            other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
	            other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
	            other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
	            other.destination_iata = this.destination_iata;
	            other.destination_icao = this.destination_icao;
	            other.destination_name = this.destination_name;
	            other.destination_latitude = this.destination_latitude;
	            other.destination_longitude = this.destination_longitude;
	            other.destination_country = this.destination_country;
	            other.destination_country_code = this.destination_country_code;
	            other.destination_city = this.destination_city;
	            other.destination_timezone = this.destination_timezone;
	            other.destination_timezone_offset = this.destination_timezone_offset;
	            other.destination_visible = this.destination_visible;
	            other.destination_avg_rating = this.destination_avg_rating;
	            other.destination_total_ratings = this.destination_total_ratings;
	            other.destination_reviews_count = this.destination_reviews_count;
	            other.destination_evaluation_score = this.destination_evaluation_score;
	            other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
	            other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
	            other.destination_departures_delay_index = this.destination_departures_delay_index;
	            other.destination_departures_delay_avg = this.destination_departures_delay_avg;
	            other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
	            other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
	            other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
	            other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
	            other.scheduled_departure = this.scheduled_departure;
	            other.scheduled_arrival = this.scheduled_arrival;
	            other.real_departure = this.real_departure;
	            other.real_arrival = this.real_arrival;
	            other.estimated_departure = this.estimated_departure;
	            other.estimated_arrival = this.estimated_arrival;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.destination_iata = this.destination_iata;
	            	other.destination_icao = this.destination_icao;
	            	other.destination_name = this.destination_name;
	            	other.destination_latitude = this.destination_latitude;
	            	other.destination_longitude = this.destination_longitude;
	            	other.destination_country = this.destination_country;
	            	other.destination_country_code = this.destination_country_code;
	            	other.destination_city = this.destination_city;
	            	other.destination_timezone = this.destination_timezone;
	            	other.destination_timezone_offset = this.destination_timezone_offset;
	            	other.destination_avg_rating = this.destination_avg_rating;
	            	other.destination_total_ratings = this.destination_total_ratings;
	            	other.destination_reviews_count = this.destination_reviews_count;
	            	other.destination_evaluation_score = this.destination_evaluation_score;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.flight_number = readString(dis,ois);
					
						this.flight_alternative = readString(dis,ois);
					
						this.status_text = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
						this.status_color = readString(dis,ois);
					
						this.aircraft_code = readString(dis,ois);
					
						this.aircraft_text = readString(dis,ois);
					
						this.aircraft_hex = readString(dis,ois);
					
						this.aircraft_registration = readString(dis,ois);
					
						this.airline_name = readString(dis,ois);
					
						this.airline_iata = readString(dis,ois);
					
						this.airline_icao = readString(dis,ois);
					
						this.airline_short = readString(dis,ois);
					
						this.origin_iata = readString(dis,ois);
					
						this.origin_icao = readString(dis,ois);
					
						this.origin_name = readString(dis,ois);
					
       			    	this.origin_latitude = (BigDecimal) ois.readObject();
					
       			    	this.origin_longitude = (BigDecimal) ois.readObject();
					
						this.origin_country = readString(dis,ois);
					
						this.origin_country_code = readString(dis,ois);
					
						this.origin_city = readString(dis,ois);
					
						this.origin_timezone = readString(dis,ois);
					
						this.origin_timezone_offset = readInteger(dis,ois);
					
       			    	this.origin_avg_rating = (BigDecimal) ois.readObject();
					
						this.origin_total_ratings = readInteger(dis,ois);
					
						this.origin_reviews_count = readInteger(dis,ois);
					
						this.origin_evaluation_score = readInteger(dis,ois);
					
       			    	this.origin_arrivals_delay_index = (BigDecimal) ois.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis,ois);
					
       			    	this.origin_departures_delay_index = (BigDecimal) ois.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis,ois);
					
       			    	this.origin_arrivals_today_pct_delayed = (BigDecimal) ois.readObject();
					
       			    	this.origin_departures_today_pct_delayed = (BigDecimal) ois.readObject();
					
       			    	this.origin_arrivals_today_pct_canceled = (BigDecimal) ois.readObject();
					
       			    	this.origin_departures_today_pct_canceled = (BigDecimal) ois.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
       			    	this.destination_arrivals_delay_index = (BigDecimal) ois.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis,ois);
					
       			    	this.destination_departures_delay_index = (BigDecimal) ois.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis,ois);
					
       			    	this.destination_arrivals_today_pct_delayed = (BigDecimal) ois.readObject();
					
       			    	this.destination_departures_today_pct_delayed = (BigDecimal) ois.readObject();
					
       			    	this.destination_arrivals_today_pct_canceled = (BigDecimal) ois.readObject();
					
       			    	this.destination_departures_today_pct_canceled = (BigDecimal) ois.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.flight_number = readString(dis,objectIn);
					
						this.flight_alternative = readString(dis,objectIn);
					
						this.status_text = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = objectIn.readBoolean();
           				}
					
						this.status_color = readString(dis,objectIn);
					
						this.aircraft_code = readString(dis,objectIn);
					
						this.aircraft_text = readString(dis,objectIn);
					
						this.aircraft_hex = readString(dis,objectIn);
					
						this.aircraft_registration = readString(dis,objectIn);
					
						this.airline_name = readString(dis,objectIn);
					
						this.airline_iata = readString(dis,objectIn);
					
						this.airline_icao = readString(dis,objectIn);
					
						this.airline_short = readString(dis,objectIn);
					
						this.origin_iata = readString(dis,objectIn);
					
						this.origin_icao = readString(dis,objectIn);
					
						this.origin_name = readString(dis,objectIn);
					
       			    	this.origin_latitude = (BigDecimal) objectIn.readObject();
					
       			    	this.origin_longitude = (BigDecimal) objectIn.readObject();
					
						this.origin_country = readString(dis,objectIn);
					
						this.origin_country_code = readString(dis,objectIn);
					
						this.origin_city = readString(dis,objectIn);
					
						this.origin_timezone = readString(dis,objectIn);
					
						this.origin_timezone_offset = readInteger(dis,objectIn);
					
       			    	this.origin_avg_rating = (BigDecimal) objectIn.readObject();
					
						this.origin_total_ratings = readInteger(dis,objectIn);
					
						this.origin_reviews_count = readInteger(dis,objectIn);
					
						this.origin_evaluation_score = readInteger(dis,objectIn);
					
       			    	this.origin_arrivals_delay_index = (BigDecimal) objectIn.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis,objectIn);
					
       			    	this.origin_departures_delay_index = (BigDecimal) objectIn.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis,objectIn);
					
       			    	this.origin_arrivals_today_pct_delayed = (BigDecimal) objectIn.readObject();
					
       			    	this.origin_departures_today_pct_delayed = (BigDecimal) objectIn.readObject();
					
       			    	this.origin_arrivals_today_pct_canceled = (BigDecimal) objectIn.readObject();
					
       			    	this.origin_departures_today_pct_canceled = (BigDecimal) objectIn.readObject();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = objectIn.readBoolean();
           				}
					
       			    	this.destination_arrivals_delay_index = (BigDecimal) objectIn.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis,objectIn);
					
       			    	this.destination_departures_delay_index = (BigDecimal) objectIn.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis,objectIn);
					
       			    	this.destination_arrivals_today_pct_delayed = (BigDecimal) objectIn.readObject();
					
       			    	this.destination_departures_today_pct_delayed = (BigDecimal) objectIn.readObject();
					
       			    	this.destination_arrivals_today_pct_canceled = (BigDecimal) objectIn.readObject();
					
       			    	this.destination_departures_today_pct_canceled = (BigDecimal) objectIn.readObject();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = objectIn.readLong();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = objectIn.readLong();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = objectIn.readLong();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = objectIn.readLong();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = objectIn.readLong();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = objectIn.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.flight_number, dos, oos);
					
						writeString(this.flight_alternative, dos, oos);
					
						writeString(this.status_text, dos, oos);
					
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
						writeString(this.status_color, dos, oos);
					
						writeString(this.aircraft_code, dos, oos);
					
						writeString(this.aircraft_text, dos, oos);
					
						writeString(this.aircraft_hex, dos, oos);
					
						writeString(this.aircraft_registration, dos, oos);
					
						writeString(this.airline_name, dos, oos);
					
						writeString(this.airline_iata, dos, oos);
					
						writeString(this.airline_icao, dos, oos);
					
						writeString(this.airline_short, dos, oos);
					
						writeString(this.origin_iata, dos, oos);
					
						writeString(this.origin_icao, dos, oos);
					
						writeString(this.origin_name, dos, oos);
					
       			    	oos.writeObject(this.origin_latitude);
					
       			    	oos.writeObject(this.origin_longitude);
					
						writeString(this.origin_country, dos, oos);
					
						writeString(this.origin_country_code, dos, oos);
					
						writeString(this.origin_city, dos, oos);
					
						writeString(this.origin_timezone, dos, oos);
					
					writeInteger(this.origin_timezone_offset, dos, oos);
					
       			    	oos.writeObject(this.origin_avg_rating);
					
					writeInteger(this.origin_total_ratings, dos, oos);
					
					writeInteger(this.origin_reviews_count, dos, oos);
					
					writeInteger(this.origin_evaluation_score, dos, oos);
					
       			    	oos.writeObject(this.origin_arrivals_delay_index);
					
					writeInteger(this.origin_arrivals_delay_avg, dos, oos);
					
       			    	oos.writeObject(this.origin_departures_delay_index);
					
					writeInteger(this.origin_departures_delay_avg, dos, oos);
					
       			    	oos.writeObject(this.origin_arrivals_today_pct_delayed);
					
       			    	oos.writeObject(this.origin_departures_today_pct_delayed);
					
       			    	oos.writeObject(this.origin_arrivals_today_pct_canceled);
					
       			    	oos.writeObject(this.origin_departures_today_pct_canceled);
					
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
       			    	oos.writeObject(this.destination_arrivals_delay_index);
					
					writeInteger(this.destination_arrivals_delay_avg, dos, oos);
					
       			    	oos.writeObject(this.destination_departures_delay_index);
					
					writeInteger(this.destination_departures_delay_avg, dos, oos);
					
       			    	oos.writeObject(this.destination_arrivals_today_pct_delayed);
					
       			    	oos.writeObject(this.destination_departures_today_pct_delayed);
					
       			    	oos.writeObject(this.destination_arrivals_today_pct_canceled);
					
       			    	oos.writeObject(this.destination_departures_today_pct_canceled);
					
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.flight_number, dos, objectOut);
					
						writeString(this.flight_alternative, dos, objectOut);
					
						writeString(this.status_text, dos, objectOut);
					
						if(this.status_live == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.status_live);
		            	}
					
						writeString(this.status_color, dos, objectOut);
					
						writeString(this.aircraft_code, dos, objectOut);
					
						writeString(this.aircraft_text, dos, objectOut);
					
						writeString(this.aircraft_hex, dos, objectOut);
					
						writeString(this.aircraft_registration, dos, objectOut);
					
						writeString(this.airline_name, dos, objectOut);
					
						writeString(this.airline_iata, dos, objectOut);
					
						writeString(this.airline_icao, dos, objectOut);
					
						writeString(this.airline_short, dos, objectOut);
					
						writeString(this.origin_iata, dos, objectOut);
					
						writeString(this.origin_icao, dos, objectOut);
					
						writeString(this.origin_name, dos, objectOut);
					
       			    	objectOut.writeObject(this.origin_latitude);
					
       			    	objectOut.writeObject(this.origin_longitude);
					
						writeString(this.origin_country, dos, objectOut);
					
						writeString(this.origin_country_code, dos, objectOut);
					
						writeString(this.origin_city, dos, objectOut);
					
						writeString(this.origin_timezone, dos, objectOut);
					
					writeInteger(this.origin_timezone_offset, dos, objectOut);
					
       			    	objectOut.writeObject(this.origin_avg_rating);
					
					writeInteger(this.origin_total_ratings, dos, objectOut);
					
					writeInteger(this.origin_reviews_count, dos, objectOut);
					
					writeInteger(this.origin_evaluation_score, dos, objectOut);
					
       			    	objectOut.writeObject(this.origin_arrivals_delay_index);
					
					writeInteger(this.origin_arrivals_delay_avg, dos, objectOut);
					
       			    	objectOut.writeObject(this.origin_departures_delay_index);
					
					writeInteger(this.origin_departures_delay_avg, dos, objectOut);
					
       			    	objectOut.writeObject(this.origin_arrivals_today_pct_delayed);
					
       			    	objectOut.writeObject(this.origin_departures_today_pct_delayed);
					
       			    	objectOut.writeObject(this.origin_arrivals_today_pct_canceled);
					
       			    	objectOut.writeObject(this.origin_departures_today_pct_canceled);
					
						if(this.destination_visible == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeBoolean(this.destination_visible);
		            	}
					
       			    	objectOut.writeObject(this.destination_arrivals_delay_index);
					
					writeInteger(this.destination_arrivals_delay_avg, dos, objectOut);
					
       			    	objectOut.writeObject(this.destination_departures_delay_index);
					
					writeInteger(this.destination_departures_delay_avg, dos, objectOut);
					
       			    	objectOut.writeObject(this.destination_arrivals_today_pct_delayed);
					
       			    	objectOut.writeObject(this.destination_departures_today_pct_delayed);
					
       			    	objectOut.writeObject(this.destination_arrivals_today_pct_canceled);
					
       			    	objectOut.writeObject(this.destination_departures_today_pct_canceled);
					
						if(this.scheduled_departure == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.scheduled_departure);
		            	}
					
						if(this.scheduled_arrival == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.scheduled_arrival);
		            	}
					
						if(this.real_departure == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.real_departure);
		            	}
					
						if(this.real_arrival == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.real_arrival);
		            	}
					
						if(this.estimated_departure == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.estimated_departure);
		            	}
					
						if(this.estimated_arrival == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",status_text="+status_text);
		sb.append(",status_live="+String.valueOf(status_live));
		sb.append(",status_color="+status_color);
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_short="+airline_short);
		sb.append(",origin_iata="+origin_iata);
		sb.append(",origin_icao="+origin_icao);
		sb.append(",origin_name="+origin_name);
		sb.append(",origin_latitude="+String.valueOf(origin_latitude));
		sb.append(",origin_longitude="+String.valueOf(origin_longitude));
		sb.append(",origin_country="+origin_country);
		sb.append(",origin_country_code="+origin_country_code);
		sb.append(",origin_city="+origin_city);
		sb.append(",origin_timezone="+origin_timezone);
		sb.append(",origin_timezone_offset="+String.valueOf(origin_timezone_offset));
		sb.append(",origin_avg_rating="+String.valueOf(origin_avg_rating));
		sb.append(",origin_total_ratings="+String.valueOf(origin_total_ratings));
		sb.append(",origin_reviews_count="+String.valueOf(origin_reviews_count));
		sb.append(",origin_evaluation_score="+String.valueOf(origin_evaluation_score));
		sb.append(",origin_arrivals_delay_index="+String.valueOf(origin_arrivals_delay_index));
		sb.append(",origin_arrivals_delay_avg="+String.valueOf(origin_arrivals_delay_avg));
		sb.append(",origin_departures_delay_index="+String.valueOf(origin_departures_delay_index));
		sb.append(",origin_departures_delay_avg="+String.valueOf(origin_departures_delay_avg));
		sb.append(",origin_arrivals_today_pct_delayed="+String.valueOf(origin_arrivals_today_pct_delayed));
		sb.append(",origin_departures_today_pct_delayed="+String.valueOf(origin_departures_today_pct_delayed));
		sb.append(",origin_arrivals_today_pct_canceled="+String.valueOf(origin_arrivals_today_pct_canceled));
		sb.append(",origin_departures_today_pct_canceled="+String.valueOf(origin_departures_today_pct_canceled));
		sb.append(",destination_iata="+destination_iata);
		sb.append(",destination_icao="+destination_icao);
		sb.append(",destination_name="+destination_name);
		sb.append(",destination_latitude="+String.valueOf(destination_latitude));
		sb.append(",destination_longitude="+String.valueOf(destination_longitude));
		sb.append(",destination_country="+destination_country);
		sb.append(",destination_country_code="+destination_country_code);
		sb.append(",destination_city="+destination_city);
		sb.append(",destination_timezone="+destination_timezone);
		sb.append(",destination_timezone_offset="+String.valueOf(destination_timezone_offset));
		sb.append(",destination_visible="+String.valueOf(destination_visible));
		sb.append(",destination_avg_rating="+String.valueOf(destination_avg_rating));
		sb.append(",destination_total_ratings="+String.valueOf(destination_total_ratings));
		sb.append(",destination_reviews_count="+String.valueOf(destination_reviews_count));
		sb.append(",destination_evaluation_score="+String.valueOf(destination_evaluation_score));
		sb.append(",destination_arrivals_delay_index="+String.valueOf(destination_arrivals_delay_index));
		sb.append(",destination_arrivals_delay_avg="+String.valueOf(destination_arrivals_delay_avg));
		sb.append(",destination_departures_delay_index="+String.valueOf(destination_departures_delay_index));
		sb.append(",destination_departures_delay_avg="+String.valueOf(destination_departures_delay_avg));
		sb.append(",destination_arrivals_today_pct_delayed="+String.valueOf(destination_arrivals_today_pct_delayed));
		sb.append(",destination_departures_today_pct_delayed="+String.valueOf(destination_departures_today_pct_delayed));
		sb.append(",destination_arrivals_today_pct_canceled="+String.valueOf(destination_arrivals_today_pct_canceled));
		sb.append(",destination_departures_today_pct_canceled="+String.valueOf(destination_departures_today_pct_canceled));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.destination_iata, other.destination_iata);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_icao, other.destination_icao);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_name, other.destination_name);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_latitude, other.destination_latitude);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_longitude, other.destination_longitude);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_country, other.destination_country);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_country_code, other.destination_country_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_city, other.destination_city);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_timezone, other.destination_timezone);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_timezone_offset, other.destination_timezone_offset);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_avg_rating, other.destination_avg_rating);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_total_ratings, other.destination_total_ratings);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_reviews_count, other.destination_reviews_count);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.destination_evaluation_score, other.destination_evaluation_score);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String status_text;

				public String getStatus_text () {
					return this.status_text;
				}
				
			    public Boolean status_live;

				public Boolean getStatus_live () {
					return this.status_live;
				}
				
			    public String status_color;

				public String getStatus_color () {
					return this.status_color;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public String origin_iata;

				public String getOrigin_iata () {
					return this.origin_iata;
				}
				
			    public String origin_icao;

				public String getOrigin_icao () {
					return this.origin_icao;
				}
				
			    public String origin_name;

				public String getOrigin_name () {
					return this.origin_name;
				}
				
			    public BigDecimal origin_latitude;

				public BigDecimal getOrigin_latitude () {
					return this.origin_latitude;
				}
				
			    public BigDecimal origin_longitude;

				public BigDecimal getOrigin_longitude () {
					return this.origin_longitude;
				}
				
			    public String origin_country;

				public String getOrigin_country () {
					return this.origin_country;
				}
				
			    public String origin_country_code;

				public String getOrigin_country_code () {
					return this.origin_country_code;
				}
				
			    public String origin_city;

				public String getOrigin_city () {
					return this.origin_city;
				}
				
			    public String origin_timezone;

				public String getOrigin_timezone () {
					return this.origin_timezone;
				}
				
			    public Integer origin_timezone_offset;

				public Integer getOrigin_timezone_offset () {
					return this.origin_timezone_offset;
				}
				
			    public BigDecimal origin_avg_rating;

				public BigDecimal getOrigin_avg_rating () {
					return this.origin_avg_rating;
				}
				
			    public Integer origin_total_ratings;

				public Integer getOrigin_total_ratings () {
					return this.origin_total_ratings;
				}
				
			    public Integer origin_reviews_count;

				public Integer getOrigin_reviews_count () {
					return this.origin_reviews_count;
				}
				
			    public Integer origin_evaluation_score;

				public Integer getOrigin_evaluation_score () {
					return this.origin_evaluation_score;
				}
				
			    public BigDecimal origin_arrivals_delay_index;

				public BigDecimal getOrigin_arrivals_delay_index () {
					return this.origin_arrivals_delay_index;
				}
				
			    public Integer origin_arrivals_delay_avg;

				public Integer getOrigin_arrivals_delay_avg () {
					return this.origin_arrivals_delay_avg;
				}
				
			    public BigDecimal origin_departures_delay_index;

				public BigDecimal getOrigin_departures_delay_index () {
					return this.origin_departures_delay_index;
				}
				
			    public Integer origin_departures_delay_avg;

				public Integer getOrigin_departures_delay_avg () {
					return this.origin_departures_delay_avg;
				}
				
			    public BigDecimal origin_arrivals_today_pct_delayed;

				public BigDecimal getOrigin_arrivals_today_pct_delayed () {
					return this.origin_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal origin_departures_today_pct_delayed;

				public BigDecimal getOrigin_departures_today_pct_delayed () {
					return this.origin_departures_today_pct_delayed;
				}
				
			    public BigDecimal origin_arrivals_today_pct_canceled;

				public BigDecimal getOrigin_arrivals_today_pct_canceled () {
					return this.origin_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal origin_departures_today_pct_canceled;

				public BigDecimal getOrigin_departures_today_pct_canceled () {
					return this.origin_departures_today_pct_canceled;
				}
				
			    public String destination_iata;

				public String getDestination_iata () {
					return this.destination_iata;
				}
				
			    public String destination_icao;

				public String getDestination_icao () {
					return this.destination_icao;
				}
				
			    public String destination_name;

				public String getDestination_name () {
					return this.destination_name;
				}
				
			    public BigDecimal destination_latitude;

				public BigDecimal getDestination_latitude () {
					return this.destination_latitude;
				}
				
			    public BigDecimal destination_longitude;

				public BigDecimal getDestination_longitude () {
					return this.destination_longitude;
				}
				
			    public String destination_country;

				public String getDestination_country () {
					return this.destination_country;
				}
				
			    public String destination_country_code;

				public String getDestination_country_code () {
					return this.destination_country_code;
				}
				
			    public String destination_city;

				public String getDestination_city () {
					return this.destination_city;
				}
				
			    public String destination_timezone;

				public String getDestination_timezone () {
					return this.destination_timezone;
				}
				
			    public Integer destination_timezone_offset;

				public Integer getDestination_timezone_offset () {
					return this.destination_timezone_offset;
				}
				
			    public Boolean destination_visible;

				public Boolean getDestination_visible () {
					return this.destination_visible;
				}
				
			    public BigDecimal destination_avg_rating;

				public BigDecimal getDestination_avg_rating () {
					return this.destination_avg_rating;
				}
				
			    public Integer destination_total_ratings;

				public Integer getDestination_total_ratings () {
					return this.destination_total_ratings;
				}
				
			    public Integer destination_reviews_count;

				public Integer getDestination_reviews_count () {
					return this.destination_reviews_count;
				}
				
			    public Integer destination_evaluation_score;

				public Integer getDestination_evaluation_score () {
					return this.destination_evaluation_score;
				}
				
			    public BigDecimal destination_arrivals_delay_index;

				public BigDecimal getDestination_arrivals_delay_index () {
					return this.destination_arrivals_delay_index;
				}
				
			    public Integer destination_arrivals_delay_avg;

				public Integer getDestination_arrivals_delay_avg () {
					return this.destination_arrivals_delay_avg;
				}
				
			    public BigDecimal destination_departures_delay_index;

				public BigDecimal getDestination_departures_delay_index () {
					return this.destination_departures_delay_index;
				}
				
			    public Integer destination_departures_delay_avg;

				public Integer getDestination_departures_delay_avg () {
					return this.destination_departures_delay_avg;
				}
				
			    public BigDecimal destination_arrivals_today_pct_delayed;

				public BigDecimal getDestination_arrivals_today_pct_delayed () {
					return this.destination_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal destination_departures_today_pct_delayed;

				public BigDecimal getDestination_departures_today_pct_delayed () {
					return this.destination_departures_today_pct_delayed;
				}
				
			    public BigDecimal destination_arrivals_today_pct_canceled;

				public BigDecimal getDestination_arrivals_today_pct_canceled () {
					return this.destination_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal destination_departures_today_pct_canceled;

				public BigDecimal getDestination_departures_today_pct_canceled () {
					return this.destination_departures_today_pct_canceled;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.flight_number == null) {
							if (other.flight_number != null)
								return false;
						
						} else if (!this.flight_number.equals(other.flight_number))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.flight_number = this.flight_number;
	            other.flight_alternative = this.flight_alternative;
	            other.status_text = this.status_text;
	            other.status_live = this.status_live;
	            other.status_color = this.status_color;
	            other.aircraft_code = this.aircraft_code;
	            other.aircraft_text = this.aircraft_text;
	            other.aircraft_hex = this.aircraft_hex;
	            other.aircraft_registration = this.aircraft_registration;
	            other.airline_name = this.airline_name;
	            other.airline_iata = this.airline_iata;
	            other.airline_icao = this.airline_icao;
	            other.airline_short = this.airline_short;
	            other.origin_iata = this.origin_iata;
	            other.origin_icao = this.origin_icao;
	            other.origin_name = this.origin_name;
	            other.origin_latitude = this.origin_latitude;
	            other.origin_longitude = this.origin_longitude;
	            other.origin_country = this.origin_country;
	            other.origin_country_code = this.origin_country_code;
	            other.origin_city = this.origin_city;
	            other.origin_timezone = this.origin_timezone;
	            other.origin_timezone_offset = this.origin_timezone_offset;
	            other.origin_avg_rating = this.origin_avg_rating;
	            other.origin_total_ratings = this.origin_total_ratings;
	            other.origin_reviews_count = this.origin_reviews_count;
	            other.origin_evaluation_score = this.origin_evaluation_score;
	            other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
	            other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
	            other.origin_departures_delay_index = this.origin_departures_delay_index;
	            other.origin_departures_delay_avg = this.origin_departures_delay_avg;
	            other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
	            other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
	            other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
	            other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
	            other.destination_iata = this.destination_iata;
	            other.destination_icao = this.destination_icao;
	            other.destination_name = this.destination_name;
	            other.destination_latitude = this.destination_latitude;
	            other.destination_longitude = this.destination_longitude;
	            other.destination_country = this.destination_country;
	            other.destination_country_code = this.destination_country_code;
	            other.destination_city = this.destination_city;
	            other.destination_timezone = this.destination_timezone;
	            other.destination_timezone_offset = this.destination_timezone_offset;
	            other.destination_visible = this.destination_visible;
	            other.destination_avg_rating = this.destination_avg_rating;
	            other.destination_total_ratings = this.destination_total_ratings;
	            other.destination_reviews_count = this.destination_reviews_count;
	            other.destination_evaluation_score = this.destination_evaluation_score;
	            other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
	            other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
	            other.destination_departures_delay_index = this.destination_departures_delay_index;
	            other.destination_departures_delay_avg = this.destination_departures_delay_avg;
	            other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
	            other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
	            other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
	            other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
	            other.scheduled_departure = this.scheduled_departure;
	            other.scheduled_arrival = this.scheduled_arrival;
	            other.real_departure = this.real_departure;
	            other.real_arrival = this.real_arrival;
	            other.estimated_departure = this.estimated_departure;
	            other.estimated_arrival = this.estimated_arrival;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.flight_number = this.flight_number;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Dim_Airport.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Dim_Airport = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Dim_Airport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Dim_Airport) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",status_text="+status_text);
		sb.append(",status_live="+String.valueOf(status_live));
		sb.append(",status_color="+status_color);
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_short="+airline_short);
		sb.append(",origin_iata="+origin_iata);
		sb.append(",origin_icao="+origin_icao);
		sb.append(",origin_name="+origin_name);
		sb.append(",origin_latitude="+String.valueOf(origin_latitude));
		sb.append(",origin_longitude="+String.valueOf(origin_longitude));
		sb.append(",origin_country="+origin_country);
		sb.append(",origin_country_code="+origin_country_code);
		sb.append(",origin_city="+origin_city);
		sb.append(",origin_timezone="+origin_timezone);
		sb.append(",origin_timezone_offset="+String.valueOf(origin_timezone_offset));
		sb.append(",origin_avg_rating="+String.valueOf(origin_avg_rating));
		sb.append(",origin_total_ratings="+String.valueOf(origin_total_ratings));
		sb.append(",origin_reviews_count="+String.valueOf(origin_reviews_count));
		sb.append(",origin_evaluation_score="+String.valueOf(origin_evaluation_score));
		sb.append(",origin_arrivals_delay_index="+String.valueOf(origin_arrivals_delay_index));
		sb.append(",origin_arrivals_delay_avg="+String.valueOf(origin_arrivals_delay_avg));
		sb.append(",origin_departures_delay_index="+String.valueOf(origin_departures_delay_index));
		sb.append(",origin_departures_delay_avg="+String.valueOf(origin_departures_delay_avg));
		sb.append(",origin_arrivals_today_pct_delayed="+String.valueOf(origin_arrivals_today_pct_delayed));
		sb.append(",origin_departures_today_pct_delayed="+String.valueOf(origin_departures_today_pct_delayed));
		sb.append(",origin_arrivals_today_pct_canceled="+String.valueOf(origin_arrivals_today_pct_canceled));
		sb.append(",origin_departures_today_pct_canceled="+String.valueOf(origin_departures_today_pct_canceled));
		sb.append(",destination_iata="+destination_iata);
		sb.append(",destination_icao="+destination_icao);
		sb.append(",destination_name="+destination_name);
		sb.append(",destination_latitude="+String.valueOf(destination_latitude));
		sb.append(",destination_longitude="+String.valueOf(destination_longitude));
		sb.append(",destination_country="+destination_country);
		sb.append(",destination_country_code="+destination_country_code);
		sb.append(",destination_city="+destination_city);
		sb.append(",destination_timezone="+destination_timezone);
		sb.append(",destination_timezone_offset="+String.valueOf(destination_timezone_offset));
		sb.append(",destination_visible="+String.valueOf(destination_visible));
		sb.append(",destination_avg_rating="+String.valueOf(destination_avg_rating));
		sb.append(",destination_total_ratings="+String.valueOf(destination_total_ratings));
		sb.append(",destination_reviews_count="+String.valueOf(destination_reviews_count));
		sb.append(",destination_evaluation_score="+String.valueOf(destination_evaluation_score));
		sb.append(",destination_arrivals_delay_index="+String.valueOf(destination_arrivals_delay_index));
		sb.append(",destination_arrivals_delay_avg="+String.valueOf(destination_arrivals_delay_avg));
		sb.append(",destination_departures_delay_index="+String.valueOf(destination_departures_delay_index));
		sb.append(",destination_departures_delay_avg="+String.valueOf(destination_departures_delay_avg));
		sb.append(",destination_arrivals_today_pct_delayed="+String.valueOf(destination_arrivals_today_pct_delayed));
		sb.append(",destination_departures_today_pct_delayed="+String.valueOf(destination_departures_today_pct_delayed));
		sb.append(",destination_arrivals_today_pct_canceled="+String.valueOf(destination_arrivals_today_pct_canceled));
		sb.append(",destination_departures_today_pct_canceled="+String.valueOf(destination_departures_today_pct_canceled));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row10Struct row10 = new row10Struct();





	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tUniqRow_3 - inputs:(row3) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_1 - inputs:(row4,row10) outputs:(origin_airports)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String destination_iata;
					String destination_icao;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.destination_iata == null) ? 0 : this.destination_iata.hashCode());
								
								result = prime * result + ((this.destination_icao == null) ? 0 : this.destination_icao.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.destination_iata == null) {
										if (other.destination_iata != null) 
											return false;
								
									} else if (!this.destination_iata.equals(other.destination_iata))
								 
										return false;
								
									if (this.destination_icao == null) {
										if (other.destination_icao != null) 
											return false;
								
									} else if (!this.destination_icao.equals(other.destination_icao))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:ijstvrcTz0sUMXXsED+53Mvkq+W3qVuqq6h//E8npVg=");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
        String properties_tDBInput_3 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_3 == null || properties_tDBInput_3.trim().length() == 0) {
            properties_tDBInput_3 = "";
        }
        String url_tDBInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBInput_3;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  `raw_flights`.`flight_number`, \n  `raw_flights`.`flight_alternative`, \n  `raw_flights`.`status_text`, \n  "
+"`raw_flights`.`status_live`, \n  `raw_flights`.`status_color`, \n  `raw_flights`.`aircraft_code`, \n  `raw_flights`.`air"
+"craft_text`, \n  `raw_flights`.`aircraft_hex`, \n  `raw_flights`.`aircraft_registration`, \n  `raw_flights`.`airline_nam"
+"e`, \n  `raw_flights`.`airline_iata`, \n  `raw_flights`.`airline_icao`, \n  `raw_flights`.`airline_short`, \n  `raw_flig"
+"hts`.`origin_iata`, \n  `raw_flights`.`origin_icao`, \n  `raw_flights`.`origin_name`, \n  `raw_flights`.`origin_latitude"
+"`, \n  `raw_flights`.`origin_longitude`, \n  `raw_flights`.`origin_country`, \n  `raw_flights`.`origin_country_code`, \n"
+"  `raw_flights`.`origin_city`, \n  `raw_flights`.`origin_timezone`, \n  `raw_flights`.`origin_timezone_offset`, \n  `raw"
+"_flights`.`origin_avg_rating`, \n  `raw_flights`.`origin_total_ratings`, \n  `raw_flights`.`origin_reviews_count`, \n  `"
+"raw_flights`.`origin_evaluation_score`, \n  `raw_flights`.`origin_arrivals_delay_index`, \n  `raw_flights`.`origin_arriv"
+"als_delay_avg`, \n  `raw_flights`.`origin_departures_delay_index`, \n  `raw_flights`.`origin_departures_delay_avg`, \n  "
+"`raw_flights`.`origin_arrivals_today_pct_delayed`, \n  `raw_flights`.`origin_departures_today_pct_delayed`, \n  `raw_fli"
+"ghts`.`origin_arrivals_today_pct_canceled`, \n  `raw_flights`.`origin_departures_today_pct_canceled`, \n  `raw_flights`."
+"`destination_iata`, \n  `raw_flights`.`destination_icao`, \n  `raw_flights`.`destination_name`, \n  `raw_flights`.`desti"
+"nation_latitude`, \n  `raw_flights`.`destination_longitude`, \n  `raw_flights`.`destination_country`, \n  `raw_flights`."
+"`destination_country_code`, \n  `raw_flights`.`destination_city`, \n  `raw_flights`.`destination_timezone`, \n  `raw_fli"
+"ghts`.`destination_timezone_offset`, \n  `raw_flights`.`destination_visible`, \n  `raw_flights`.`destination_avg_rating`"
+", \n  `raw_flights`.`destination_total_ratings`, \n  `raw_flights`.`destination_reviews_count`, \n  `raw_flights`.`desti"
+"nation_evaluation_score`, \n  `raw_flights`.`destination_arrivals_delay_index`, \n  `raw_flights`.`destination_arrivals_"
+"delay_avg`, \n  `raw_flights`.`destination_departures_delay_index`, \n  `raw_flights`.`destination_departures_delay_avg`"
+", \n  `raw_flights`.`destination_arrivals_today_pct_delayed`, \n  `raw_flights`.`destination_departures_today_pct_delaye"
+"d`, \n  `raw_flights`.`destination_arrivals_today_pct_canceled`, \n  `raw_flights`.`destination_departures_today_pct_can"
+"celed`, \n  `raw_flights`.`scheduled_departure`, \n  `raw_flights`.`scheduled_arrival`, \n  `raw_flights`.`real_departur"
+"e`, \n  `raw_flights`.`real_arrival`, \n  `raw_flights`.`estimated_departure`, \n  `raw_flights`.`estimated_arrival`\nFR"
+"OM `raw_flights`";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.flight_number = null;
							} else {
	                         		
        	row3.flight_number = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.flight_alternative = null;
							} else {
	                         		
        	row3.flight_alternative = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.status_text = null;
							} else {
	                         		
        	row3.status_text = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.status_live = null;
							} else {
	                         		
            row3.status_live = rs_tDBInput_3.getBoolean(4);
            if(rs_tDBInput_3.wasNull()){
                    row3.status_live = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.status_color = null;
							} else {
	                         		
        	row3.status_color = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row3.aircraft_code = null;
							} else {
	                         		
        	row3.aircraft_code = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row3.aircraft_text = null;
							} else {
	                         		
        	row3.aircraft_text = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row3.aircraft_hex = null;
							} else {
	                         		
        	row3.aircraft_hex = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row3.aircraft_registration = null;
							} else {
	                         		
        	row3.aircraft_registration = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row3.airline_name = null;
							} else {
	                         		
        	row3.airline_name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row3.airline_iata = null;
							} else {
	                         		
        	row3.airline_iata = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row3.airline_icao = null;
							} else {
	                         		
        	row3.airline_icao = routines.system.JDBCUtil.getString(rs_tDBInput_3, 12, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row3.airline_short = null;
							} else {
	                         		
        	row3.airline_short = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row3.origin_iata = null;
							} else {
	                         		
        	row3.origin_iata = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row3.origin_icao = null;
							} else {
	                         		
        	row3.origin_icao = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row3.origin_name = null;
							} else {
	                         		
        	row3.origin_name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row3.origin_latitude = null;
							} else {
		                          
            row3.origin_latitude = rs_tDBInput_3.getBigDecimal(17);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row3.origin_longitude = null;
							} else {
		                          
            row3.origin_longitude = rs_tDBInput_3.getBigDecimal(18);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row3.origin_country = null;
							} else {
	                         		
        	row3.origin_country = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row3.origin_country_code = null;
							} else {
	                         		
        	row3.origin_country_code = routines.system.JDBCUtil.getString(rs_tDBInput_3, 20, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row3.origin_city = null;
							} else {
	                         		
        	row3.origin_city = routines.system.JDBCUtil.getString(rs_tDBInput_3, 21, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row3.origin_timezone = null;
							} else {
	                         		
        	row3.origin_timezone = routines.system.JDBCUtil.getString(rs_tDBInput_3, 22, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row3.origin_timezone_offset = null;
							} else {
		                          
            row3.origin_timezone_offset = rs_tDBInput_3.getInt(23);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_timezone_offset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row3.origin_avg_rating = null;
							} else {
		                          
            row3.origin_avg_rating = rs_tDBInput_3.getBigDecimal(24);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_avg_rating = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row3.origin_total_ratings = null;
							} else {
		                          
            row3.origin_total_ratings = rs_tDBInput_3.getInt(25);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_total_ratings = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 26) {
								row3.origin_reviews_count = null;
							} else {
		                          
            row3.origin_reviews_count = rs_tDBInput_3.getInt(26);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_reviews_count = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 27) {
								row3.origin_evaluation_score = null;
							} else {
		                          
            row3.origin_evaluation_score = rs_tDBInput_3.getInt(27);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_evaluation_score = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 28) {
								row3.origin_arrivals_delay_index = null;
							} else {
		                          
            row3.origin_arrivals_delay_index = rs_tDBInput_3.getBigDecimal(28);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_arrivals_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 29) {
								row3.origin_arrivals_delay_avg = null;
							} else {
		                          
            row3.origin_arrivals_delay_avg = rs_tDBInput_3.getInt(29);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_arrivals_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 30) {
								row3.origin_departures_delay_index = null;
							} else {
		                          
            row3.origin_departures_delay_index = rs_tDBInput_3.getBigDecimal(30);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_departures_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 31) {
								row3.origin_departures_delay_avg = null;
							} else {
		                          
            row3.origin_departures_delay_avg = rs_tDBInput_3.getInt(31);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_departures_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 32) {
								row3.origin_arrivals_today_pct_delayed = null;
							} else {
		                          
            row3.origin_arrivals_today_pct_delayed = rs_tDBInput_3.getBigDecimal(32);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_arrivals_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 33) {
								row3.origin_departures_today_pct_delayed = null;
							} else {
		                          
            row3.origin_departures_today_pct_delayed = rs_tDBInput_3.getBigDecimal(33);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_departures_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 34) {
								row3.origin_arrivals_today_pct_canceled = null;
							} else {
		                          
            row3.origin_arrivals_today_pct_canceled = rs_tDBInput_3.getBigDecimal(34);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_arrivals_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 35) {
								row3.origin_departures_today_pct_canceled = null;
							} else {
		                          
            row3.origin_departures_today_pct_canceled = rs_tDBInput_3.getBigDecimal(35);
            if(rs_tDBInput_3.wasNull()){
                    row3.origin_departures_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 36) {
								row3.destination_iata = null;
							} else {
	                         		
        	row3.destination_iata = routines.system.JDBCUtil.getString(rs_tDBInput_3, 36, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 37) {
								row3.destination_icao = null;
							} else {
	                         		
        	row3.destination_icao = routines.system.JDBCUtil.getString(rs_tDBInput_3, 37, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 38) {
								row3.destination_name = null;
							} else {
	                         		
        	row3.destination_name = routines.system.JDBCUtil.getString(rs_tDBInput_3, 38, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 39) {
								row3.destination_latitude = null;
							} else {
		                          
            row3.destination_latitude = rs_tDBInput_3.getBigDecimal(39);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 40) {
								row3.destination_longitude = null;
							} else {
		                          
            row3.destination_longitude = rs_tDBInput_3.getBigDecimal(40);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 41) {
								row3.destination_country = null;
							} else {
	                         		
        	row3.destination_country = routines.system.JDBCUtil.getString(rs_tDBInput_3, 41, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 42) {
								row3.destination_country_code = null;
							} else {
	                         		
        	row3.destination_country_code = routines.system.JDBCUtil.getString(rs_tDBInput_3, 42, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 43) {
								row3.destination_city = null;
							} else {
	                         		
        	row3.destination_city = routines.system.JDBCUtil.getString(rs_tDBInput_3, 43, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 44) {
								row3.destination_timezone = null;
							} else {
	                         		
        	row3.destination_timezone = routines.system.JDBCUtil.getString(rs_tDBInput_3, 44, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 45) {
								row3.destination_timezone_offset = null;
							} else {
		                          
            row3.destination_timezone_offset = rs_tDBInput_3.getInt(45);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_timezone_offset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 46) {
								row3.destination_visible = null;
							} else {
	                         		
            row3.destination_visible = rs_tDBInput_3.getBoolean(46);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_visible = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 47) {
								row3.destination_avg_rating = null;
							} else {
		                          
            row3.destination_avg_rating = rs_tDBInput_3.getBigDecimal(47);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_avg_rating = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 48) {
								row3.destination_total_ratings = null;
							} else {
		                          
            row3.destination_total_ratings = rs_tDBInput_3.getInt(48);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_total_ratings = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 49) {
								row3.destination_reviews_count = null;
							} else {
		                          
            row3.destination_reviews_count = rs_tDBInput_3.getInt(49);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_reviews_count = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 50) {
								row3.destination_evaluation_score = null;
							} else {
		                          
            row3.destination_evaluation_score = rs_tDBInput_3.getInt(50);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_evaluation_score = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 51) {
								row3.destination_arrivals_delay_index = null;
							} else {
		                          
            row3.destination_arrivals_delay_index = rs_tDBInput_3.getBigDecimal(51);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_arrivals_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 52) {
								row3.destination_arrivals_delay_avg = null;
							} else {
		                          
            row3.destination_arrivals_delay_avg = rs_tDBInput_3.getInt(52);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_arrivals_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 53) {
								row3.destination_departures_delay_index = null;
							} else {
		                          
            row3.destination_departures_delay_index = rs_tDBInput_3.getBigDecimal(53);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_departures_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 54) {
								row3.destination_departures_delay_avg = null;
							} else {
		                          
            row3.destination_departures_delay_avg = rs_tDBInput_3.getInt(54);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_departures_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 55) {
								row3.destination_arrivals_today_pct_delayed = null;
							} else {
		                          
            row3.destination_arrivals_today_pct_delayed = rs_tDBInput_3.getBigDecimal(55);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_arrivals_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 56) {
								row3.destination_departures_today_pct_delayed = null;
							} else {
		                          
            row3.destination_departures_today_pct_delayed = rs_tDBInput_3.getBigDecimal(56);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_departures_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 57) {
								row3.destination_arrivals_today_pct_canceled = null;
							} else {
		                          
            row3.destination_arrivals_today_pct_canceled = rs_tDBInput_3.getBigDecimal(57);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_arrivals_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 58) {
								row3.destination_departures_today_pct_canceled = null;
							} else {
		                          
            row3.destination_departures_today_pct_canceled = rs_tDBInput_3.getBigDecimal(58);
            if(rs_tDBInput_3.wasNull()){
                    row3.destination_departures_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 59) {
								row3.scheduled_departure = null;
							} else {
		                          
            row3.scheduled_departure = rs_tDBInput_3.getLong(59);
            if(rs_tDBInput_3.wasNull()){
                    row3.scheduled_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 60) {
								row3.scheduled_arrival = null;
							} else {
		                          
            row3.scheduled_arrival = rs_tDBInput_3.getLong(60);
            if(rs_tDBInput_3.wasNull()){
                    row3.scheduled_arrival = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 61) {
								row3.real_departure = null;
							} else {
		                          
            row3.real_departure = rs_tDBInput_3.getLong(61);
            if(rs_tDBInput_3.wasNull()){
                    row3.real_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 62) {
								row3.real_arrival = null;
							} else {
		                          
            row3.real_arrival = rs_tDBInput_3.getLong(62);
            if(rs_tDBInput_3.wasNull()){
                    row3.real_arrival = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 63) {
								row3.estimated_departure = null;
							} else {
		                          
            row3.estimated_departure = rs_tDBInput_3.getLong(63);
            if(rs_tDBInput_3.wasNull()){
                    row3.estimated_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 64) {
								row3.estimated_arrival = null;
							} else {
		                          
            row3.estimated_arrival = rs_tDBInput_3.getLong(64);
            if(rs_tDBInput_3.wasNull()){
                    row3.estimated_arrival = null;
            }
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					
row10 = null;			row10 = null;			
if(row3.destination_iata == null){
	finder_tUniqRow_3.destination_iata = null;
}else{
	finder_tUniqRow_3.destination_iata = row3.destination_iata.toLowerCase();
}
if(row3.destination_icao == null){
	finder_tUniqRow_3.destination_icao = null;
}else{
	finder_tUniqRow_3.destination_icao = row3.destination_icao.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(row3.destination_iata == null){
	new_tUniqRow_3.destination_iata = null;
}else{
	new_tUniqRow_3.destination_iata = row3.destination_iata.toLowerCase();
}
if(row3.destination_icao == null){
	new_tUniqRow_3.destination_icao = null;
}else{
	new_tUniqRow_3.destination_icao = row3.destination_icao.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.flight_number = row3.flight_number;			row10.flight_alternative = row3.flight_alternative;			row10.status_text = row3.status_text;			row10.status_live = row3.status_live;			row10.status_color = row3.status_color;			row10.aircraft_code = row3.aircraft_code;			row10.aircraft_text = row3.aircraft_text;			row10.aircraft_hex = row3.aircraft_hex;			row10.aircraft_registration = row3.aircraft_registration;			row10.airline_name = row3.airline_name;			row10.airline_iata = row3.airline_iata;			row10.airline_icao = row3.airline_icao;			row10.airline_short = row3.airline_short;			row10.origin_iata = row3.origin_iata;			row10.origin_icao = row3.origin_icao;			row10.origin_name = row3.origin_name;			row10.origin_latitude = row3.origin_latitude;			row10.origin_longitude = row3.origin_longitude;			row10.origin_country = row3.origin_country;			row10.origin_country_code = row3.origin_country_code;			row10.origin_city = row3.origin_city;			row10.origin_timezone = row3.origin_timezone;			row10.origin_timezone_offset = row3.origin_timezone_offset;			row10.origin_avg_rating = row3.origin_avg_rating;			row10.origin_total_ratings = row3.origin_total_ratings;			row10.origin_reviews_count = row3.origin_reviews_count;			row10.origin_evaluation_score = row3.origin_evaluation_score;			row10.origin_arrivals_delay_index = row3.origin_arrivals_delay_index;			row10.origin_arrivals_delay_avg = row3.origin_arrivals_delay_avg;			row10.origin_departures_delay_index = row3.origin_departures_delay_index;			row10.origin_departures_delay_avg = row3.origin_departures_delay_avg;			row10.origin_arrivals_today_pct_delayed = row3.origin_arrivals_today_pct_delayed;			row10.origin_departures_today_pct_delayed = row3.origin_departures_today_pct_delayed;			row10.origin_arrivals_today_pct_canceled = row3.origin_arrivals_today_pct_canceled;			row10.origin_departures_today_pct_canceled = row3.origin_departures_today_pct_canceled;			row10.destination_iata = row3.destination_iata;			row10.destination_icao = row3.destination_icao;			row10.destination_name = row3.destination_name;			row10.destination_latitude = row3.destination_latitude;			row10.destination_longitude = row3.destination_longitude;			row10.destination_country = row3.destination_country;			row10.destination_country_code = row3.destination_country_code;			row10.destination_city = row3.destination_city;			row10.destination_timezone = row3.destination_timezone;			row10.destination_timezone_offset = row3.destination_timezone_offset;			row10.destination_visible = row3.destination_visible;			row10.destination_avg_rating = row3.destination_avg_rating;			row10.destination_total_ratings = row3.destination_total_ratings;			row10.destination_reviews_count = row3.destination_reviews_count;			row10.destination_evaluation_score = row3.destination_evaluation_score;			row10.destination_arrivals_delay_index = row3.destination_arrivals_delay_index;			row10.destination_arrivals_delay_avg = row3.destination_arrivals_delay_avg;			row10.destination_departures_delay_index = row3.destination_departures_delay_index;			row10.destination_departures_delay_avg = row3.destination_departures_delay_avg;			row10.destination_arrivals_today_pct_delayed = row3.destination_arrivals_today_pct_delayed;			row10.destination_departures_today_pct_delayed = row3.destination_departures_today_pct_delayed;			row10.destination_arrivals_today_pct_canceled = row3.destination_arrivals_today_pct_canceled;			row10.destination_departures_today_pct_canceled = row3.destination_departures_today_pct_canceled;			row10.scheduled_departure = row3.scheduled_departure;			row10.scheduled_arrival = row3.scheduled_arrival;			row10.real_departure = row3.real_departure;			row10.real_arrival = row3.real_arrival;			row10.estimated_departure = row3.estimated_departure;			row10.estimated_arrival = row3.estimated_arrival;			if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.flight_number = row3.flight_number;			row10.flight_alternative = row3.flight_alternative;			row10.status_text = row3.status_text;			row10.status_live = row3.status_live;			row10.status_color = row3.status_color;			row10.aircraft_code = row3.aircraft_code;			row10.aircraft_text = row3.aircraft_text;			row10.aircraft_hex = row3.aircraft_hex;			row10.aircraft_registration = row3.aircraft_registration;			row10.airline_name = row3.airline_name;			row10.airline_iata = row3.airline_iata;			row10.airline_icao = row3.airline_icao;			row10.airline_short = row3.airline_short;			row10.origin_iata = row3.origin_iata;			row10.origin_icao = row3.origin_icao;			row10.origin_name = row3.origin_name;			row10.origin_latitude = row3.origin_latitude;			row10.origin_longitude = row3.origin_longitude;			row10.origin_country = row3.origin_country;			row10.origin_country_code = row3.origin_country_code;			row10.origin_city = row3.origin_city;			row10.origin_timezone = row3.origin_timezone;			row10.origin_timezone_offset = row3.origin_timezone_offset;			row10.origin_avg_rating = row3.origin_avg_rating;			row10.origin_total_ratings = row3.origin_total_ratings;			row10.origin_reviews_count = row3.origin_reviews_count;			row10.origin_evaluation_score = row3.origin_evaluation_score;			row10.origin_arrivals_delay_index = row3.origin_arrivals_delay_index;			row10.origin_arrivals_delay_avg = row3.origin_arrivals_delay_avg;			row10.origin_departures_delay_index = row3.origin_departures_delay_index;			row10.origin_departures_delay_avg = row3.origin_departures_delay_avg;			row10.origin_arrivals_today_pct_delayed = row3.origin_arrivals_today_pct_delayed;			row10.origin_departures_today_pct_delayed = row3.origin_departures_today_pct_delayed;			row10.origin_arrivals_today_pct_canceled = row3.origin_arrivals_today_pct_canceled;			row10.origin_departures_today_pct_canceled = row3.origin_departures_today_pct_canceled;			row10.destination_iata = row3.destination_iata;			row10.destination_icao = row3.destination_icao;			row10.destination_name = row3.destination_name;			row10.destination_latitude = row3.destination_latitude;			row10.destination_longitude = row3.destination_longitude;			row10.destination_country = row3.destination_country;			row10.destination_country_code = row3.destination_country_code;			row10.destination_city = row3.destination_city;			row10.destination_timezone = row3.destination_timezone;			row10.destination_timezone_offset = row3.destination_timezone_offset;			row10.destination_visible = row3.destination_visible;			row10.destination_avg_rating = row3.destination_avg_rating;			row10.destination_total_ratings = row3.destination_total_ratings;			row10.destination_reviews_count = row3.destination_reviews_count;			row10.destination_evaluation_score = row3.destination_evaluation_score;			row10.destination_arrivals_delay_index = row3.destination_arrivals_delay_index;			row10.destination_arrivals_delay_avg = row3.destination_arrivals_delay_avg;			row10.destination_departures_delay_index = row3.destination_departures_delay_index;			row10.destination_departures_delay_avg = row3.destination_departures_delay_avg;			row10.destination_arrivals_today_pct_delayed = row3.destination_arrivals_today_pct_delayed;			row10.destination_departures_today_pct_delayed = row3.destination_departures_today_pct_delayed;			row10.destination_arrivals_today_pct_canceled = row3.destination_arrivals_today_pct_canceled;			row10.destination_departures_today_pct_canceled = row3.destination_departures_today_pct_canceled;			row10.scheduled_departure = row3.scheduled_departure;			row10.scheduled_arrival = row3.scheduled_arrival;			row10.real_departure = row3.real_departure;			row10.real_arrival = row3.real_arrival;			row10.estimated_departure = row3.estimated_departure;			row10.estimated_arrival = row3.estimated_arrival;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.flight_number = row10.flight_number;
				
				row10_HashRow.flight_alternative = row10.flight_alternative;
				
				row10_HashRow.status_text = row10.status_text;
				
				row10_HashRow.status_live = row10.status_live;
				
				row10_HashRow.status_color = row10.status_color;
				
				row10_HashRow.aircraft_code = row10.aircraft_code;
				
				row10_HashRow.aircraft_text = row10.aircraft_text;
				
				row10_HashRow.aircraft_hex = row10.aircraft_hex;
				
				row10_HashRow.aircraft_registration = row10.aircraft_registration;
				
				row10_HashRow.airline_name = row10.airline_name;
				
				row10_HashRow.airline_iata = row10.airline_iata;
				
				row10_HashRow.airline_icao = row10.airline_icao;
				
				row10_HashRow.airline_short = row10.airline_short;
				
				row10_HashRow.origin_iata = row10.origin_iata;
				
				row10_HashRow.origin_icao = row10.origin_icao;
				
				row10_HashRow.origin_name = row10.origin_name;
				
				row10_HashRow.origin_latitude = row10.origin_latitude;
				
				row10_HashRow.origin_longitude = row10.origin_longitude;
				
				row10_HashRow.origin_country = row10.origin_country;
				
				row10_HashRow.origin_country_code = row10.origin_country_code;
				
				row10_HashRow.origin_city = row10.origin_city;
				
				row10_HashRow.origin_timezone = row10.origin_timezone;
				
				row10_HashRow.origin_timezone_offset = row10.origin_timezone_offset;
				
				row10_HashRow.origin_avg_rating = row10.origin_avg_rating;
				
				row10_HashRow.origin_total_ratings = row10.origin_total_ratings;
				
				row10_HashRow.origin_reviews_count = row10.origin_reviews_count;
				
				row10_HashRow.origin_evaluation_score = row10.origin_evaluation_score;
				
				row10_HashRow.origin_arrivals_delay_index = row10.origin_arrivals_delay_index;
				
				row10_HashRow.origin_arrivals_delay_avg = row10.origin_arrivals_delay_avg;
				
				row10_HashRow.origin_departures_delay_index = row10.origin_departures_delay_index;
				
				row10_HashRow.origin_departures_delay_avg = row10.origin_departures_delay_avg;
				
				row10_HashRow.origin_arrivals_today_pct_delayed = row10.origin_arrivals_today_pct_delayed;
				
				row10_HashRow.origin_departures_today_pct_delayed = row10.origin_departures_today_pct_delayed;
				
				row10_HashRow.origin_arrivals_today_pct_canceled = row10.origin_arrivals_today_pct_canceled;
				
				row10_HashRow.origin_departures_today_pct_canceled = row10.origin_departures_today_pct_canceled;
				
				row10_HashRow.destination_iata = row10.destination_iata;
				
				row10_HashRow.destination_icao = row10.destination_icao;
				
				row10_HashRow.destination_name = row10.destination_name;
				
				row10_HashRow.destination_latitude = row10.destination_latitude;
				
				row10_HashRow.destination_longitude = row10.destination_longitude;
				
				row10_HashRow.destination_country = row10.destination_country;
				
				row10_HashRow.destination_country_code = row10.destination_country_code;
				
				row10_HashRow.destination_city = row10.destination_city;
				
				row10_HashRow.destination_timezone = row10.destination_timezone;
				
				row10_HashRow.destination_timezone_offset = row10.destination_timezone_offset;
				
				row10_HashRow.destination_visible = row10.destination_visible;
				
				row10_HashRow.destination_avg_rating = row10.destination_avg_rating;
				
				row10_HashRow.destination_total_ratings = row10.destination_total_ratings;
				
				row10_HashRow.destination_reviews_count = row10.destination_reviews_count;
				
				row10_HashRow.destination_evaluation_score = row10.destination_evaluation_score;
				
				row10_HashRow.destination_arrivals_delay_index = row10.destination_arrivals_delay_index;
				
				row10_HashRow.destination_arrivals_delay_avg = row10.destination_arrivals_delay_avg;
				
				row10_HashRow.destination_departures_delay_index = row10.destination_departures_delay_index;
				
				row10_HashRow.destination_departures_delay_avg = row10.destination_departures_delay_avg;
				
				row10_HashRow.destination_arrivals_today_pct_delayed = row10.destination_arrivals_today_pct_delayed;
				
				row10_HashRow.destination_departures_today_pct_delayed = row10.destination_departures_today_pct_delayed;
				
				row10_HashRow.destination_arrivals_today_pct_canceled = row10.destination_arrivals_today_pct_canceled;
				
				row10_HashRow.destination_departures_today_pct_canceled = row10.destination_departures_today_pct_canceled;
				
				row10_HashRow.scheduled_departure = row10.scheduled_departure;
				
				row10_HashRow.scheduled_arrival = row10.scheduled_arrival;
				
				row10_HashRow.real_departure = row10.real_departure;
				
				row10_HashRow.real_arrival = row10.real_arrival;
				
				row10_HashRow.estimated_departure = row10.estimated_departure;
				
				row10_HashRow.estimated_arrival = row10.estimated_arrival;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Load_Dim_Airport Load_Dim_AirportClass = new Load_Dim_Airport();

        int exitCode = Load_Dim_AirportClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Load_Dim_Airport.class.getClassLoader().getResourceAsStream("airport_etl/load_dim_airport_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Load_Dim_Airport.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Load_Dim_Airport");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     535809 characters generated by Talend Open Studio for Data Integration 
 *     on the August 16, 2025 at 3:43:18 AM GMT+01:00
 ************************************************************************************************/