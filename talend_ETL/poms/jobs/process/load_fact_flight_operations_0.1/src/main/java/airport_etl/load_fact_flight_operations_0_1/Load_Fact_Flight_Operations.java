// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package airport_etl.load_fact_flight_operations_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Load_Fact_Flight_Operations Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Load_Fact_Flight_Operations implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Load_Fact_Flight_Operations";
	private final String projectName = "AIRPORT_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Load_Fact_Flight_Operations.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Load_Fact_Flight_Operations.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_status1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_aircrafts1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_airlines1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_origin_airport1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_destination_airport1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class flightsStruct implements routines.system.IPersistableRow<flightsStruct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String origin_airport_key;

				public String getOrigin_airport_key () {
					return this.origin_airport_key;
				}
				
			    public String destination_airport_key;

				public String getDestination_airport_key () {
					return this.destination_airport_key;
				}
				
			    public String airline_key;

				public String getAirline_key () {
					return this.airline_key;
				}
				
			    public Integer aircraft_key;

				public Integer getAircraft_key () {
					return this.aircraft_key;
				}
				
			    public Integer status_key;

				public Integer getStatus_key () {
					return this.status_key;
				}
				
			    public Integer departure_date_key;

				public Integer getDeparture_date_key () {
					return this.departure_date_key;
				}
				
			    public Integer arrival_date_key;

				public Integer getArrival_date_key () {
					return this.arrival_date_key;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				
			    public Integer scheduled_flight_duration_minutes;

				public Integer getScheduled_flight_duration_minutes () {
					return this.scheduled_flight_duration_minutes;
				}
				
			    public Integer actual_flight_duration_minutes;

				public Integer getActual_flight_duration_minutes () {
					return this.actual_flight_duration_minutes;
				}
				
			    public Integer departure_delay_minutes;

				public Integer getDeparture_delay_minutes () {
					return this.departure_delay_minutes;
				}
				
			    public Integer arrival_delay_minutes;

				public Integer getArrival_delay_minutes () {
					return this.arrival_delay_minutes;
				}
				
			    public String flight_type;

				public String getFlight_type () {
					return this.flight_type;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final flightsStruct other = (flightsStruct) obj;
		
						if (this.flight_number == null) {
							if (other.flight_number != null)
								return false;
						
						} else if (!this.flight_number.equals(other.flight_number))
						
							return false;
					

		return true;
    }

	public void copyDataTo(flightsStruct other) {

		other.flight_number = this.flight_number;
	            other.flight_alternative = this.flight_alternative;
	            other.origin_airport_key = this.origin_airport_key;
	            other.destination_airport_key = this.destination_airport_key;
	            other.airline_key = this.airline_key;
	            other.aircraft_key = this.aircraft_key;
	            other.status_key = this.status_key;
	            other.departure_date_key = this.departure_date_key;
	            other.arrival_date_key = this.arrival_date_key;
	            other.scheduled_departure = this.scheduled_departure;
	            other.scheduled_arrival = this.scheduled_arrival;
	            other.real_departure = this.real_departure;
	            other.real_arrival = this.real_arrival;
	            other.estimated_departure = this.estimated_departure;
	            other.estimated_arrival = this.estimated_arrival;
	            other.scheduled_flight_duration_minutes = this.scheduled_flight_duration_minutes;
	            other.actual_flight_duration_minutes = this.actual_flight_duration_minutes;
	            other.departure_delay_minutes = this.departure_delay_minutes;
	            other.arrival_delay_minutes = this.arrival_delay_minutes;
	            other.flight_type = this.flight_type;
	            
	}

	public void copyKeysDataTo(flightsStruct other) {

		other.flight_number = this.flight_number;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.origin_airport_key = readString(dis);
					
					this.destination_airport_key = readString(dis);
					
					this.airline_key = readString(dis);
					
						this.aircraft_key = readInteger(dis);
					
						this.status_key = readInteger(dis);
					
						this.departure_date_key = readInteger(dis);
					
						this.arrival_date_key = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
						this.scheduled_flight_duration_minutes = readInteger(dis);
					
						this.actual_flight_duration_minutes = readInteger(dis);
					
						this.departure_delay_minutes = readInteger(dis);
					
						this.arrival_delay_minutes = readInteger(dis);
					
					this.flight_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.origin_airport_key = readString(dis);
					
					this.destination_airport_key = readString(dis);
					
					this.airline_key = readString(dis);
					
						this.aircraft_key = readInteger(dis);
					
						this.status_key = readInteger(dis);
					
						this.departure_date_key = readInteger(dis);
					
						this.arrival_date_key = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
						this.scheduled_flight_duration_minutes = readInteger(dis);
					
						this.actual_flight_duration_minutes = readInteger(dis);
					
						this.departure_delay_minutes = readInteger(dis);
					
						this.arrival_delay_minutes = readInteger(dis);
					
					this.flight_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.origin_airport_key,dos);
					
					// String
				
						writeString(this.destination_airport_key,dos);
					
					// String
				
						writeString(this.airline_key,dos);
					
					// Integer
				
						writeInteger(this.aircraft_key,dos);
					
					// Integer
				
						writeInteger(this.status_key,dos);
					
					// Integer
				
						writeInteger(this.departure_date_key,dos);
					
					// Integer
				
						writeInteger(this.arrival_date_key,dos);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
					// Integer
				
						writeInteger(this.scheduled_flight_duration_minutes,dos);
					
					// Integer
				
						writeInteger(this.actual_flight_duration_minutes,dos);
					
					// Integer
				
						writeInteger(this.departure_delay_minutes,dos);
					
					// Integer
				
						writeInteger(this.arrival_delay_minutes,dos);
					
					// String
				
						writeString(this.flight_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.origin_airport_key,dos);
					
					// String
				
						writeString(this.destination_airport_key,dos);
					
					// String
				
						writeString(this.airline_key,dos);
					
					// Integer
				
						writeInteger(this.aircraft_key,dos);
					
					// Integer
				
						writeInteger(this.status_key,dos);
					
					// Integer
				
						writeInteger(this.departure_date_key,dos);
					
					// Integer
				
						writeInteger(this.arrival_date_key,dos);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
					// Integer
				
						writeInteger(this.scheduled_flight_duration_minutes,dos);
					
					// Integer
				
						writeInteger(this.actual_flight_duration_minutes,dos);
					
					// Integer
				
						writeInteger(this.departure_delay_minutes,dos);
					
					// Integer
				
						writeInteger(this.arrival_delay_minutes,dos);
					
					// String
				
						writeString(this.flight_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",origin_airport_key="+origin_airport_key);
		sb.append(",destination_airport_key="+destination_airport_key);
		sb.append(",airline_key="+airline_key);
		sb.append(",aircraft_key="+String.valueOf(aircraft_key));
		sb.append(",status_key="+String.valueOf(status_key));
		sb.append(",departure_date_key="+String.valueOf(departure_date_key));
		sb.append(",arrival_date_key="+String.valueOf(arrival_date_key));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
		sb.append(",scheduled_flight_duration_minutes="+String.valueOf(scheduled_flight_duration_minutes));
		sb.append(",actual_flight_duration_minutes="+String.valueOf(actual_flight_duration_minutes));
		sb.append(",departure_delay_minutes="+String.valueOf(departure_delay_minutes));
		sb.append(",arrival_delay_minutes="+String.valueOf(arrival_delay_minutes));
		sb.append(",flight_type="+flight_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(flightsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];

	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String status_text;

				public String getStatus_text () {
					return this.status_text;
				}
				
			    public Boolean status_live;

				public Boolean getStatus_live () {
					return this.status_live;
				}
				
			    public String status_color;

				public String getStatus_color () {
					return this.status_color;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public String origin_iata;

				public String getOrigin_iata () {
					return this.origin_iata;
				}
				
			    public String origin_icao;

				public String getOrigin_icao () {
					return this.origin_icao;
				}
				
			    public String origin_name;

				public String getOrigin_name () {
					return this.origin_name;
				}
				
			    public BigDecimal origin_latitude;

				public BigDecimal getOrigin_latitude () {
					return this.origin_latitude;
				}
				
			    public BigDecimal origin_longitude;

				public BigDecimal getOrigin_longitude () {
					return this.origin_longitude;
				}
				
			    public String origin_country;

				public String getOrigin_country () {
					return this.origin_country;
				}
				
			    public String origin_country_code;

				public String getOrigin_country_code () {
					return this.origin_country_code;
				}
				
			    public String origin_city;

				public String getOrigin_city () {
					return this.origin_city;
				}
				
			    public String origin_timezone;

				public String getOrigin_timezone () {
					return this.origin_timezone;
				}
				
			    public Integer origin_timezone_offset;

				public Integer getOrigin_timezone_offset () {
					return this.origin_timezone_offset;
				}
				
			    public BigDecimal origin_avg_rating;

				public BigDecimal getOrigin_avg_rating () {
					return this.origin_avg_rating;
				}
				
			    public Integer origin_total_ratings;

				public Integer getOrigin_total_ratings () {
					return this.origin_total_ratings;
				}
				
			    public Integer origin_reviews_count;

				public Integer getOrigin_reviews_count () {
					return this.origin_reviews_count;
				}
				
			    public Integer origin_evaluation_score;

				public Integer getOrigin_evaluation_score () {
					return this.origin_evaluation_score;
				}
				
			    public BigDecimal origin_arrivals_delay_index;

				public BigDecimal getOrigin_arrivals_delay_index () {
					return this.origin_arrivals_delay_index;
				}
				
			    public Integer origin_arrivals_delay_avg;

				public Integer getOrigin_arrivals_delay_avg () {
					return this.origin_arrivals_delay_avg;
				}
				
			    public BigDecimal origin_departures_delay_index;

				public BigDecimal getOrigin_departures_delay_index () {
					return this.origin_departures_delay_index;
				}
				
			    public Integer origin_departures_delay_avg;

				public Integer getOrigin_departures_delay_avg () {
					return this.origin_departures_delay_avg;
				}
				
			    public BigDecimal origin_arrivals_today_pct_delayed;

				public BigDecimal getOrigin_arrivals_today_pct_delayed () {
					return this.origin_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal origin_departures_today_pct_delayed;

				public BigDecimal getOrigin_departures_today_pct_delayed () {
					return this.origin_departures_today_pct_delayed;
				}
				
			    public BigDecimal origin_arrivals_today_pct_canceled;

				public BigDecimal getOrigin_arrivals_today_pct_canceled () {
					return this.origin_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal origin_departures_today_pct_canceled;

				public BigDecimal getOrigin_departures_today_pct_canceled () {
					return this.origin_departures_today_pct_canceled;
				}
				
			    public String destination_iata;

				public String getDestination_iata () {
					return this.destination_iata;
				}
				
			    public String destination_icao;

				public String getDestination_icao () {
					return this.destination_icao;
				}
				
			    public String destination_name;

				public String getDestination_name () {
					return this.destination_name;
				}
				
			    public BigDecimal destination_latitude;

				public BigDecimal getDestination_latitude () {
					return this.destination_latitude;
				}
				
			    public BigDecimal destination_longitude;

				public BigDecimal getDestination_longitude () {
					return this.destination_longitude;
				}
				
			    public String destination_country;

				public String getDestination_country () {
					return this.destination_country;
				}
				
			    public String destination_country_code;

				public String getDestination_country_code () {
					return this.destination_country_code;
				}
				
			    public String destination_city;

				public String getDestination_city () {
					return this.destination_city;
				}
				
			    public String destination_timezone;

				public String getDestination_timezone () {
					return this.destination_timezone;
				}
				
			    public Integer destination_timezone_offset;

				public Integer getDestination_timezone_offset () {
					return this.destination_timezone_offset;
				}
				
			    public Boolean destination_visible;

				public Boolean getDestination_visible () {
					return this.destination_visible;
				}
				
			    public BigDecimal destination_avg_rating;

				public BigDecimal getDestination_avg_rating () {
					return this.destination_avg_rating;
				}
				
			    public Integer destination_total_ratings;

				public Integer getDestination_total_ratings () {
					return this.destination_total_ratings;
				}
				
			    public Integer destination_reviews_count;

				public Integer getDestination_reviews_count () {
					return this.destination_reviews_count;
				}
				
			    public Integer destination_evaluation_score;

				public Integer getDestination_evaluation_score () {
					return this.destination_evaluation_score;
				}
				
			    public BigDecimal destination_arrivals_delay_index;

				public BigDecimal getDestination_arrivals_delay_index () {
					return this.destination_arrivals_delay_index;
				}
				
			    public Integer destination_arrivals_delay_avg;

				public Integer getDestination_arrivals_delay_avg () {
					return this.destination_arrivals_delay_avg;
				}
				
			    public BigDecimal destination_departures_delay_index;

				public BigDecimal getDestination_departures_delay_index () {
					return this.destination_departures_delay_index;
				}
				
			    public Integer destination_departures_delay_avg;

				public Integer getDestination_departures_delay_avg () {
					return this.destination_departures_delay_avg;
				}
				
			    public BigDecimal destination_arrivals_today_pct_delayed;

				public BigDecimal getDestination_arrivals_today_pct_delayed () {
					return this.destination_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal destination_departures_today_pct_delayed;

				public BigDecimal getDestination_departures_today_pct_delayed () {
					return this.destination_departures_today_pct_delayed;
				}
				
			    public BigDecimal destination_arrivals_today_pct_canceled;

				public BigDecimal getDestination_arrivals_today_pct_canceled () {
					return this.destination_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal destination_departures_today_pct_canceled;

				public BigDecimal getDestination_departures_today_pct_canceled () {
					return this.destination_departures_today_pct_canceled;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				
			    public String flight_type;

				public String getFlight_type () {
					return this.flight_type;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
					this.flight_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
					this.flight_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
					// String
				
						writeString(this.flight_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
					// String
				
						writeString(this.flight_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",status_text="+status_text);
		sb.append(",status_live="+String.valueOf(status_live));
		sb.append(",status_color="+status_color);
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_short="+airline_short);
		sb.append(",origin_iata="+origin_iata);
		sb.append(",origin_icao="+origin_icao);
		sb.append(",origin_name="+origin_name);
		sb.append(",origin_latitude="+String.valueOf(origin_latitude));
		sb.append(",origin_longitude="+String.valueOf(origin_longitude));
		sb.append(",origin_country="+origin_country);
		sb.append(",origin_country_code="+origin_country_code);
		sb.append(",origin_city="+origin_city);
		sb.append(",origin_timezone="+origin_timezone);
		sb.append(",origin_timezone_offset="+String.valueOf(origin_timezone_offset));
		sb.append(",origin_avg_rating="+String.valueOf(origin_avg_rating));
		sb.append(",origin_total_ratings="+String.valueOf(origin_total_ratings));
		sb.append(",origin_reviews_count="+String.valueOf(origin_reviews_count));
		sb.append(",origin_evaluation_score="+String.valueOf(origin_evaluation_score));
		sb.append(",origin_arrivals_delay_index="+String.valueOf(origin_arrivals_delay_index));
		sb.append(",origin_arrivals_delay_avg="+String.valueOf(origin_arrivals_delay_avg));
		sb.append(",origin_departures_delay_index="+String.valueOf(origin_departures_delay_index));
		sb.append(",origin_departures_delay_avg="+String.valueOf(origin_departures_delay_avg));
		sb.append(",origin_arrivals_today_pct_delayed="+String.valueOf(origin_arrivals_today_pct_delayed));
		sb.append(",origin_departures_today_pct_delayed="+String.valueOf(origin_departures_today_pct_delayed));
		sb.append(",origin_arrivals_today_pct_canceled="+String.valueOf(origin_arrivals_today_pct_canceled));
		sb.append(",origin_departures_today_pct_canceled="+String.valueOf(origin_departures_today_pct_canceled));
		sb.append(",destination_iata="+destination_iata);
		sb.append(",destination_icao="+destination_icao);
		sb.append(",destination_name="+destination_name);
		sb.append(",destination_latitude="+String.valueOf(destination_latitude));
		sb.append(",destination_longitude="+String.valueOf(destination_longitude));
		sb.append(",destination_country="+destination_country);
		sb.append(",destination_country_code="+destination_country_code);
		sb.append(",destination_city="+destination_city);
		sb.append(",destination_timezone="+destination_timezone);
		sb.append(",destination_timezone_offset="+String.valueOf(destination_timezone_offset));
		sb.append(",destination_visible="+String.valueOf(destination_visible));
		sb.append(",destination_avg_rating="+String.valueOf(destination_avg_rating));
		sb.append(",destination_total_ratings="+String.valueOf(destination_total_ratings));
		sb.append(",destination_reviews_count="+String.valueOf(destination_reviews_count));
		sb.append(",destination_evaluation_score="+String.valueOf(destination_evaluation_score));
		sb.append(",destination_arrivals_delay_index="+String.valueOf(destination_arrivals_delay_index));
		sb.append(",destination_arrivals_delay_avg="+String.valueOf(destination_arrivals_delay_avg));
		sb.append(",destination_departures_delay_index="+String.valueOf(destination_departures_delay_index));
		sb.append(",destination_departures_delay_avg="+String.valueOf(destination_departures_delay_avg));
		sb.append(",destination_arrivals_today_pct_delayed="+String.valueOf(destination_arrivals_today_pct_delayed));
		sb.append(",destination_departures_today_pct_delayed="+String.valueOf(destination_departures_today_pct_delayed));
		sb.append(",destination_arrivals_today_pct_canceled="+String.valueOf(destination_arrivals_today_pct_canceled));
		sb.append(",destination_departures_today_pct_canceled="+String.valueOf(destination_departures_today_pct_canceled));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
		sb.append(",flight_type="+flight_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String flight_number;

				public String getFlight_number () {
					return this.flight_number;
				}
				
			    public String flight_alternative;

				public String getFlight_alternative () {
					return this.flight_alternative;
				}
				
			    public String status_text;

				public String getStatus_text () {
					return this.status_text;
				}
				
			    public Boolean status_live;

				public Boolean getStatus_live () {
					return this.status_live;
				}
				
			    public String status_color;

				public String getStatus_color () {
					return this.status_color;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public String origin_iata;

				public String getOrigin_iata () {
					return this.origin_iata;
				}
				
			    public String origin_icao;

				public String getOrigin_icao () {
					return this.origin_icao;
				}
				
			    public String origin_name;

				public String getOrigin_name () {
					return this.origin_name;
				}
				
			    public BigDecimal origin_latitude;

				public BigDecimal getOrigin_latitude () {
					return this.origin_latitude;
				}
				
			    public BigDecimal origin_longitude;

				public BigDecimal getOrigin_longitude () {
					return this.origin_longitude;
				}
				
			    public String origin_country;

				public String getOrigin_country () {
					return this.origin_country;
				}
				
			    public String origin_country_code;

				public String getOrigin_country_code () {
					return this.origin_country_code;
				}
				
			    public String origin_city;

				public String getOrigin_city () {
					return this.origin_city;
				}
				
			    public String origin_timezone;

				public String getOrigin_timezone () {
					return this.origin_timezone;
				}
				
			    public Integer origin_timezone_offset;

				public Integer getOrigin_timezone_offset () {
					return this.origin_timezone_offset;
				}
				
			    public BigDecimal origin_avg_rating;

				public BigDecimal getOrigin_avg_rating () {
					return this.origin_avg_rating;
				}
				
			    public Integer origin_total_ratings;

				public Integer getOrigin_total_ratings () {
					return this.origin_total_ratings;
				}
				
			    public Integer origin_reviews_count;

				public Integer getOrigin_reviews_count () {
					return this.origin_reviews_count;
				}
				
			    public Integer origin_evaluation_score;

				public Integer getOrigin_evaluation_score () {
					return this.origin_evaluation_score;
				}
				
			    public BigDecimal origin_arrivals_delay_index;

				public BigDecimal getOrigin_arrivals_delay_index () {
					return this.origin_arrivals_delay_index;
				}
				
			    public Integer origin_arrivals_delay_avg;

				public Integer getOrigin_arrivals_delay_avg () {
					return this.origin_arrivals_delay_avg;
				}
				
			    public BigDecimal origin_departures_delay_index;

				public BigDecimal getOrigin_departures_delay_index () {
					return this.origin_departures_delay_index;
				}
				
			    public Integer origin_departures_delay_avg;

				public Integer getOrigin_departures_delay_avg () {
					return this.origin_departures_delay_avg;
				}
				
			    public BigDecimal origin_arrivals_today_pct_delayed;

				public BigDecimal getOrigin_arrivals_today_pct_delayed () {
					return this.origin_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal origin_departures_today_pct_delayed;

				public BigDecimal getOrigin_departures_today_pct_delayed () {
					return this.origin_departures_today_pct_delayed;
				}
				
			    public BigDecimal origin_arrivals_today_pct_canceled;

				public BigDecimal getOrigin_arrivals_today_pct_canceled () {
					return this.origin_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal origin_departures_today_pct_canceled;

				public BigDecimal getOrigin_departures_today_pct_canceled () {
					return this.origin_departures_today_pct_canceled;
				}
				
			    public String destination_iata;

				public String getDestination_iata () {
					return this.destination_iata;
				}
				
			    public String destination_icao;

				public String getDestination_icao () {
					return this.destination_icao;
				}
				
			    public String destination_name;

				public String getDestination_name () {
					return this.destination_name;
				}
				
			    public BigDecimal destination_latitude;

				public BigDecimal getDestination_latitude () {
					return this.destination_latitude;
				}
				
			    public BigDecimal destination_longitude;

				public BigDecimal getDestination_longitude () {
					return this.destination_longitude;
				}
				
			    public String destination_country;

				public String getDestination_country () {
					return this.destination_country;
				}
				
			    public String destination_country_code;

				public String getDestination_country_code () {
					return this.destination_country_code;
				}
				
			    public String destination_city;

				public String getDestination_city () {
					return this.destination_city;
				}
				
			    public String destination_timezone;

				public String getDestination_timezone () {
					return this.destination_timezone;
				}
				
			    public Integer destination_timezone_offset;

				public Integer getDestination_timezone_offset () {
					return this.destination_timezone_offset;
				}
				
			    public Boolean destination_visible;

				public Boolean getDestination_visible () {
					return this.destination_visible;
				}
				
			    public BigDecimal destination_avg_rating;

				public BigDecimal getDestination_avg_rating () {
					return this.destination_avg_rating;
				}
				
			    public Integer destination_total_ratings;

				public Integer getDestination_total_ratings () {
					return this.destination_total_ratings;
				}
				
			    public Integer destination_reviews_count;

				public Integer getDestination_reviews_count () {
					return this.destination_reviews_count;
				}
				
			    public Integer destination_evaluation_score;

				public Integer getDestination_evaluation_score () {
					return this.destination_evaluation_score;
				}
				
			    public BigDecimal destination_arrivals_delay_index;

				public BigDecimal getDestination_arrivals_delay_index () {
					return this.destination_arrivals_delay_index;
				}
				
			    public Integer destination_arrivals_delay_avg;

				public Integer getDestination_arrivals_delay_avg () {
					return this.destination_arrivals_delay_avg;
				}
				
			    public BigDecimal destination_departures_delay_index;

				public BigDecimal getDestination_departures_delay_index () {
					return this.destination_departures_delay_index;
				}
				
			    public Integer destination_departures_delay_avg;

				public Integer getDestination_departures_delay_avg () {
					return this.destination_departures_delay_avg;
				}
				
			    public BigDecimal destination_arrivals_today_pct_delayed;

				public BigDecimal getDestination_arrivals_today_pct_delayed () {
					return this.destination_arrivals_today_pct_delayed;
				}
				
			    public BigDecimal destination_departures_today_pct_delayed;

				public BigDecimal getDestination_departures_today_pct_delayed () {
					return this.destination_departures_today_pct_delayed;
				}
				
			    public BigDecimal destination_arrivals_today_pct_canceled;

				public BigDecimal getDestination_arrivals_today_pct_canceled () {
					return this.destination_arrivals_today_pct_canceled;
				}
				
			    public BigDecimal destination_departures_today_pct_canceled;

				public BigDecimal getDestination_departures_today_pct_canceled () {
					return this.destination_departures_today_pct_canceled;
				}
				
			    public Long scheduled_departure;

				public Long getScheduled_departure () {
					return this.scheduled_departure;
				}
				
			    public Long scheduled_arrival;

				public Long getScheduled_arrival () {
					return this.scheduled_arrival;
				}
				
			    public Long real_departure;

				public Long getReal_departure () {
					return this.real_departure;
				}
				
			    public Long real_arrival;

				public Long getReal_arrival () {
					return this.real_arrival;
				}
				
			    public Long estimated_departure;

				public Long getEstimated_departure () {
					return this.estimated_departure;
				}
				
			    public Long estimated_arrival;

				public Long getEstimated_arrival () {
					return this.estimated_arrival;
				}
				
			    public String flight_type;

				public String getFlight_type () {
					return this.flight_type;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.flight_number == null) {
							if (other.flight_number != null)
								return false;
						
						} else if (!this.flight_number.equals(other.flight_number))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.flight_number = this.flight_number;
	            other.flight_alternative = this.flight_alternative;
	            other.status_text = this.status_text;
	            other.status_live = this.status_live;
	            other.status_color = this.status_color;
	            other.aircraft_code = this.aircraft_code;
	            other.aircraft_text = this.aircraft_text;
	            other.aircraft_hex = this.aircraft_hex;
	            other.aircraft_registration = this.aircraft_registration;
	            other.airline_name = this.airline_name;
	            other.airline_iata = this.airline_iata;
	            other.airline_icao = this.airline_icao;
	            other.airline_short = this.airline_short;
	            other.origin_iata = this.origin_iata;
	            other.origin_icao = this.origin_icao;
	            other.origin_name = this.origin_name;
	            other.origin_latitude = this.origin_latitude;
	            other.origin_longitude = this.origin_longitude;
	            other.origin_country = this.origin_country;
	            other.origin_country_code = this.origin_country_code;
	            other.origin_city = this.origin_city;
	            other.origin_timezone = this.origin_timezone;
	            other.origin_timezone_offset = this.origin_timezone_offset;
	            other.origin_avg_rating = this.origin_avg_rating;
	            other.origin_total_ratings = this.origin_total_ratings;
	            other.origin_reviews_count = this.origin_reviews_count;
	            other.origin_evaluation_score = this.origin_evaluation_score;
	            other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
	            other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
	            other.origin_departures_delay_index = this.origin_departures_delay_index;
	            other.origin_departures_delay_avg = this.origin_departures_delay_avg;
	            other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
	            other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
	            other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
	            other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
	            other.destination_iata = this.destination_iata;
	            other.destination_icao = this.destination_icao;
	            other.destination_name = this.destination_name;
	            other.destination_latitude = this.destination_latitude;
	            other.destination_longitude = this.destination_longitude;
	            other.destination_country = this.destination_country;
	            other.destination_country_code = this.destination_country_code;
	            other.destination_city = this.destination_city;
	            other.destination_timezone = this.destination_timezone;
	            other.destination_timezone_offset = this.destination_timezone_offset;
	            other.destination_visible = this.destination_visible;
	            other.destination_avg_rating = this.destination_avg_rating;
	            other.destination_total_ratings = this.destination_total_ratings;
	            other.destination_reviews_count = this.destination_reviews_count;
	            other.destination_evaluation_score = this.destination_evaluation_score;
	            other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
	            other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
	            other.destination_departures_delay_index = this.destination_departures_delay_index;
	            other.destination_departures_delay_avg = this.destination_departures_delay_avg;
	            other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
	            other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
	            other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
	            other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
	            other.scheduled_departure = this.scheduled_departure;
	            other.scheduled_arrival = this.scheduled_arrival;
	            other.real_departure = this.real_departure;
	            other.real_arrival = this.real_arrival;
	            other.estimated_departure = this.estimated_departure;
	            other.estimated_arrival = this.estimated_arrival;
	            other.flight_type = this.flight_type;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.flight_number = this.flight_number;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
					this.flight_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.flight_number = readString(dis);
					
					this.flight_alternative = readString(dis);
					
					this.status_text = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.status_live = null;
           				} else {
           			    	this.status_live = dis.readBoolean();
           				}
					
					this.status_color = readString(dis);
					
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
					this.airline_name = readString(dis);
					
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
					this.airline_short = readString(dis);
					
					this.origin_iata = readString(dis);
					
					this.origin_icao = readString(dis);
					
					this.origin_name = readString(dis);
					
						this.origin_latitude = (BigDecimal) dis.readObject();
					
						this.origin_longitude = (BigDecimal) dis.readObject();
					
					this.origin_country = readString(dis);
					
					this.origin_country_code = readString(dis);
					
					this.origin_city = readString(dis);
					
					this.origin_timezone = readString(dis);
					
						this.origin_timezone_offset = readInteger(dis);
					
						this.origin_avg_rating = (BigDecimal) dis.readObject();
					
						this.origin_total_ratings = readInteger(dis);
					
						this.origin_reviews_count = readInteger(dis);
					
						this.origin_evaluation_score = readInteger(dis);
					
						this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_delay_avg = readInteger(dis);
					
						this.origin_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.origin_departures_delay_avg = readInteger(dis);
					
						this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
					this.destination_iata = readString(dis);
					
					this.destination_icao = readString(dis);
					
					this.destination_name = readString(dis);
					
						this.destination_latitude = (BigDecimal) dis.readObject();
					
						this.destination_longitude = (BigDecimal) dis.readObject();
					
					this.destination_country = readString(dis);
					
					this.destination_country_code = readString(dis);
					
					this.destination_city = readString(dis);
					
					this.destination_timezone = readString(dis);
					
						this.destination_timezone_offset = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.destination_visible = null;
           				} else {
           			    	this.destination_visible = dis.readBoolean();
           				}
					
						this.destination_avg_rating = (BigDecimal) dis.readObject();
					
						this.destination_total_ratings = readInteger(dis);
					
						this.destination_reviews_count = readInteger(dis);
					
						this.destination_evaluation_score = readInteger(dis);
					
						this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_delay_avg = readInteger(dis);
					
						this.destination_departures_delay_index = (BigDecimal) dis.readObject();
					
						this.destination_departures_delay_avg = readInteger(dis);
					
						this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();
					
						this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();
					
						this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_departure = null;
           				} else {
           			    	this.scheduled_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.scheduled_arrival = null;
           				} else {
           			    	this.scheduled_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_departure = null;
           				} else {
           			    	this.real_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.real_arrival = null;
           				} else {
           			    	this.real_arrival = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_departure = null;
           				} else {
           			    	this.estimated_departure = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.estimated_arrival = null;
           				} else {
           			    	this.estimated_arrival = dis.readLong();
           				}
					
					this.flight_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
					// String
				
						writeString(this.flight_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flight_number,dos);
					
					// String
				
						writeString(this.flight_alternative,dos);
					
					// String
				
						writeString(this.status_text,dos);
					
					// Boolean
				
						if(this.status_live == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.status_live);
		            	}
					
					// String
				
						writeString(this.status_color,dos);
					
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
					// String
				
						writeString(this.airline_name,dos);
					
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
					// String
				
						writeString(this.airline_short,dos);
					
					// String
				
						writeString(this.origin_iata,dos);
					
					// String
				
						writeString(this.origin_icao,dos);
					
					// String
				
						writeString(this.origin_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_longitude);
					
					// String
				
						writeString(this.origin_country,dos);
					
					// String
				
						writeString(this.origin_country_code,dos);
					
					// String
				
						writeString(this.origin_city,dos);
					
					// String
				
						writeString(this.origin_timezone,dos);
					
					// Integer
				
						writeInteger(this.origin_timezone_offset,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_avg_rating);
					
					// Integer
				
						writeInteger(this.origin_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.origin_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.origin_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.origin_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_delay_index);
					
					// Integer
				
						writeInteger(this.origin_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.origin_departures_today_pct_canceled);
					
					// String
				
						writeString(this.destination_iata,dos);
					
					// String
				
						writeString(this.destination_icao,dos);
					
					// String
				
						writeString(this.destination_name,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_latitude);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_longitude);
					
					// String
				
						writeString(this.destination_country,dos);
					
					// String
				
						writeString(this.destination_country_code,dos);
					
					// String
				
						writeString(this.destination_city,dos);
					
					// String
				
						writeString(this.destination_timezone,dos);
					
					// Integer
				
						writeInteger(this.destination_timezone_offset,dos);
					
					// Boolean
				
						if(this.destination_visible == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.destination_visible);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_avg_rating);
					
					// Integer
				
						writeInteger(this.destination_total_ratings,dos);
					
					// Integer
				
						writeInteger(this.destination_reviews_count,dos);
					
					// Integer
				
						writeInteger(this.destination_evaluation_score,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_delay_index);
					
					// Integer
				
						writeInteger(this.destination_arrivals_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_delay_index);
					
					// Integer
				
						writeInteger(this.destination_departures_delay_avg,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_delayed);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_arrivals_today_pct_canceled);
					
					// BigDecimal
				
       			    	dos.writeObject(this.destination_departures_today_pct_canceled);
					
					// Long
				
						if(this.scheduled_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_departure);
		            	}
					
					// Long
				
						if(this.scheduled_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.scheduled_arrival);
		            	}
					
					// Long
				
						if(this.real_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_departure);
		            	}
					
					// Long
				
						if(this.real_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.real_arrival);
		            	}
					
					// Long
				
						if(this.estimated_departure == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_departure);
		            	}
					
					// Long
				
						if(this.estimated_arrival == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.estimated_arrival);
		            	}
					
					// String
				
						writeString(this.flight_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("flight_number="+flight_number);
		sb.append(",flight_alternative="+flight_alternative);
		sb.append(",status_text="+status_text);
		sb.append(",status_live="+String.valueOf(status_live));
		sb.append(",status_color="+status_color);
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_short="+airline_short);
		sb.append(",origin_iata="+origin_iata);
		sb.append(",origin_icao="+origin_icao);
		sb.append(",origin_name="+origin_name);
		sb.append(",origin_latitude="+String.valueOf(origin_latitude));
		sb.append(",origin_longitude="+String.valueOf(origin_longitude));
		sb.append(",origin_country="+origin_country);
		sb.append(",origin_country_code="+origin_country_code);
		sb.append(",origin_city="+origin_city);
		sb.append(",origin_timezone="+origin_timezone);
		sb.append(",origin_timezone_offset="+String.valueOf(origin_timezone_offset));
		sb.append(",origin_avg_rating="+String.valueOf(origin_avg_rating));
		sb.append(",origin_total_ratings="+String.valueOf(origin_total_ratings));
		sb.append(",origin_reviews_count="+String.valueOf(origin_reviews_count));
		sb.append(",origin_evaluation_score="+String.valueOf(origin_evaluation_score));
		sb.append(",origin_arrivals_delay_index="+String.valueOf(origin_arrivals_delay_index));
		sb.append(",origin_arrivals_delay_avg="+String.valueOf(origin_arrivals_delay_avg));
		sb.append(",origin_departures_delay_index="+String.valueOf(origin_departures_delay_index));
		sb.append(",origin_departures_delay_avg="+String.valueOf(origin_departures_delay_avg));
		sb.append(",origin_arrivals_today_pct_delayed="+String.valueOf(origin_arrivals_today_pct_delayed));
		sb.append(",origin_departures_today_pct_delayed="+String.valueOf(origin_departures_today_pct_delayed));
		sb.append(",origin_arrivals_today_pct_canceled="+String.valueOf(origin_arrivals_today_pct_canceled));
		sb.append(",origin_departures_today_pct_canceled="+String.valueOf(origin_departures_today_pct_canceled));
		sb.append(",destination_iata="+destination_iata);
		sb.append(",destination_icao="+destination_icao);
		sb.append(",destination_name="+destination_name);
		sb.append(",destination_latitude="+String.valueOf(destination_latitude));
		sb.append(",destination_longitude="+String.valueOf(destination_longitude));
		sb.append(",destination_country="+destination_country);
		sb.append(",destination_country_code="+destination_country_code);
		sb.append(",destination_city="+destination_city);
		sb.append(",destination_timezone="+destination_timezone);
		sb.append(",destination_timezone_offset="+String.valueOf(destination_timezone_offset));
		sb.append(",destination_visible="+String.valueOf(destination_visible));
		sb.append(",destination_avg_rating="+String.valueOf(destination_avg_rating));
		sb.append(",destination_total_ratings="+String.valueOf(destination_total_ratings));
		sb.append(",destination_reviews_count="+String.valueOf(destination_reviews_count));
		sb.append(",destination_evaluation_score="+String.valueOf(destination_evaluation_score));
		sb.append(",destination_arrivals_delay_index="+String.valueOf(destination_arrivals_delay_index));
		sb.append(",destination_arrivals_delay_avg="+String.valueOf(destination_arrivals_delay_avg));
		sb.append(",destination_departures_delay_index="+String.valueOf(destination_departures_delay_index));
		sb.append(",destination_departures_delay_avg="+String.valueOf(destination_departures_delay_avg));
		sb.append(",destination_arrivals_today_pct_delayed="+String.valueOf(destination_arrivals_today_pct_delayed));
		sb.append(",destination_departures_today_pct_delayed="+String.valueOf(destination_departures_today_pct_delayed));
		sb.append(",destination_arrivals_today_pct_canceled="+String.valueOf(destination_arrivals_today_pct_canceled));
		sb.append(",destination_departures_today_pct_canceled="+String.valueOf(destination_departures_today_pct_canceled));
		sb.append(",scheduled_departure="+String.valueOf(scheduled_departure));
		sb.append(",scheduled_arrival="+String.valueOf(scheduled_arrival));
		sb.append(",real_departure="+String.valueOf(real_departure));
		sb.append(",real_arrival="+String.valueOf(real_arrival));
		sb.append(",estimated_departure="+String.valueOf(estimated_departure));
		sb.append(",estimated_arrival="+String.valueOf(estimated_arrival));
		sb.append(",flight_type="+flight_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_16Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_7Process(globalMap);
		tDBInput_17Process(globalMap);

		row1Struct row1 = new row1Struct();
flightsStruct flights = new flightsStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"flights");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 20 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "fact_flights";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		
        String properties_tDBOutput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
            properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBOutput_1;
		
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "root";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:d+p0EDV3NxGvIHuuGjPhT5kR0ryCmN1k7Hlzf6ScMCo=");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
	    String update_tDBOutput_1 = "UPDATE `" + "fact_flights" + "` SET `flight_alternative` = ?,`origin_airport_iata` = ?,`destination_airport_iata` = ?,`airline_iata` = ?,`aircraft_key` = ?,`status_key` = ?,`departure_date_key` = ?,`arrival_date_key` = ?,`scheduled_departure` = ?,`scheduled_arrival` = ?,`real_departure` = ?,`real_arrival` = ?,`estimated_departure` = ?,`estimated_arrival` = ?,`scheduled_flight_duration_minutes` = ?,`actual_flight_duration_minutes` = ?,`departure_delay_minutes` = ?,`arrival_delay_minutes` = ?,`flight_type` = ? WHERE `flight_number` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO `" + "fact_flights" + "` (`flight_number`,`flight_alternative`,`origin_airport_iata`,`destination_airport_iata`,`airline_iata`,`aircraft_key`,`status_key`,`departure_date_key`,`arrival_date_key`,`scheduled_departure`,`scheduled_arrival`,`real_departure`,`real_arrival`,`estimated_departure`,`estimated_arrival`,`scheduled_flight_duration_minutes`,`actual_flight_duration_minutes`,`departure_delay_minutes`,`arrival_delay_minutes`,`flight_type`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	         
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<origin_airport1Struct> tHash_Lookup_origin_airport1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<origin_airport1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<origin_airport1Struct>) 
					globalMap.get( "tHash_Lookup_origin_airport1" ))
					;					
					
	

origin_airport1Struct origin_airport1HashKey = new origin_airport1Struct();
origin_airport1Struct origin_airport1Default = new origin_airport1Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<airlines1Struct> tHash_Lookup_airlines1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<airlines1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<airlines1Struct>) 
					globalMap.get( "tHash_Lookup_airlines1" ))
					;					
					
	

airlines1Struct airlines1HashKey = new airlines1Struct();
airlines1Struct airlines1Default = new airlines1Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<aircrafts1Struct> tHash_Lookup_aircrafts1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<aircrafts1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<aircrafts1Struct>) 
					globalMap.get( "tHash_Lookup_aircrafts1" ))
					;					
					
	

aircrafts1Struct aircrafts1HashKey = new aircrafts1Struct();
aircrafts1Struct aircrafts1Default = new aircrafts1Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<status1Struct> tHash_Lookup_status1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<status1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<status1Struct>) 
					globalMap.get( "tHash_Lookup_status1" ))
					;					
					
	

status1Struct status1HashKey = new status1Struct();
status1Struct status1Default = new status1Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<destination_airport1Struct> tHash_Lookup_destination_airport1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<destination_airport1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<destination_airport1Struct>) 
					globalMap.get( "tHash_Lookup_destination_airport1" ))
					;					
					
	

destination_airport1Struct destination_airport1HashKey = new destination_airport1Struct();
destination_airport1Struct destination_airport1Default = new destination_airport1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	long real_departure;
	long real_arrival;
	long scheduled_departure;
	long scheduled_arrival;
	long estimated_departure;
	long estimated_arrival;
	int scheduled_flight_duration_minutes;
	int actual_flight_duration_minutes;
	int departure_delay_minutes;
	int arrival_delay_minutes;
	int departure_date_key;
	int arrival_date_key;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
flightsStruct flights_tmp = new flightsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:jq0j/iowWF91bTwz7mvwib2r2SulfaMD8qp9ZHbQKUI=");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
        String properties_tDBInput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_1 == null || properties_tDBInput_1.trim().length() == 0) {
            properties_tDBInput_1 = "";
        }
        String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBInput_1;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `raw_flights`.`flight_number`, \n  `raw_flights`.`flight_alternative`, \n  `raw_flights`.`status_text`, \n  `raw"
+"_flights`.`status_live`, \n  `raw_flights`.`status_color`, \n  `raw_flights`.`aircraft_code`, \n  `raw_flights`.`aircraft_t"
+"ext`, \n  `raw_flights`.`aircraft_hex`, \n  `raw_flights`.`aircraft_registration`, \n  `raw_flights`.`airline_name`, \n  `ra"
+"w_flights`.`airline_iata`, \n  `raw_flights`.`airline_icao`, \n  `raw_flights`.`airline_short`, \n  `raw_flights`.`origin_i"
+"ata`, \n  `raw_flights`.`origin_icao`, \n  `raw_flights`.`origin_name`, \n  `raw_flights`.`origin_latitude`, \n  `raw_flight"
+"s`.`origin_longitude`, \n  `raw_flights`.`origin_country`, \n  `raw_flights`.`origin_country_code`, \n  `raw_flights`.`orig"
+"in_city`, \n  `raw_flights`.`origin_timezone`, \n  `raw_flights`.`origin_timezone_offset`, \n  `raw_flights`.`origin_avg_ra"
+"ting`, \n  `raw_flights`.`origin_total_ratings`, \n  `raw_flights`.`origin_reviews_count`, \n  `raw_flights`.`origin_evalua"
+"tion_score`, \n  `raw_flights`.`origin_arrivals_delay_index`, \n  `raw_flights`.`origin_arrivals_delay_avg`, \n  `raw_fligh"
+"ts`.`origin_departures_delay_index`, \n  `raw_flights`.`origin_departures_delay_avg`, \n  `raw_flights`.`origin_arrivals_t"
+"oday_pct_delayed`, \n  `raw_flights`.`origin_departures_today_pct_delayed`, \n  `raw_flights`.`origin_arrivals_today_pct_c"
+"anceled`, \n  `raw_flights`.`origin_departures_today_pct_canceled`, \n  `raw_flights`.`destination_iata`, \n  `raw_flights`"
+".`destination_icao`, \n  `raw_flights`.`destination_name`, \n  `raw_flights`.`destination_latitude`, \n  `raw_flights`.`des"
+"tination_longitude`, \n  `raw_flights`.`destination_country`, \n  `raw_flights`.`destination_country_code`, \n  `raw_flight"
+"s`.`destination_city`, \n  `raw_flights`.`destination_timezone`, \n  `raw_flights`.`destination_timezone_offset`, \n  `raw_"
+"flights`.`destination_visible`, \n  `raw_flights`.`destination_avg_rating`, \n  `raw_flights`.`destination_total_ratings`,"
+" \n  `raw_flights`.`destination_reviews_count`, \n  `raw_flights`.`destination_evaluation_score`, \n  `raw_flights`.`destin"
+"ation_arrivals_delay_index`, \n  `raw_flights`.`destination_arrivals_delay_avg`, \n  `raw_flights`.`destination_departures"
+"_delay_index`, \n  `raw_flights`.`destination_departures_delay_avg`, \n  `raw_flights`.`destination_arrivals_today_pct_del"
+"ayed`, \n  `raw_flights`.`destination_departures_today_pct_delayed`, \n  `raw_flights`.`destination_arrivals_today_pct_can"
+"celed`, \n  `raw_flights`.`destination_departures_today_pct_canceled`, \n  `raw_flights`.`scheduled_departure`, \n  `raw_fl"
+"ights`.`scheduled_arrival`, \n  `raw_flights`.`real_departure`, \n  `raw_flights`.`real_arrival`, \n  `raw_flights`.`estima"
+"ted_departure`, \n  `raw_flights`.`estimated_arrival`,\n `raw_flights`.`type`\nFROM `raw_flights`";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.flight_number = null;
							} else {
	                         		
        	row1.flight_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.flight_alternative = null;
							} else {
	                         		
        	row1.flight_alternative = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.status_text = null;
							} else {
	                         		
        	row1.status_text = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.status_live = null;
							} else {
	                         		
            row1.status_live = rs_tDBInput_1.getBoolean(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.status_live = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.status_color = null;
							} else {
	                         		
        	row1.status_color = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.aircraft_code = null;
							} else {
	                         		
        	row1.aircraft_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.aircraft_text = null;
							} else {
	                         		
        	row1.aircraft_text = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.aircraft_hex = null;
							} else {
	                         		
        	row1.aircraft_hex = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.aircraft_registration = null;
							} else {
	                         		
        	row1.aircraft_registration = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.airline_name = null;
							} else {
	                         		
        	row1.airline_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.airline_iata = null;
							} else {
	                         		
        	row1.airline_iata = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.airline_icao = null;
							} else {
	                         		
        	row1.airline_icao = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.airline_short = null;
							} else {
	                         		
        	row1.airline_short = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.origin_iata = null;
							} else {
	                         		
        	row1.origin_iata = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.origin_icao = null;
							} else {
	                         		
        	row1.origin_icao = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.origin_name = null;
							} else {
	                         		
        	row1.origin_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.origin_latitude = null;
							} else {
		                          
            row1.origin_latitude = rs_tDBInput_1.getBigDecimal(17);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.origin_longitude = null;
							} else {
		                          
            row1.origin_longitude = rs_tDBInput_1.getBigDecimal(18);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.origin_country = null;
							} else {
	                         		
        	row1.origin_country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.origin_country_code = null;
							} else {
	                         		
        	row1.origin_country_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.origin_city = null;
							} else {
	                         		
        	row1.origin_city = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.origin_timezone = null;
							} else {
	                         		
        	row1.origin_timezone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.origin_timezone_offset = null;
							} else {
		                          
            row1.origin_timezone_offset = rs_tDBInput_1.getInt(23);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_timezone_offset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.origin_avg_rating = null;
							} else {
		                          
            row1.origin_avg_rating = rs_tDBInput_1.getBigDecimal(24);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_avg_rating = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.origin_total_ratings = null;
							} else {
		                          
            row1.origin_total_ratings = rs_tDBInput_1.getInt(25);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_total_ratings = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.origin_reviews_count = null;
							} else {
		                          
            row1.origin_reviews_count = rs_tDBInput_1.getInt(26);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_reviews_count = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.origin_evaluation_score = null;
							} else {
		                          
            row1.origin_evaluation_score = rs_tDBInput_1.getInt(27);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_evaluation_score = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.origin_arrivals_delay_index = null;
							} else {
		                          
            row1.origin_arrivals_delay_index = rs_tDBInput_1.getBigDecimal(28);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_arrivals_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.origin_arrivals_delay_avg = null;
							} else {
		                          
            row1.origin_arrivals_delay_avg = rs_tDBInput_1.getInt(29);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_arrivals_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.origin_departures_delay_index = null;
							} else {
		                          
            row1.origin_departures_delay_index = rs_tDBInput_1.getBigDecimal(30);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_departures_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.origin_departures_delay_avg = null;
							} else {
		                          
            row1.origin_departures_delay_avg = rs_tDBInput_1.getInt(31);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_departures_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.origin_arrivals_today_pct_delayed = null;
							} else {
		                          
            row1.origin_arrivals_today_pct_delayed = rs_tDBInput_1.getBigDecimal(32);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_arrivals_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.origin_departures_today_pct_delayed = null;
							} else {
		                          
            row1.origin_departures_today_pct_delayed = rs_tDBInput_1.getBigDecimal(33);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_departures_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.origin_arrivals_today_pct_canceled = null;
							} else {
		                          
            row1.origin_arrivals_today_pct_canceled = rs_tDBInput_1.getBigDecimal(34);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_arrivals_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.origin_departures_today_pct_canceled = null;
							} else {
		                          
            row1.origin_departures_today_pct_canceled = rs_tDBInput_1.getBigDecimal(35);
            if(rs_tDBInput_1.wasNull()){
                    row1.origin_departures_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.destination_iata = null;
							} else {
	                         		
        	row1.destination_iata = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.destination_icao = null;
							} else {
	                         		
        	row1.destination_icao = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.destination_name = null;
							} else {
	                         		
        	row1.destination_name = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.destination_latitude = null;
							} else {
		                          
            row1.destination_latitude = rs_tDBInput_1.getBigDecimal(39);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.destination_longitude = null;
							} else {
		                          
            row1.destination_longitude = rs_tDBInput_1.getBigDecimal(40);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.destination_country = null;
							} else {
	                         		
        	row1.destination_country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.destination_country_code = null;
							} else {
	                         		
        	row1.destination_country_code = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.destination_city = null;
							} else {
	                         		
        	row1.destination_city = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.destination_timezone = null;
							} else {
	                         		
        	row1.destination_timezone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.destination_timezone_offset = null;
							} else {
		                          
            row1.destination_timezone_offset = rs_tDBInput_1.getInt(45);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_timezone_offset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.destination_visible = null;
							} else {
	                         		
            row1.destination_visible = rs_tDBInput_1.getBoolean(46);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_visible = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.destination_avg_rating = null;
							} else {
		                          
            row1.destination_avg_rating = rs_tDBInput_1.getBigDecimal(47);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_avg_rating = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.destination_total_ratings = null;
							} else {
		                          
            row1.destination_total_ratings = rs_tDBInput_1.getInt(48);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_total_ratings = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.destination_reviews_count = null;
							} else {
		                          
            row1.destination_reviews_count = rs_tDBInput_1.getInt(49);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_reviews_count = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.destination_evaluation_score = null;
							} else {
		                          
            row1.destination_evaluation_score = rs_tDBInput_1.getInt(50);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_evaluation_score = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.destination_arrivals_delay_index = null;
							} else {
		                          
            row1.destination_arrivals_delay_index = rs_tDBInput_1.getBigDecimal(51);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_arrivals_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.destination_arrivals_delay_avg = null;
							} else {
		                          
            row1.destination_arrivals_delay_avg = rs_tDBInput_1.getInt(52);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_arrivals_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.destination_departures_delay_index = null;
							} else {
		                          
            row1.destination_departures_delay_index = rs_tDBInput_1.getBigDecimal(53);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_departures_delay_index = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.destination_departures_delay_avg = null;
							} else {
		                          
            row1.destination_departures_delay_avg = rs_tDBInput_1.getInt(54);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_departures_delay_avg = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.destination_arrivals_today_pct_delayed = null;
							} else {
		                          
            row1.destination_arrivals_today_pct_delayed = rs_tDBInput_1.getBigDecimal(55);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_arrivals_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.destination_departures_today_pct_delayed = null;
							} else {
		                          
            row1.destination_departures_today_pct_delayed = rs_tDBInput_1.getBigDecimal(56);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_departures_today_pct_delayed = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.destination_arrivals_today_pct_canceled = null;
							} else {
		                          
            row1.destination_arrivals_today_pct_canceled = rs_tDBInput_1.getBigDecimal(57);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_arrivals_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.destination_departures_today_pct_canceled = null;
							} else {
		                          
            row1.destination_departures_today_pct_canceled = rs_tDBInput_1.getBigDecimal(58);
            if(rs_tDBInput_1.wasNull()){
                    row1.destination_departures_today_pct_canceled = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.scheduled_departure = null;
							} else {
		                          
            row1.scheduled_departure = rs_tDBInput_1.getLong(59);
            if(rs_tDBInput_1.wasNull()){
                    row1.scheduled_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.scheduled_arrival = null;
							} else {
		                          
            row1.scheduled_arrival = rs_tDBInput_1.getLong(60);
            if(rs_tDBInput_1.wasNull()){
                    row1.scheduled_arrival = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.real_departure = null;
							} else {
		                          
            row1.real_departure = rs_tDBInput_1.getLong(61);
            if(rs_tDBInput_1.wasNull()){
                    row1.real_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.real_arrival = null;
							} else {
		                          
            row1.real_arrival = rs_tDBInput_1.getLong(62);
            if(rs_tDBInput_1.wasNull()){
                    row1.real_arrival = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.estimated_departure = null;
							} else {
		                          
            row1.estimated_departure = rs_tDBInput_1.getLong(63);
            if(rs_tDBInput_1.wasNull()){
                    row1.estimated_departure = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.estimated_arrival = null;
							} else {
		                          
            row1.estimated_arrival = rs_tDBInput_1.getLong(64);
            if(rs_tDBInput_1.wasNull()){
                    row1.estimated_arrival = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.flight_type = null;
							} else {
	                         		
        	row1.flight_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 65, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "origin_airport1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooporigin_airport1 = false;
       		  	    	
       		  	    	
 							origin_airport1Struct origin_airport1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    origin_airport1HashKey.airport_iata = row1.origin_iata ;
                        		    		
                        		    		    origin_airport1HashKey.airport_icao = row1.origin_icao ;
                        		    		

								
		                        	origin_airport1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_origin_airport1.lookup( origin_airport1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_origin_airport1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_origin_airport1 != null && tHash_Lookup_origin_airport1.getCount(origin_airport1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'origin_airport1' and it contains more one result from keys :  origin_airport1.airport_iata = '" + origin_airport1HashKey.airport_iata + "', origin_airport1.airport_icao = '" + origin_airport1HashKey.airport_icao + "'");
								} // G 071
							

							origin_airport1Struct origin_airport1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	origin_airport1Struct fromLookup_origin_airport1 = null;
							origin_airport1 = origin_airport1Default;
										 
							
								 
							
							
								if (tHash_Lookup_origin_airport1 !=null && tHash_Lookup_origin_airport1.hasNext()) { // G 099
								
							
								
								fromLookup_origin_airport1 = tHash_Lookup_origin_airport1.next();

							
							
								} // G 099
							
							

							if(fromLookup_origin_airport1 != null) {
								origin_airport1 = fromLookup_origin_airport1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "airlines1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopairlines1 = false;
       		  	    	
       		  	    	
 							airlines1Struct airlines1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    airlines1HashKey.airline_iata = row1.airline_iata ;
                        		    		
                        		    		    airlines1HashKey.airline_icao = row1.airline_icao ;
                        		    		

								
		                        	airlines1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_airlines1.lookup( airlines1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_airlines1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_airlines1 != null && tHash_Lookup_airlines1.getCount(airlines1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'airlines1' and it contains more one result from keys :  airlines1.airline_iata = '" + airlines1HashKey.airline_iata + "', airlines1.airline_icao = '" + airlines1HashKey.airline_icao + "'");
								} // G 071
							

							airlines1Struct airlines1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	airlines1Struct fromLookup_airlines1 = null;
							airlines1 = airlines1Default;
										 
							
								 
							
							
								if (tHash_Lookup_airlines1 !=null && tHash_Lookup_airlines1.hasNext()) { // G 099
								
							
								
								fromLookup_airlines1 = tHash_Lookup_airlines1.next();

							
							
								} // G 099
							
							

							if(fromLookup_airlines1 != null) {
								airlines1 = fromLookup_airlines1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "aircrafts1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopaircrafts1 = false;
       		  	    	
       		  	    	
 							aircrafts1Struct aircrafts1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    aircrafts1HashKey.aircraft_code = row1.aircraft_code ;
                        		    		
                        		    		    aircrafts1HashKey.aircraft_text = (row1.aircraft_text != null && !row1.aircraft_text.trim().isEmpty())
  ? row1.aircraft_text.trim()
  : "unknown" ;
                        		    		
                        		    		    aircrafts1HashKey.aircraft_hex = (row1.aircraft_hex != null && !row1.aircraft_hex.trim().isEmpty())
  ? row1.aircraft_hex.trim()
  : "unknown" ;
                        		    		
                        		    		    aircrafts1HashKey.aircraft_registration = (row1.aircraft_registration != null && !row1.aircraft_registration.trim().isEmpty())
  ? row1.aircraft_registration.trim()
  : "unknown" ;
                        		    		

								
		                        	aircrafts1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_aircrafts1.lookup( aircrafts1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_aircrafts1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_aircrafts1 != null && tHash_Lookup_aircrafts1.getCount(aircrafts1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'aircrafts1' and it contains more one result from keys :  aircrafts1.aircraft_code = '" + aircrafts1HashKey.aircraft_code + "', aircrafts1.aircraft_text = '" + aircrafts1HashKey.aircraft_text + "', aircrafts1.aircraft_hex = '" + aircrafts1HashKey.aircraft_hex + "', aircrafts1.aircraft_registration = '" + aircrafts1HashKey.aircraft_registration + "'");
								} // G 071
							

							aircrafts1Struct aircrafts1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	aircrafts1Struct fromLookup_aircrafts1 = null;
							aircrafts1 = aircrafts1Default;
										 
							
								 
							
							
								if (tHash_Lookup_aircrafts1 !=null && tHash_Lookup_aircrafts1.hasNext()) { // G 099
								
							
								
								fromLookup_aircrafts1 = tHash_Lookup_aircrafts1.next();

							
							
								} // G 099
							
							

							if(fromLookup_aircrafts1 != null) {
								aircrafts1 = fromLookup_aircrafts1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "status1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopstatus1 = false;
       		  	    	
       		  	    	
 							status1Struct status1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    status1HashKey.status_code = (row1.status_text != null && row1.status_text.toLowerCase().contains("cancel"))  ? "CANCELLED" :
(row1.status_text != null && row1.status_text.toLowerCase().contains("landed"))  ? "LANDED" :
(row1.status_text != null && row1.status_text.toLowerCase().startsWith("delayed")) ?  "DELAYED" :
(row1.status_text != null && row1.status_text.toLowerCase().startsWith("estimated")) ?  "EN ROUTE" :
(row1.status_text != null && row1.status_text.toLowerCase().startsWith("scheduled")) ? "SCHEDULED" :
"UNREPORTED" ;
                        		    		

								
		                        	status1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_status1.lookup( status1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_status1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_status1 != null && tHash_Lookup_status1.getCount(status1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'status1' and it contains more one result from keys :  status1.status_code = '" + status1HashKey.status_code + "'");
								} // G 071
							

							status1Struct status1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	status1Struct fromLookup_status1 = null;
							status1 = status1Default;
										 
							
								 
							
							
								if (tHash_Lookup_status1 !=null && tHash_Lookup_status1.hasNext()) { // G 099
								
							
								
								fromLookup_status1 = tHash_Lookup_status1.next();

							
							
								} // G 099
							
							

							if(fromLookup_status1 != null) {
								status1 = fromLookup_status1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "destination_airport1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopdestination_airport1 = false;
       		  	    	
       		  	    	
 							destination_airport1Struct destination_airport1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    destination_airport1HashKey.airport_iata = row1.destination_iata ;
                        		    		
                        		    		    destination_airport1HashKey.airport_icao = row1.destination_icao ;
                        		    		

								
		                        	destination_airport1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_destination_airport1.lookup( destination_airport1HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_destination_airport1.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_destination_airport1 != null && tHash_Lookup_destination_airport1.getCount(destination_airport1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'destination_airport1' and it contains more one result from keys :  destination_airport1.airport_iata = '" + destination_airport1HashKey.airport_iata + "', destination_airport1.airport_icao = '" + destination_airport1HashKey.airport_icao + "'");
								} // G 071
							

							destination_airport1Struct destination_airport1 = null;
                    		  	 
							   
                    		  	 
	       		  	    	destination_airport1Struct fromLookup_destination_airport1 = null;
							destination_airport1 = destination_airport1Default;
										 
							
								 
							
							
								if (tHash_Lookup_destination_airport1 !=null && tHash_Lookup_destination_airport1.hasNext()) { // G 099
								
							
								
								fromLookup_destination_airport1 = tHash_Lookup_destination_airport1.next();

							
							
								} // G 099
							
							

							if(fromLookup_destination_airport1 != null) {
								destination_airport1 = fromLookup_destination_airport1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.real_departure = row1.real_departure != null ? 
Integer.valueOf(TalendDate.formatDate("yyyyMMddmm", new Date(row1.real_departure * 1000L))) : 0 ;
Var.real_arrival = row1.real_arrival != null ? 
Integer.valueOf(TalendDate.formatDate("yyyyMMddmm", new Date(row1.real_arrival * 1000L))) : 0 ;
Var.scheduled_departure = row1.scheduled_departure != null ? 
Integer.valueOf(TalendDate.formatDate("yyyyMMddmm", new Date(row1.scheduled_departure * 1000L))) : 0 ;
Var.scheduled_arrival = row1.scheduled_arrival != null ? 
Integer.valueOf(TalendDate.formatDate("yyyyMMddmm", new Date(row1.scheduled_arrival * 1000L))) : 0 ;
Var.estimated_departure = row1.estimated_departure != null ? 
Integer.valueOf(TalendDate.formatDate("yyyyMMddmm", new Date(row1.estimated_departure * 1000L))) : 0 ;
Var.estimated_arrival = row1.estimated_arrival != null ? 
Integer.valueOf(TalendDate.formatDate("yyyyMMddmm", new Date(row1.estimated_arrival * 1000L))) : 0 ;
Var.scheduled_flight_duration_minutes = Var.scheduled_arrival > 0 && Var.scheduled_departure > 0 ? (int)((row1.scheduled_arrival - row1.scheduled_departure) / 60) : 0 ;
Var.actual_flight_duration_minutes = Var.real_arrival > 0 & Var.real_departure > 0 ? (int)((row1.real_arrival - row1.real_departure) / 60) : 0 ;
Var.departure_delay_minutes = (Var.real_departure > 0 && Var.scheduled_departure > 0) ?
(int)((row1.real_departure - row1.scheduled_departure) / 60) : -1 ;
Var.arrival_delay_minutes = (Var.real_arrival > 0 && row1.scheduled_arrival > 0) ?
(int)((row1.real_arrival - row1.scheduled_arrival) / 60) : -1 ;
Var.departure_date_key = Var.scheduled_departure > 0 ? 
    Integer.valueOf(TalendDate.formatDate("yyyyMMdd", new Date(row1.scheduled_departure * 1000L))) : 
    null ;
Var.arrival_date_key = Var.scheduled_arrival > 0 ? 
    Integer.valueOf(TalendDate.formatDate("yyyyMMdd", new Date(row1.scheduled_arrival * 1000L))) : 
    null ;// ###############################
        // ###############################
        // # Output tables

flights = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'flights'
flights_tmp.flight_number = row1.flight_number ;
flights_tmp.flight_alternative = row1.flight_alternative ;
flights_tmp.origin_airport_key = origin_airport1.airport_iata;
flights_tmp.destination_airport_key = destination_airport1.airport_iata;
flights_tmp.airline_key = airlines1.airline_iata;
flights_tmp.aircraft_key = aircrafts1.aircraft_key ;
flights_tmp.status_key = status1.status_key ;
flights_tmp.departure_date_key = Var.departure_date_key ;
flights_tmp.arrival_date_key = Var.arrival_date_key ;
flights_tmp.scheduled_departure = Var.scheduled_departure ;
flights_tmp.scheduled_arrival = Var.scheduled_arrival ;
flights_tmp.real_departure = Var.real_departure ;
flights_tmp.real_arrival = Var.real_arrival ;
flights_tmp.estimated_departure = Var.estimated_departure ;
flights_tmp.estimated_arrival = Var.estimated_arrival ;
flights_tmp.scheduled_flight_duration_minutes = Var.scheduled_flight_duration_minutes ;
flights_tmp.actual_flight_duration_minutes = Var.actual_flight_duration_minutes ;
flights_tmp.departure_delay_minutes = Var.departure_delay_minutes ;
flights_tmp.arrival_delay_minutes = Var.arrival_delay_minutes ;
flights_tmp.flight_type = row1.flight_type ;
flights = flights_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "flights"
if(flights != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"flights"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
            int updateFlag_tDBOutput_1=0;
                    if(flights.flight_alternative == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, flights.flight_alternative);
}

                    if(flights.origin_airport_key == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, flights.origin_airport_key);
}

                    if(flights.destination_airport_key == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, flights.destination_airport_key);
}

                    if(flights.airline_key == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, flights.airline_key);
}

                    if(flights.aircraft_key == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(5, flights.aircraft_key);
}

                    if(flights.status_key == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(6, flights.status_key);
}

                    if(flights.departure_date_key == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(7, flights.departure_date_key);
}

                    if(flights.arrival_date_key == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(8, flights.arrival_date_key);
}

                    if(flights.scheduled_departure == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(9, flights.scheduled_departure);
}

                    if(flights.scheduled_arrival == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(10, flights.scheduled_arrival);
}

                    if(flights.real_departure == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(11, flights.real_departure);
}

                    if(flights.real_arrival == null) {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(12, flights.real_arrival);
}

                    if(flights.estimated_departure == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(13, flights.estimated_departure);
}

                    if(flights.estimated_arrival == null) {
pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setLong(14, flights.estimated_arrival);
}

                    if(flights.scheduled_flight_duration_minutes == null) {
pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(15, flights.scheduled_flight_duration_minutes);
}

                    if(flights.actual_flight_duration_minutes == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(16, flights.actual_flight_duration_minutes);
}

                    if(flights.departure_delay_minutes == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(17, flights.departure_delay_minutes);
}

                    if(flights.arrival_delay_minutes == null) {
pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(18, flights.arrival_delay_minutes);
}

                    if(flights.flight_type == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(19, flights.flight_type);
}


                    if(flights.flight_number == null) {
pstmtUpdate_tDBOutput_1.setNull(20 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(20 + count_tDBOutput_1, flights.flight_number);
}


            try {
                updateFlag_tDBOutput_1=pstmtUpdate_tDBOutput_1.executeUpdate();
                updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1+updateFlag_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += updateFlag_tDBOutput_1;

            if(updateFlag_tDBOutput_1 == 0) {

                        if(flights.flight_number == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, flights.flight_number);
}

                        if(flights.flight_alternative == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, flights.flight_alternative);
}

                        if(flights.origin_airport_key == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, flights.origin_airport_key);
}

                        if(flights.destination_airport_key == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, flights.destination_airport_key);
}

                        if(flights.airline_key == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, flights.airline_key);
}

                        if(flights.aircraft_key == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(6, flights.aircraft_key);
}

                        if(flights.status_key == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(7, flights.status_key);
}

                        if(flights.departure_date_key == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(8, flights.departure_date_key);
}

                        if(flights.arrival_date_key == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(9, flights.arrival_date_key);
}

                        if(flights.scheduled_departure == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(10, flights.scheduled_departure);
}

                        if(flights.scheduled_arrival == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(11, flights.scheduled_arrival);
}

                        if(flights.real_departure == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(12, flights.real_departure);
}

                        if(flights.real_arrival == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(13, flights.real_arrival);
}

                        if(flights.estimated_departure == null) {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(14, flights.estimated_departure);
}

                        if(flights.estimated_arrival == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setLong(15, flights.estimated_arrival);
}

                        if(flights.scheduled_flight_duration_minutes == null) {
pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(16, flights.scheduled_flight_duration_minutes);
}

                        if(flights.actual_flight_duration_minutes == null) {
pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(17, flights.actual_flight_duration_minutes);
}

                        if(flights.departure_delay_minutes == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(18, flights.departure_delay_minutes);
}

                        if(flights.arrival_delay_minutes == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(19, flights.arrival_delay_minutes);
}

                        if(flights.flight_type == null) {
pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(20, flights.flight_type);
}

                    int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                    insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
                }else{
                    nb_line_tDBOutput_1++;
             }
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    whetherReject_tDBOutput_1 = true;
                        throw(e);
                }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                        rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "flights"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_origin_airport1 != null) {
						tHash_Lookup_origin_airport1.endGet();
					}
					globalMap.remove( "tHash_Lookup_origin_airport1" );

					
					
				
					if(tHash_Lookup_airlines1 != null) {
						tHash_Lookup_airlines1.endGet();
					}
					globalMap.remove( "tHash_Lookup_airlines1" );

					
					
				
					if(tHash_Lookup_aircrafts1 != null) {
						tHash_Lookup_aircrafts1.endGet();
					}
					globalMap.remove( "tHash_Lookup_aircrafts1" );

					
					
				
					if(tHash_Lookup_status1 != null) {
						tHash_Lookup_status1.endGet();
					}
					globalMap.remove( "tHash_Lookup_status1" );

					
					
				
					if(tHash_Lookup_destination_airport1 != null) {
						tHash_Lookup_destination_airport1.endGet();
					}
					globalMap.remove( "tHash_Lookup_destination_airport1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
    	}
    	conn_tDBOutput_1.commit();
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
			rowsToCommitCount_tDBOutput_1 = 0;
    	}
		commitCounter_tDBOutput_1 = 0;
    	
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"flights");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_status1"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_aircrafts1"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_airlines1"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_origin_airport1"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_destination_airport1"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class status1Struct implements routines.system.IPersistableComparableLookupRow<status1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int status_key;

				public int getStatus_key () {
					return this.status_key;
				}
				
			    public String status_code;

				public String getStatus_code () {
					return this.status_code;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.status_code == null) ? 0 : this.status_code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final status1Struct other = (status1Struct) obj;
		
						if (this.status_code == null) {
							if (other.status_code != null)
								return false;
						
						} else if (!this.status_code.equals(other.status_code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(status1Struct other) {

		other.status_key = this.status_key;
	            other.status_code = this.status_code;
	            
	}

	public void copyKeysDataTo(status1Struct other) {

		other.status_code = this.status_code;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.status_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.status_code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.status_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.status_code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.status_key = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.status_key = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.status_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.status_key);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("status_key="+String.valueOf(status_key));
		sb.append(",status_code="+status_code);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(status1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.status_code, other.status_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		status1Struct status1 = new status1Struct();




	
	/**
	 * [tAdvancedHash_status1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_status1", false);
		start_Hash.put("tAdvancedHash_status1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_status1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"status1");
					}
				
		int tos_count_tAdvancedHash_status1 = 0;
		

			   		// connection name:status1
			   		// source node:tDBInput_16 - inputs:(after_tDBInput_1) outputs:(status1,status1) | target node:tAdvancedHash_status1 - inputs:(status1) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,status1,aircrafts1,airlines1,origin_airport1,destination_airport1) outputs:(flights)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_status1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<status1Struct> tHash_Lookup_status1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<status1Struct>getLookup(matchingModeEnum_status1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_status1", tHash_Lookup_status1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_status1 begin ] stop
 */



	
	/**
	 * [tDBInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_16", false);
		start_Hash.put("tDBInput_16", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_16";

	
		int tos_count_tDBInput_16 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_16 = java.util.Calendar.getInstance();
		    calendar_tDBInput_16.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_16 = calendar_tDBInput_16.getTime();
		    int nb_line_tDBInput_16 = 0;
		    java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = "root";
				
				 
	final String decryptedPassword_tDBInput_16 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:b92da+3DiN+ddqDMg4Q5usjOQrIaNaIWLYUySOai5yY=");
				
				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;
				
        String properties_tDBInput_16 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_16 == null || properties_tDBInput_16.trim().length() == 0) {
            properties_tDBInput_16 = "";
        }
        String url_tDBInput_16 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBInput_16;
				
				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16,dbUser_tDBInput_16,dbPwd_tDBInput_16);
		        
		    
			java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

		    String dbquery_tDBInput_16 = "SELECT \n  `dim_status`.`status_key`, \n  `dim_status`.`status_code`\nFROM `dim_status`";
		    

            	globalMap.put("tDBInput_16_QUERY",dbquery_tDBInput_16);
		    java.sql.ResultSet rs_tDBInput_16 = null;

		    try {
		    	rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
		    	int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

		    String tmpContent_tDBInput_16 = null;
		    
		    
		    while (rs_tDBInput_16.next()) {
		        nb_line_tDBInput_16++;
		        
							if(colQtyInRs_tDBInput_16 < 1) {
								status1.status_key = 0;
							} else {
		                          
            status1.status_key = rs_tDBInput_16.getInt(1);
            if(rs_tDBInput_16.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_16 < 2) {
								status1.status_code = null;
							} else {
	                         		
        	status1.status_code = routines.system.JDBCUtil.getString(rs_tDBInput_16, 2, false);
		                    }
					

 



/**
 * [tDBInput_16 begin ] stop
 */
	
	/**
	 * [tDBInput_16 main ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 


	tos_count_tDBInput_16++;

/**
 * [tDBInput_16 main ] stop
 */
	
	/**
	 * [tDBInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_status1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"status1"
						
						);
					}
					


			   
			   

					status1Struct status1_HashRow = new status1Struct();
		   	   	   
				
				status1_HashRow.status_key = status1.status_key;
				
				status1_HashRow.status_code = status1.status_code;
				
			tHash_Lookup_status1.put(status1_HashRow);
			
            




 


	tos_count_tAdvancedHash_status1++;

/**
 * [tAdvancedHash_status1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_status1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status1";

	

 



/**
 * [tAdvancedHash_status1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_status1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status1";

	

 



/**
 * [tAdvancedHash_status1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_16 end ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

	}
}finally{
	if (rs_tDBInput_16 != null) {
		rs_tDBInput_16.close();
	}
	if (stmt_tDBInput_16 != null) {
		stmt_tDBInput_16.close();
	}
		if(conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {
			
			conn_tDBInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_16_NB_LINE",nb_line_tDBInput_16);
		


 

ok_Hash.put("tDBInput_16", true);
end_Hash.put("tDBInput_16", System.currentTimeMillis());




/**
 * [tDBInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_status1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status1";

	

tHash_Lookup_status1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"status1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_status1", true);
end_Hash.put("tAdvancedHash_status1", System.currentTimeMillis());




/**
 * [tAdvancedHash_status1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_16 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_16";

	

 



/**
 * [tDBInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_status1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status1";

	

 



/**
 * [tAdvancedHash_status1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class aircrafts1Struct implements routines.system.IPersistableComparableLookupRow<aircrafts1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer aircraft_key;

				public Integer getAircraft_key () {
					return this.aircraft_key;
				}
				
			    public String aircraft_code;

				public String getAircraft_code () {
					return this.aircraft_code;
				}
				
			    public String aircraft_text;

				public String getAircraft_text () {
					return this.aircraft_text;
				}
				
			    public String aircraft_hex;

				public String getAircraft_hex () {
					return this.aircraft_hex;
				}
				
			    public String aircraft_registration;

				public String getAircraft_registration () {
					return this.aircraft_registration;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date updated_date;

				public java.util.Date getUpdated_date () {
					return this.updated_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.aircraft_code == null) ? 0 : this.aircraft_code.hashCode());
					
						result = prime * result + ((this.aircraft_text == null) ? 0 : this.aircraft_text.hashCode());
					
						result = prime * result + ((this.aircraft_hex == null) ? 0 : this.aircraft_hex.hashCode());
					
						result = prime * result + ((this.aircraft_registration == null) ? 0 : this.aircraft_registration.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final aircrafts1Struct other = (aircrafts1Struct) obj;
		
						if (this.aircraft_code == null) {
							if (other.aircraft_code != null)
								return false;
						
						} else if (!this.aircraft_code.equals(other.aircraft_code))
						
							return false;
					
						if (this.aircraft_text == null) {
							if (other.aircraft_text != null)
								return false;
						
						} else if (!this.aircraft_text.equals(other.aircraft_text))
						
							return false;
					
						if (this.aircraft_hex == null) {
							if (other.aircraft_hex != null)
								return false;
						
						} else if (!this.aircraft_hex.equals(other.aircraft_hex))
						
							return false;
					
						if (this.aircraft_registration == null) {
							if (other.aircraft_registration != null)
								return false;
						
						} else if (!this.aircraft_registration.equals(other.aircraft_registration))
						
							return false;
					

		return true;
    }

	public void copyDataTo(aircrafts1Struct other) {

		other.aircraft_key = this.aircraft_key;
	            other.aircraft_code = this.aircraft_code;
	            other.aircraft_text = this.aircraft_text;
	            other.aircraft_hex = this.aircraft_hex;
	            other.aircraft_registration = this.aircraft_registration;
	            other.created_date = this.created_date;
	            other.updated_date = this.updated_date;
	            
	}

	public void copyKeysDataTo(aircrafts1Struct other) {

		other.aircraft_code = this.aircraft_code;
	            	other.aircraft_text = this.aircraft_text;
	            	other.aircraft_hex = this.aircraft_hex;
	            	other.aircraft_registration = this.aircraft_registration;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.aircraft_code = readString(dis);
					
					this.aircraft_text = readString(dis);
					
					this.aircraft_hex = readString(dis);
					
					this.aircraft_registration = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.aircraft_code,dos);
					
					// String
				
						writeString(this.aircraft_text,dos);
					
					// String
				
						writeString(this.aircraft_hex,dos);
					
					// String
				
						writeString(this.aircraft_registration,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.aircraft_key = readInteger(dis,ois);
					
						this.created_date = readDate(dis,ois);
					
						this.updated_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.aircraft_key = readInteger(dis,objectIn);
					
						this.created_date = readDate(dis,objectIn);
					
						this.updated_date = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.aircraft_key, dos, oos);
					
						writeDate(this.created_date, dos, oos);
					
						writeDate(this.updated_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.aircraft_key, dos, objectOut);
					
						writeDate(this.created_date, dos, objectOut);
					
						writeDate(this.updated_date, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("aircraft_key="+String.valueOf(aircraft_key));
		sb.append(",aircraft_code="+aircraft_code);
		sb.append(",aircraft_text="+aircraft_text);
		sb.append(",aircraft_hex="+aircraft_hex);
		sb.append(",aircraft_registration="+aircraft_registration);
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",updated_date="+String.valueOf(updated_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(aircrafts1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.aircraft_code, other.aircraft_code);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.aircraft_text, other.aircraft_text);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.aircraft_hex, other.aircraft_hex);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.aircraft_registration, other.aircraft_registration);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		aircrafts1Struct aircrafts1 = new aircrafts1Struct();




	
	/**
	 * [tAdvancedHash_aircrafts1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_aircrafts1", false);
		start_Hash.put("tAdvancedHash_aircrafts1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_aircrafts1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"aircrafts1");
					}
				
		int tos_count_tAdvancedHash_aircrafts1 = 0;
		

			   		// connection name:aircrafts1
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(aircrafts1,aircrafts1) | target node:tAdvancedHash_aircrafts1 - inputs:(aircrafts1) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,status1,aircrafts1,airlines1,origin_airport1,destination_airport1) outputs:(flights)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_aircrafts1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<aircrafts1Struct> tHash_Lookup_aircrafts1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<aircrafts1Struct>getLookup(matchingModeEnum_aircrafts1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_aircrafts1", tHash_Lookup_aircrafts1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_aircrafts1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:YqQYjU87CoNdiRp3h+mw7+48leFwJ79IALs89fAvT5A=");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
        String properties_tDBInput_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_2 == null || properties_tDBInput_2.trim().length() == 0) {
            properties_tDBInput_2 = "";
        }
        String url_tDBInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBInput_2;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  `dim_aircraft`.`aircraft_key`, \n  `dim_aircraft`.`aircraft_code`, \n  `dim_aircraft`.`aircraft_text`, \n  `dim_"
+"aircraft`.`aircraft_hex`, \n  `dim_aircraft`.`aircraft_registration`, \n  `dim_aircraft`.`created_date`, \n  `dim_aircraft`"
+".`updated_date`\nFROM `dim_aircraft`";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								aircrafts1.aircraft_key = null;
							} else {
		                          
            aircrafts1.aircraft_key = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    aircrafts1.aircraft_key = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								aircrafts1.aircraft_code = null;
							} else {
	                         		
        	aircrafts1.aircraft_code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								aircrafts1.aircraft_text = null;
							} else {
	                         		
        	aircrafts1.aircraft_text = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								aircrafts1.aircraft_hex = null;
							} else {
	                         		
        	aircrafts1.aircraft_hex = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								aircrafts1.aircraft_registration = null;
							} else {
	                         		
        	aircrafts1.aircraft_registration = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								aircrafts1.created_date = null;
							} else {
										
				if(rs_tDBInput_2.getString(6) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(6);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						aircrafts1.created_date = rs_tDBInput_2.getTimestamp(6);
					} else {
						aircrafts1.created_date = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					aircrafts1.created_date =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								aircrafts1.updated_date = null;
							} else {
										
				if(rs_tDBInput_2.getString(7) != null) {
					String dateString_tDBInput_2 = rs_tDBInput_2.getString(7);
					if (!("0000-00-00").equals(dateString_tDBInput_2) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
						aircrafts1.updated_date = rs_tDBInput_2.getTimestamp(7);
					} else {
						aircrafts1.updated_date = (java.util.Date) year0_tDBInput_2.clone();
					}
				} else {
					aircrafts1.updated_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_aircrafts1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_aircrafts1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"aircrafts1"
						
						);
					}
					


			   
			   

					aircrafts1Struct aircrafts1_HashRow = new aircrafts1Struct();
		   	   	   
				
				aircrafts1_HashRow.aircraft_key = aircrafts1.aircraft_key;
				
				aircrafts1_HashRow.aircraft_code = aircrafts1.aircraft_code;
				
				aircrafts1_HashRow.aircraft_text = aircrafts1.aircraft_text;
				
				aircrafts1_HashRow.aircraft_hex = aircrafts1.aircraft_hex;
				
				aircrafts1_HashRow.aircraft_registration = aircrafts1.aircraft_registration;
				
				aircrafts1_HashRow.created_date = aircrafts1.created_date;
				
				aircrafts1_HashRow.updated_date = aircrafts1.updated_date;
				
			tHash_Lookup_aircrafts1.put(aircrafts1_HashRow);
			
            




 


	tos_count_tAdvancedHash_aircrafts1++;

/**
 * [tAdvancedHash_aircrafts1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_aircrafts1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_aircrafts1";

	

 



/**
 * [tAdvancedHash_aircrafts1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_aircrafts1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_aircrafts1";

	

 



/**
 * [tAdvancedHash_aircrafts1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_aircrafts1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_aircrafts1";

	

tHash_Lookup_aircrafts1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"aircrafts1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_aircrafts1", true);
end_Hash.put("tAdvancedHash_aircrafts1", System.currentTimeMillis());




/**
 * [tAdvancedHash_aircrafts1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_aircrafts1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_aircrafts1";

	

 



/**
 * [tAdvancedHash_aircrafts1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class airlines1Struct implements routines.system.IPersistableComparableLookupRow<airlines1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String airline_iata;

				public String getAirline_iata () {
					return this.airline_iata;
				}
				
			    public String airline_icao;

				public String getAirline_icao () {
					return this.airline_icao;
				}
				
			    public String airline_name;

				public String getAirline_name () {
					return this.airline_name;
				}
				
			    public String airline_short;

				public String getAirline_short () {
					return this.airline_short;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date updated_date;

				public java.util.Date getUpdated_date () {
					return this.updated_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.airline_iata == null) ? 0 : this.airline_iata.hashCode());
					
						result = prime * result + ((this.airline_icao == null) ? 0 : this.airline_icao.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final airlines1Struct other = (airlines1Struct) obj;
		
						if (this.airline_iata == null) {
							if (other.airline_iata != null)
								return false;
						
						} else if (!this.airline_iata.equals(other.airline_iata))
						
							return false;
					
						if (this.airline_icao == null) {
							if (other.airline_icao != null)
								return false;
						
						} else if (!this.airline_icao.equals(other.airline_icao))
						
							return false;
					

		return true;
    }

	public void copyDataTo(airlines1Struct other) {

		other.airline_iata = this.airline_iata;
	            other.airline_icao = this.airline_icao;
	            other.airline_name = this.airline_name;
	            other.airline_short = this.airline_short;
	            other.created_date = this.created_date;
	            other.updated_date = this.updated_date;
	            
	}

	public void copyKeysDataTo(airlines1Struct other) {

		other.airline_iata = this.airline_iata;
	            	other.airline_icao = this.airline_icao;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.airline_iata = readString(dis);
					
					this.airline_icao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.airline_iata,dos);
					
					// String
				
						writeString(this.airline_icao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.airline_name = readString(dis,ois);
					
						this.airline_short = readString(dis,ois);
					
						this.created_date = readDate(dis,ois);
					
						this.updated_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.airline_name = readString(dis,objectIn);
					
						this.airline_short = readString(dis,objectIn);
					
						this.created_date = readDate(dis,objectIn);
					
						this.updated_date = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.airline_name, dos, oos);
					
						writeString(this.airline_short, dos, oos);
					
						writeDate(this.created_date, dos, oos);
					
						writeDate(this.updated_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.airline_name, dos, objectOut);
					
						writeString(this.airline_short, dos, objectOut);
					
						writeDate(this.created_date, dos, objectOut);
					
						writeDate(this.updated_date, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("airline_iata="+airline_iata);
		sb.append(",airline_icao="+airline_icao);
		sb.append(",airline_name="+airline_name);
		sb.append(",airline_short="+airline_short);
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",updated_date="+String.valueOf(updated_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(airlines1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.airline_iata, other.airline_iata);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.airline_icao, other.airline_icao);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		airlines1Struct airlines1 = new airlines1Struct();




	
	/**
	 * [tAdvancedHash_airlines1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_airlines1", false);
		start_Hash.put("tAdvancedHash_airlines1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_airlines1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"airlines1");
					}
				
		int tos_count_tAdvancedHash_airlines1 = 0;
		

			   		// connection name:airlines1
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(airlines1,airlines1) | target node:tAdvancedHash_airlines1 - inputs:(airlines1) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,status1,aircrafts1,airlines1,origin_airport1,destination_airport1) outputs:(flights)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_airlines1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<airlines1Struct> tHash_Lookup_airlines1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<airlines1Struct>getLookup(matchingModeEnum_airlines1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_airlines1", tHash_Lookup_airlines1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_airlines1 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "root";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:d4qi4EpcLjPbQkVubM9m3YDcgfoHJOC4jobw+sfHO6A=");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
        String properties_tDBInput_4 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_4 == null || properties_tDBInput_4.trim().length() == 0) {
            properties_tDBInput_4 = "";
        }
        String url_tDBInput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBInput_4;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  `dim_airlines`.`airline_iata`, \n  `dim_airlines`.`airline_icao`, \n  `dim_airlines`.`airline_name`, \n  `dim_ai"
+"rlines`.`airline_short`, \n  `dim_airlines`.`created_date`, \n  `dim_airlines`.`updated_date`\nFROM `dim_airlines`";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								airlines1.airline_iata = null;
							} else {
	                         		
        	airlines1.airline_iata = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								airlines1.airline_icao = null;
							} else {
	                         		
        	airlines1.airline_icao = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								airlines1.airline_name = null;
							} else {
	                         		
        	airlines1.airline_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								airlines1.airline_short = null;
							} else {
	                         		
        	airlines1.airline_short = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								airlines1.created_date = null;
							} else {
										
				if(rs_tDBInput_4.getString(5) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						airlines1.created_date = rs_tDBInput_4.getTimestamp(5);
					} else {
						airlines1.created_date = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					airlines1.created_date =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								airlines1.updated_date = null;
							} else {
										
				if(rs_tDBInput_4.getString(6) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(6);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						airlines1.updated_date = rs_tDBInput_4.getTimestamp(6);
					} else {
						airlines1.updated_date = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					airlines1.updated_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_airlines1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_airlines1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"airlines1"
						
						);
					}
					


			   
			   

					airlines1Struct airlines1_HashRow = new airlines1Struct();
		   	   	   
				
				airlines1_HashRow.airline_iata = airlines1.airline_iata;
				
				airlines1_HashRow.airline_icao = airlines1.airline_icao;
				
				airlines1_HashRow.airline_name = airlines1.airline_name;
				
				airlines1_HashRow.airline_short = airlines1.airline_short;
				
				airlines1_HashRow.created_date = airlines1.created_date;
				
				airlines1_HashRow.updated_date = airlines1.updated_date;
				
			tHash_Lookup_airlines1.put(airlines1_HashRow);
			
            




 


	tos_count_tAdvancedHash_airlines1++;

/**
 * [tAdvancedHash_airlines1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_airlines1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_airlines1";

	

 



/**
 * [tAdvancedHash_airlines1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_airlines1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_airlines1";

	

 



/**
 * [tAdvancedHash_airlines1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
		


 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_airlines1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_airlines1";

	

tHash_Lookup_airlines1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"airlines1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_airlines1", true);
end_Hash.put("tAdvancedHash_airlines1", System.currentTimeMillis());




/**
 * [tAdvancedHash_airlines1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_airlines1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_airlines1";

	

 



/**
 * [tAdvancedHash_airlines1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class origin_airport1Struct implements routines.system.IPersistableComparableLookupRow<origin_airport1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String airport_iata;

				public String getAirport_iata () {
					return this.airport_iata;
				}
				
			    public String airport_icao;

				public String getAirport_icao () {
					return this.airport_icao;
				}
				
			    public String airport_name;

				public String getAirport_name () {
					return this.airport_name;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String country_code;

				public String getCountry_code () {
					return this.country_code;
				}
				
			    public BigDecimal latitude;

				public BigDecimal getLatitude () {
					return this.latitude;
				}
				
			    public BigDecimal longitude;

				public BigDecimal getLongitude () {
					return this.longitude;
				}
				
			    public String timezone;

				public String getTimezone () {
					return this.timezone;
				}
				
			    public Integer timezone_offset;

				public Integer getTimezone_offset () {
					return this.timezone_offset;
				}
				
			    public BigDecimal avg_rating;

				public BigDecimal getAvg_rating () {
					return this.avg_rating;
				}
				
			    public Integer total_ratings;

				public Integer getTotal_ratings () {
					return this.total_ratings;
				}
				
			    public Integer reviews_count;

				public Integer getReviews_count () {
					return this.reviews_count;
				}
				
			    public Integer evaluation_score;

				public Integer getEvaluation_score () {
					return this.evaluation_score;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date updated_date;

				public java.util.Date getUpdated_date () {
					return this.updated_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.airport_iata == null) ? 0 : this.airport_iata.hashCode());
					
						result = prime * result + ((this.airport_icao == null) ? 0 : this.airport_icao.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final origin_airport1Struct other = (origin_airport1Struct) obj;
		
						if (this.airport_iata == null) {
							if (other.airport_iata != null)
								return false;
						
						} else if (!this.airport_iata.equals(other.airport_iata))
						
							return false;
					
						if (this.airport_icao == null) {
							if (other.airport_icao != null)
								return false;
						
						} else if (!this.airport_icao.equals(other.airport_icao))
						
							return false;
					

		return true;
    }

	public void copyDataTo(origin_airport1Struct other) {

		other.airport_iata = this.airport_iata;
	            other.airport_icao = this.airport_icao;
	            other.airport_name = this.airport_name;
	            other.city = this.city;
	            other.country = this.country;
	            other.country_code = this.country_code;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.timezone = this.timezone;
	            other.timezone_offset = this.timezone_offset;
	            other.avg_rating = this.avg_rating;
	            other.total_ratings = this.total_ratings;
	            other.reviews_count = this.reviews_count;
	            other.evaluation_score = this.evaluation_score;
	            other.created_date = this.created_date;
	            other.updated_date = this.updated_date;
	            
	}

	public void copyKeysDataTo(origin_airport1Struct other) {

		other.airport_iata = this.airport_iata;
	            	other.airport_icao = this.airport_icao;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.airport_iata = readString(dis);
					
					this.airport_icao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.airport_iata = readString(dis);
					
					this.airport_icao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.airport_iata,dos);
					
					// String
				
						writeString(this.airport_icao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.airport_iata,dos);
					
					// String
				
						writeString(this.airport_icao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.airport_name = readString(dis,ois);
					
						this.city = readString(dis,ois);
					
						this.country = readString(dis,ois);
					
						this.country_code = readString(dis,ois);
					
       			    	this.latitude = (BigDecimal) ois.readObject();
					
       			    	this.longitude = (BigDecimal) ois.readObject();
					
						this.timezone = readString(dis,ois);
					
						this.timezone_offset = readInteger(dis,ois);
					
       			    	this.avg_rating = (BigDecimal) ois.readObject();
					
						this.total_ratings = readInteger(dis,ois);
					
						this.reviews_count = readInteger(dis,ois);
					
						this.evaluation_score = readInteger(dis,ois);
					
						this.created_date = readDate(dis,ois);
					
						this.updated_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.airport_name = readString(dis,objectIn);
					
						this.city = readString(dis,objectIn);
					
						this.country = readString(dis,objectIn);
					
						this.country_code = readString(dis,objectIn);
					
       			    	this.latitude = (BigDecimal) objectIn.readObject();
					
       			    	this.longitude = (BigDecimal) objectIn.readObject();
					
						this.timezone = readString(dis,objectIn);
					
						this.timezone_offset = readInteger(dis,objectIn);
					
       			    	this.avg_rating = (BigDecimal) objectIn.readObject();
					
						this.total_ratings = readInteger(dis,objectIn);
					
						this.reviews_count = readInteger(dis,objectIn);
					
						this.evaluation_score = readInteger(dis,objectIn);
					
						this.created_date = readDate(dis,objectIn);
					
						this.updated_date = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.airport_name, dos, oos);
					
						writeString(this.city, dos, oos);
					
						writeString(this.country, dos, oos);
					
						writeString(this.country_code, dos, oos);
					
       			    	oos.writeObject(this.latitude);
					
       			    	oos.writeObject(this.longitude);
					
						writeString(this.timezone, dos, oos);
					
					writeInteger(this.timezone_offset, dos, oos);
					
       			    	oos.writeObject(this.avg_rating);
					
					writeInteger(this.total_ratings, dos, oos);
					
					writeInteger(this.reviews_count, dos, oos);
					
					writeInteger(this.evaluation_score, dos, oos);
					
						writeDate(this.created_date, dos, oos);
					
						writeDate(this.updated_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.airport_name, dos, objectOut);
					
						writeString(this.city, dos, objectOut);
					
						writeString(this.country, dos, objectOut);
					
						writeString(this.country_code, dos, objectOut);
					
       			    	objectOut.writeObject(this.latitude);
					
       			    	objectOut.writeObject(this.longitude);
					
						writeString(this.timezone, dos, objectOut);
					
					writeInteger(this.timezone_offset, dos, objectOut);
					
       			    	objectOut.writeObject(this.avg_rating);
					
					writeInteger(this.total_ratings, dos, objectOut);
					
					writeInteger(this.reviews_count, dos, objectOut);
					
					writeInteger(this.evaluation_score, dos, objectOut);
					
						writeDate(this.created_date, dos, objectOut);
					
						writeDate(this.updated_date, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("airport_iata="+airport_iata);
		sb.append(",airport_icao="+airport_icao);
		sb.append(",airport_name="+airport_name);
		sb.append(",city="+city);
		sb.append(",country="+country);
		sb.append(",country_code="+country_code);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",timezone="+timezone);
		sb.append(",timezone_offset="+String.valueOf(timezone_offset));
		sb.append(",avg_rating="+String.valueOf(avg_rating));
		sb.append(",total_ratings="+String.valueOf(total_ratings));
		sb.append(",reviews_count="+String.valueOf(reviews_count));
		sb.append(",evaluation_score="+String.valueOf(evaluation_score));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",updated_date="+String.valueOf(updated_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(origin_airport1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.airport_iata, other.airport_iata);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.airport_icao, other.airport_icao);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		origin_airport1Struct origin_airport1 = new origin_airport1Struct();




	
	/**
	 * [tAdvancedHash_origin_airport1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_origin_airport1", false);
		start_Hash.put("tAdvancedHash_origin_airport1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_origin_airport1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"origin_airport1");
					}
				
		int tos_count_tAdvancedHash_origin_airport1 = 0;
		

			   		// connection name:origin_airport1
			   		// source node:tDBInput_7 - inputs:(after_tDBInput_1) outputs:(origin_airport1,origin_airport1) | target node:tAdvancedHash_origin_airport1 - inputs:(origin_airport1) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,status1,aircrafts1,airlines1,origin_airport1,destination_airport1) outputs:(flights)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_origin_airport1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<origin_airport1Struct> tHash_Lookup_origin_airport1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<origin_airport1Struct>getLookup(matchingModeEnum_origin_airport1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_origin_airport1", tHash_Lookup_origin_airport1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_origin_airport1 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_7 = java.util.Calendar.getInstance();
		    calendar_tDBInput_7.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_7 = calendar_tDBInput_7.getTime();
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "root";
				
				 
	final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:/t9nHmb6B9w14B9bj7h2fNOoZE8T0PJ3UppH87NydSw=");
				
				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
        String properties_tDBInput_7 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_7 == null || properties_tDBInput_7.trim().length() == 0) {
            properties_tDBInput_7 = "";
        }
        String url_tDBInput_7 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBInput_7;
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT \n  `dim_airports`.`airport_iata`, \n  `dim_airports`.`airport_icao`, \n  `dim_airports`.`airport_name`, \n  `dim_ai"
+"rports`.`city`, \n  `dim_airports`.`country`, \n  `dim_airports`.`country_code`, \n  `dim_airports`.`latitude`, \n  `dim_air"
+"ports`.`longitude`, \n  `dim_airports`.`timezone`, \n  `dim_airports`.`timezone_offset`, \n  `dim_airports`.`avg_rating`, \n"
+"  `dim_airports`.`total_ratings`, \n  `dim_airports`.`reviews_count`, \n  `dim_airports`.`evaluation_score`, \n  `dim_airpo"
+"rts`.`created_date`, \n  `dim_airports`.`updated_date`\nFROM `dim_airports`";
		    

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								origin_airport1.airport_iata = null;
							} else {
	                         		
        	origin_airport1.airport_iata = routines.system.JDBCUtil.getString(rs_tDBInput_7, 1, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								origin_airport1.airport_icao = null;
							} else {
	                         		
        	origin_airport1.airport_icao = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								origin_airport1.airport_name = null;
							} else {
	                         		
        	origin_airport1.airport_name = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								origin_airport1.city = null;
							} else {
	                         		
        	origin_airport1.city = routines.system.JDBCUtil.getString(rs_tDBInput_7, 4, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								origin_airport1.country = null;
							} else {
	                         		
        	origin_airport1.country = routines.system.JDBCUtil.getString(rs_tDBInput_7, 5, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 6) {
								origin_airport1.country_code = null;
							} else {
	                         		
        	origin_airport1.country_code = routines.system.JDBCUtil.getString(rs_tDBInput_7, 6, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 7) {
								origin_airport1.latitude = null;
							} else {
		                          
            origin_airport1.latitude = rs_tDBInput_7.getBigDecimal(7);
            if(rs_tDBInput_7.wasNull()){
                    origin_airport1.latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 8) {
								origin_airport1.longitude = null;
							} else {
		                          
            origin_airport1.longitude = rs_tDBInput_7.getBigDecimal(8);
            if(rs_tDBInput_7.wasNull()){
                    origin_airport1.longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 9) {
								origin_airport1.timezone = null;
							} else {
	                         		
        	origin_airport1.timezone = routines.system.JDBCUtil.getString(rs_tDBInput_7, 9, false);
		                    }
							if(colQtyInRs_tDBInput_7 < 10) {
								origin_airport1.timezone_offset = null;
							} else {
		                          
            origin_airport1.timezone_offset = rs_tDBInput_7.getInt(10);
            if(rs_tDBInput_7.wasNull()){
                    origin_airport1.timezone_offset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 11) {
								origin_airport1.avg_rating = null;
							} else {
		                          
            origin_airport1.avg_rating = rs_tDBInput_7.getBigDecimal(11);
            if(rs_tDBInput_7.wasNull()){
                    origin_airport1.avg_rating = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 12) {
								origin_airport1.total_ratings = null;
							} else {
		                          
            origin_airport1.total_ratings = rs_tDBInput_7.getInt(12);
            if(rs_tDBInput_7.wasNull()){
                    origin_airport1.total_ratings = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 13) {
								origin_airport1.reviews_count = null;
							} else {
		                          
            origin_airport1.reviews_count = rs_tDBInput_7.getInt(13);
            if(rs_tDBInput_7.wasNull()){
                    origin_airport1.reviews_count = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 14) {
								origin_airport1.evaluation_score = null;
							} else {
		                          
            origin_airport1.evaluation_score = rs_tDBInput_7.getInt(14);
            if(rs_tDBInput_7.wasNull()){
                    origin_airport1.evaluation_score = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 15) {
								origin_airport1.created_date = null;
							} else {
										
				if(rs_tDBInput_7.getString(15) != null) {
					String dateString_tDBInput_7 = rs_tDBInput_7.getString(15);
					if (!("0000-00-00").equals(dateString_tDBInput_7) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_7)) {
						origin_airport1.created_date = rs_tDBInput_7.getTimestamp(15);
					} else {
						origin_airport1.created_date = (java.util.Date) year0_tDBInput_7.clone();
					}
				} else {
					origin_airport1.created_date =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_7 < 16) {
								origin_airport1.updated_date = null;
							} else {
										
				if(rs_tDBInput_7.getString(16) != null) {
					String dateString_tDBInput_7 = rs_tDBInput_7.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_7) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_7)) {
						origin_airport1.updated_date = rs_tDBInput_7.getTimestamp(16);
					} else {
						origin_airport1.updated_date = (java.util.Date) year0_tDBInput_7.clone();
					}
				} else {
					origin_airport1.updated_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_origin_airport1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_origin_airport1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"origin_airport1"
						
						);
					}
					


			   
			   

					origin_airport1Struct origin_airport1_HashRow = new origin_airport1Struct();
		   	   	   
				
				origin_airport1_HashRow.airport_iata = origin_airport1.airport_iata;
				
				origin_airport1_HashRow.airport_icao = origin_airport1.airport_icao;
				
				origin_airport1_HashRow.airport_name = origin_airport1.airport_name;
				
				origin_airport1_HashRow.city = origin_airport1.city;
				
				origin_airport1_HashRow.country = origin_airport1.country;
				
				origin_airport1_HashRow.country_code = origin_airport1.country_code;
				
				origin_airport1_HashRow.latitude = origin_airport1.latitude;
				
				origin_airport1_HashRow.longitude = origin_airport1.longitude;
				
				origin_airport1_HashRow.timezone = origin_airport1.timezone;
				
				origin_airport1_HashRow.timezone_offset = origin_airport1.timezone_offset;
				
				origin_airport1_HashRow.avg_rating = origin_airport1.avg_rating;
				
				origin_airport1_HashRow.total_ratings = origin_airport1.total_ratings;
				
				origin_airport1_HashRow.reviews_count = origin_airport1.reviews_count;
				
				origin_airport1_HashRow.evaluation_score = origin_airport1.evaluation_score;
				
				origin_airport1_HashRow.created_date = origin_airport1.created_date;
				
				origin_airport1_HashRow.updated_date = origin_airport1.updated_date;
				
			tHash_Lookup_origin_airport1.put(origin_airport1_HashRow);
			
            




 


	tos_count_tAdvancedHash_origin_airport1++;

/**
 * [tAdvancedHash_origin_airport1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_origin_airport1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_origin_airport1";

	

 



/**
 * [tAdvancedHash_origin_airport1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_origin_airport1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_origin_airport1";

	

 



/**
 * [tAdvancedHash_origin_airport1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
		if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
			
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);
		


 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_origin_airport1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_origin_airport1";

	

tHash_Lookup_origin_airport1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"origin_airport1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_origin_airport1", true);
end_Hash.put("tAdvancedHash_origin_airport1", System.currentTimeMillis());




/**
 * [tAdvancedHash_origin_airport1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_origin_airport1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_origin_airport1";

	

 



/**
 * [tAdvancedHash_origin_airport1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class destination_airport1Struct implements routines.system.IPersistableComparableLookupRow<destination_airport1Struct> {
    final static byte[] commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
    static byte[] commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String airport_iata;

				public String getAirport_iata () {
					return this.airport_iata;
				}
				
			    public String airport_icao;

				public String getAirport_icao () {
					return this.airport_icao;
				}
				
			    public String airport_name;

				public String getAirport_name () {
					return this.airport_name;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String country;

				public String getCountry () {
					return this.country;
				}
				
			    public String country_code;

				public String getCountry_code () {
					return this.country_code;
				}
				
			    public BigDecimal latitude;

				public BigDecimal getLatitude () {
					return this.latitude;
				}
				
			    public BigDecimal longitude;

				public BigDecimal getLongitude () {
					return this.longitude;
				}
				
			    public String timezone;

				public String getTimezone () {
					return this.timezone;
				}
				
			    public Integer timezone_offset;

				public Integer getTimezone_offset () {
					return this.timezone_offset;
				}
				
			    public BigDecimal avg_rating;

				public BigDecimal getAvg_rating () {
					return this.avg_rating;
				}
				
			    public Integer total_ratings;

				public Integer getTotal_ratings () {
					return this.total_ratings;
				}
				
			    public Integer reviews_count;

				public Integer getReviews_count () {
					return this.reviews_count;
				}
				
			    public Integer evaluation_score;

				public Integer getEvaluation_score () {
					return this.evaluation_score;
				}
				
			    public java.util.Date created_date;

				public java.util.Date getCreated_date () {
					return this.created_date;
				}
				
			    public java.util.Date updated_date;

				public java.util.Date getUpdated_date () {
					return this.updated_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.airport_iata == null) ? 0 : this.airport_iata.hashCode());
					
						result = prime * result + ((this.airport_icao == null) ? 0 : this.airport_icao.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final destination_airport1Struct other = (destination_airport1Struct) obj;
		
						if (this.airport_iata == null) {
							if (other.airport_iata != null)
								return false;
						
						} else if (!this.airport_iata.equals(other.airport_iata))
						
							return false;
					
						if (this.airport_icao == null) {
							if (other.airport_icao != null)
								return false;
						
						} else if (!this.airport_icao.equals(other.airport_icao))
						
							return false;
					

		return true;
    }

	public void copyDataTo(destination_airport1Struct other) {

		other.airport_iata = this.airport_iata;
	            other.airport_icao = this.airport_icao;
	            other.airport_name = this.airport_name;
	            other.city = this.city;
	            other.country = this.country;
	            other.country_code = this.country_code;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.timezone = this.timezone;
	            other.timezone_offset = this.timezone_offset;
	            other.avg_rating = this.avg_rating;
	            other.total_ratings = this.total_ratings;
	            other.reviews_count = this.reviews_count;
	            other.evaluation_score = this.evaluation_score;
	            other.created_date = this.created_date;
	            other.updated_date = this.updated_date;
	            
	}

	public void copyKeysDataTo(destination_airport1Struct other) {

		other.airport_iata = this.airport_iata;
	            	other.airport_icao = this.airport_icao;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length) {
				if(length < 1024 && commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations.length == 0) {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[1024];
				} else {
   					commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length);
			strReturn = new String(commonByteArray_AIRPORT_ETL_Load_Fact_Flight_Operations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.airport_iata = readString(dis);
					
					this.airport_icao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_AIRPORT_ETL_Load_Fact_Flight_Operations) {

        	try {

        		int length = 0;
		
					this.airport_iata = readString(dis);
					
					this.airport_icao = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.airport_iata,dos);
					
					// String
				
						writeString(this.airport_icao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.airport_iata,dos);
					
					// String
				
						writeString(this.airport_icao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.airport_name = readString(dis,ois);
					
						this.city = readString(dis,ois);
					
						this.country = readString(dis,ois);
					
						this.country_code = readString(dis,ois);
					
       			    	this.latitude = (BigDecimal) ois.readObject();
					
       			    	this.longitude = (BigDecimal) ois.readObject();
					
						this.timezone = readString(dis,ois);
					
						this.timezone_offset = readInteger(dis,ois);
					
       			    	this.avg_rating = (BigDecimal) ois.readObject();
					
						this.total_ratings = readInteger(dis,ois);
					
						this.reviews_count = readInteger(dis,ois);
					
						this.evaluation_score = readInteger(dis,ois);
					
						this.created_date = readDate(dis,ois);
					
						this.updated_date = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.airport_name = readString(dis,objectIn);
					
						this.city = readString(dis,objectIn);
					
						this.country = readString(dis,objectIn);
					
						this.country_code = readString(dis,objectIn);
					
       			    	this.latitude = (BigDecimal) objectIn.readObject();
					
       			    	this.longitude = (BigDecimal) objectIn.readObject();
					
						this.timezone = readString(dis,objectIn);
					
						this.timezone_offset = readInteger(dis,objectIn);
					
       			    	this.avg_rating = (BigDecimal) objectIn.readObject();
					
						this.total_ratings = readInteger(dis,objectIn);
					
						this.reviews_count = readInteger(dis,objectIn);
					
						this.evaluation_score = readInteger(dis,objectIn);
					
						this.created_date = readDate(dis,objectIn);
					
						this.updated_date = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.airport_name, dos, oos);
					
						writeString(this.city, dos, oos);
					
						writeString(this.country, dos, oos);
					
						writeString(this.country_code, dos, oos);
					
       			    	oos.writeObject(this.latitude);
					
       			    	oos.writeObject(this.longitude);
					
						writeString(this.timezone, dos, oos);
					
					writeInteger(this.timezone_offset, dos, oos);
					
       			    	oos.writeObject(this.avg_rating);
					
					writeInteger(this.total_ratings, dos, oos);
					
					writeInteger(this.reviews_count, dos, oos);
					
					writeInteger(this.evaluation_score, dos, oos);
					
						writeDate(this.created_date, dos, oos);
					
						writeDate(this.updated_date, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.airport_name, dos, objectOut);
					
						writeString(this.city, dos, objectOut);
					
						writeString(this.country, dos, objectOut);
					
						writeString(this.country_code, dos, objectOut);
					
       			    	objectOut.writeObject(this.latitude);
					
       			    	objectOut.writeObject(this.longitude);
					
						writeString(this.timezone, dos, objectOut);
					
					writeInteger(this.timezone_offset, dos, objectOut);
					
       			    	objectOut.writeObject(this.avg_rating);
					
					writeInteger(this.total_ratings, dos, objectOut);
					
					writeInteger(this.reviews_count, dos, objectOut);
					
					writeInteger(this.evaluation_score, dos, objectOut);
					
						writeDate(this.created_date, dos, objectOut);
					
						writeDate(this.updated_date, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("airport_iata="+airport_iata);
		sb.append(",airport_icao="+airport_icao);
		sb.append(",airport_name="+airport_name);
		sb.append(",city="+city);
		sb.append(",country="+country);
		sb.append(",country_code="+country_code);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",timezone="+timezone);
		sb.append(",timezone_offset="+String.valueOf(timezone_offset));
		sb.append(",avg_rating="+String.valueOf(avg_rating));
		sb.append(",total_ratings="+String.valueOf(total_ratings));
		sb.append(",reviews_count="+String.valueOf(reviews_count));
		sb.append(",evaluation_score="+String.valueOf(evaluation_score));
		sb.append(",created_date="+String.valueOf(created_date));
		sb.append(",updated_date="+String.valueOf(updated_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(destination_airport1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.airport_iata, other.airport_iata);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.airport_icao, other.airport_icao);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		destination_airport1Struct destination_airport1 = new destination_airport1Struct();




	
	/**
	 * [tAdvancedHash_destination_airport1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_destination_airport1", false);
		start_Hash.put("tAdvancedHash_destination_airport1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_destination_airport1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"destination_airport1");
					}
				
		int tos_count_tAdvancedHash_destination_airport1 = 0;
		

			   		// connection name:destination_airport1
			   		// source node:tDBInput_17 - inputs:(after_tDBInput_1) outputs:(destination_airport1,destination_airport1) | target node:tAdvancedHash_destination_airport1 - inputs:(destination_airport1) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,status1,aircrafts1,airlines1,origin_airport1,destination_airport1) outputs:(flights)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_destination_airport1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<destination_airport1Struct> tHash_Lookup_destination_airport1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<destination_airport1Struct>getLookup(matchingModeEnum_destination_airport1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_destination_airport1", tHash_Lookup_destination_airport1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_destination_airport1 begin ] stop
 */



	
	/**
	 * [tDBInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_17", false);
		start_Hash.put("tDBInput_17", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_17";

	
		int tos_count_tDBInput_17 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_17 = java.util.Calendar.getInstance();
		    calendar_tDBInput_17.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_17 = calendar_tDBInput_17.getTime();
		    int nb_line_tDBInput_17 = 0;
		    java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = "root";
				
				 
	final String decryptedPassword_tDBInput_17 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:IKSPaa1MDxlqbUKFTgBv2l7tGb/hzLcKDvCDuBfb4yM=");
				
				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;
				
        String properties_tDBInput_17 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
        if (properties_tDBInput_17 == null || properties_tDBInput_17.trim().length() == 0) {
            properties_tDBInput_17 = "";
        }
        String url_tDBInput_17 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?" + properties_tDBInput_17;
				
				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17,dbUser_tDBInput_17,dbPwd_tDBInput_17);
		        
		    
			java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

		    String dbquery_tDBInput_17 = "SELECT \n  `dim_airports`.`airport_iata`, \n  `dim_airports`.`airport_icao`, \n  `dim_airports`.`airport_name`, \n  `dim_ai"
+"rports`.`city`, \n  `dim_airports`.`country`, \n  `dim_airports`.`country_code`, \n  `dim_airports`.`latitude`, \n  `dim_air"
+"ports`.`longitude`, \n  `dim_airports`.`timezone`, \n  `dim_airports`.`timezone_offset`, \n  `dim_airports`.`avg_rating`, \n"
+"  `dim_airports`.`total_ratings`, \n  `dim_airports`.`reviews_count`, \n  `dim_airports`.`evaluation_score`, \n  `dim_airpo"
+"rts`.`created_date`, \n  `dim_airports`.`updated_date`\nFROM `dim_airports`";
		    

            	globalMap.put("tDBInput_17_QUERY",dbquery_tDBInput_17);
		    java.sql.ResultSet rs_tDBInput_17 = null;

		    try {
		    	rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
		    	int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

		    String tmpContent_tDBInput_17 = null;
		    
		    
		    while (rs_tDBInput_17.next()) {
		        nb_line_tDBInput_17++;
		        
							if(colQtyInRs_tDBInput_17 < 1) {
								destination_airport1.airport_iata = null;
							} else {
	                         		
        	destination_airport1.airport_iata = routines.system.JDBCUtil.getString(rs_tDBInput_17, 1, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 2) {
								destination_airport1.airport_icao = null;
							} else {
	                         		
        	destination_airport1.airport_icao = routines.system.JDBCUtil.getString(rs_tDBInput_17, 2, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 3) {
								destination_airport1.airport_name = null;
							} else {
	                         		
        	destination_airport1.airport_name = routines.system.JDBCUtil.getString(rs_tDBInput_17, 3, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 4) {
								destination_airport1.city = null;
							} else {
	                         		
        	destination_airport1.city = routines.system.JDBCUtil.getString(rs_tDBInput_17, 4, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 5) {
								destination_airport1.country = null;
							} else {
	                         		
        	destination_airport1.country = routines.system.JDBCUtil.getString(rs_tDBInput_17, 5, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 6) {
								destination_airport1.country_code = null;
							} else {
	                         		
        	destination_airport1.country_code = routines.system.JDBCUtil.getString(rs_tDBInput_17, 6, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 7) {
								destination_airport1.latitude = null;
							} else {
		                          
            destination_airport1.latitude = rs_tDBInput_17.getBigDecimal(7);
            if(rs_tDBInput_17.wasNull()){
                    destination_airport1.latitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 8) {
								destination_airport1.longitude = null;
							} else {
		                          
            destination_airport1.longitude = rs_tDBInput_17.getBigDecimal(8);
            if(rs_tDBInput_17.wasNull()){
                    destination_airport1.longitude = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 9) {
								destination_airport1.timezone = null;
							} else {
	                         		
        	destination_airport1.timezone = routines.system.JDBCUtil.getString(rs_tDBInput_17, 9, false);
		                    }
							if(colQtyInRs_tDBInput_17 < 10) {
								destination_airport1.timezone_offset = null;
							} else {
		                          
            destination_airport1.timezone_offset = rs_tDBInput_17.getInt(10);
            if(rs_tDBInput_17.wasNull()){
                    destination_airport1.timezone_offset = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 11) {
								destination_airport1.avg_rating = null;
							} else {
		                          
            destination_airport1.avg_rating = rs_tDBInput_17.getBigDecimal(11);
            if(rs_tDBInput_17.wasNull()){
                    destination_airport1.avg_rating = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 12) {
								destination_airport1.total_ratings = null;
							} else {
		                          
            destination_airport1.total_ratings = rs_tDBInput_17.getInt(12);
            if(rs_tDBInput_17.wasNull()){
                    destination_airport1.total_ratings = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 13) {
								destination_airport1.reviews_count = null;
							} else {
		                          
            destination_airport1.reviews_count = rs_tDBInput_17.getInt(13);
            if(rs_tDBInput_17.wasNull()){
                    destination_airport1.reviews_count = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 14) {
								destination_airport1.evaluation_score = null;
							} else {
		                          
            destination_airport1.evaluation_score = rs_tDBInput_17.getInt(14);
            if(rs_tDBInput_17.wasNull()){
                    destination_airport1.evaluation_score = null;
            }
		                    }
							if(colQtyInRs_tDBInput_17 < 15) {
								destination_airport1.created_date = null;
							} else {
										
				if(rs_tDBInput_17.getString(15) != null) {
					String dateString_tDBInput_17 = rs_tDBInput_17.getString(15);
					if (!("0000-00-00").equals(dateString_tDBInput_17) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_17)) {
						destination_airport1.created_date = rs_tDBInput_17.getTimestamp(15);
					} else {
						destination_airport1.created_date = (java.util.Date) year0_tDBInput_17.clone();
					}
				} else {
					destination_airport1.created_date =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_17 < 16) {
								destination_airport1.updated_date = null;
							} else {
										
				if(rs_tDBInput_17.getString(16) != null) {
					String dateString_tDBInput_17 = rs_tDBInput_17.getString(16);
					if (!("0000-00-00").equals(dateString_tDBInput_17) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_17)) {
						destination_airport1.updated_date = rs_tDBInput_17.getTimestamp(16);
					} else {
						destination_airport1.updated_date = (java.util.Date) year0_tDBInput_17.clone();
					}
				} else {
					destination_airport1.updated_date =  null;
				}
		                    }
					

 



/**
 * [tDBInput_17 begin ] stop
 */
	
	/**
	 * [tDBInput_17 main ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 


	tos_count_tDBInput_17++;

/**
 * [tDBInput_17 main ] stop
 */
	
	/**
	 * [tDBInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_destination_airport1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_destination_airport1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"destination_airport1"
						
						);
					}
					


			   
			   

					destination_airport1Struct destination_airport1_HashRow = new destination_airport1Struct();
		   	   	   
				
				destination_airport1_HashRow.airport_iata = destination_airport1.airport_iata;
				
				destination_airport1_HashRow.airport_icao = destination_airport1.airport_icao;
				
				destination_airport1_HashRow.airport_name = destination_airport1.airport_name;
				
				destination_airport1_HashRow.city = destination_airport1.city;
				
				destination_airport1_HashRow.country = destination_airport1.country;
				
				destination_airport1_HashRow.country_code = destination_airport1.country_code;
				
				destination_airport1_HashRow.latitude = destination_airport1.latitude;
				
				destination_airport1_HashRow.longitude = destination_airport1.longitude;
				
				destination_airport1_HashRow.timezone = destination_airport1.timezone;
				
				destination_airport1_HashRow.timezone_offset = destination_airport1.timezone_offset;
				
				destination_airport1_HashRow.avg_rating = destination_airport1.avg_rating;
				
				destination_airport1_HashRow.total_ratings = destination_airport1.total_ratings;
				
				destination_airport1_HashRow.reviews_count = destination_airport1.reviews_count;
				
				destination_airport1_HashRow.evaluation_score = destination_airport1.evaluation_score;
				
				destination_airport1_HashRow.created_date = destination_airport1.created_date;
				
				destination_airport1_HashRow.updated_date = destination_airport1.updated_date;
				
			tHash_Lookup_destination_airport1.put(destination_airport1_HashRow);
			
            




 


	tos_count_tAdvancedHash_destination_airport1++;

/**
 * [tAdvancedHash_destination_airport1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_destination_airport1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_destination_airport1";

	

 



/**
 * [tAdvancedHash_destination_airport1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_destination_airport1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_destination_airport1";

	

 



/**
 * [tAdvancedHash_destination_airport1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_17 end ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

	}
}finally{
	if (rs_tDBInput_17 != null) {
		rs_tDBInput_17.close();
	}
	if (stmt_tDBInput_17 != null) {
		stmt_tDBInput_17.close();
	}
		if(conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {
			
			conn_tDBInput_17.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_17_NB_LINE",nb_line_tDBInput_17);
		


 

ok_Hash.put("tDBInput_17", true);
end_Hash.put("tDBInput_17", System.currentTimeMillis());




/**
 * [tDBInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_destination_airport1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_destination_airport1";

	

tHash_Lookup_destination_airport1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"destination_airport1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_destination_airport1", true);
end_Hash.put("tAdvancedHash_destination_airport1", System.currentTimeMillis());




/**
 * [tAdvancedHash_destination_airport1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_17 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_17";

	

 



/**
 * [tDBInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_destination_airport1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_destination_airport1";

	

 



/**
 * [tAdvancedHash_destination_airport1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Load_Fact_Flight_Operations Load_Fact_Flight_OperationsClass = new Load_Fact_Flight_Operations();

        int exitCode = Load_Fact_Flight_OperationsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Load_Fact_Flight_Operations.class.getClassLoader().getResourceAsStream("airport_etl/load_fact_flight_operations_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Load_Fact_Flight_Operations.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Load_Fact_Flight_Operations");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     357756 characters generated by Talend Open Studio for Data Integration 
 *     on the August 16, 2025 at 3:43:20 AM GMT+01:00
 ************************************************************************************************/