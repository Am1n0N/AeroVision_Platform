// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package airport_etl.staging_from_api_dje_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: Staging_From_API_DJE Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Staging_From_API_DJE implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (apikey != null) {

				this.setProperty("apikey", apikey.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String apikey;

		public String getApikey() {
			return this.apikey;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Staging_From_API_DJE";
	private final String projectName = "AIRPORT_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Staging_From_API_DJE.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Staging_From_API_DJE.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tREST_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tREST_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tREST_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tREST_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tREST_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tREST_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class departuresStruct implements routines.system.IPersistableRow<departuresStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public BigDecimal origin_avg_rating;

		public BigDecimal getOrigin_avg_rating() {
			return this.origin_avg_rating;
		}

		public Integer origin_total_ratings;

		public Integer getOrigin_total_ratings() {
			return this.origin_total_ratings;
		}

		public Integer origin_reviews_count;

		public Integer getOrigin_reviews_count() {
			return this.origin_reviews_count;
		}

		public Integer origin_evaluation_score;

		public Integer getOrigin_evaluation_score() {
			return this.origin_evaluation_score;
		}

		public BigDecimal origin_arrivals_delay_index;

		public BigDecimal getOrigin_arrivals_delay_index() {
			return this.origin_arrivals_delay_index;
		}

		public Integer origin_arrivals_delay_avg;

		public Integer getOrigin_arrivals_delay_avg() {
			return this.origin_arrivals_delay_avg;
		}

		public BigDecimal origin_departures_delay_index;

		public BigDecimal getOrigin_departures_delay_index() {
			return this.origin_departures_delay_index;
		}

		public Integer origin_departures_delay_avg;

		public Integer getOrigin_departures_delay_avg() {
			return this.origin_departures_delay_avg;
		}

		public BigDecimal origin_arrivals_today_pct_delayed;

		public BigDecimal getOrigin_arrivals_today_pct_delayed() {
			return this.origin_arrivals_today_pct_delayed;
		}

		public BigDecimal origin_departures_today_pct_delayed;

		public BigDecimal getOrigin_departures_today_pct_delayed() {
			return this.origin_departures_today_pct_delayed;
		}

		public BigDecimal origin_arrivals_today_pct_canceled;

		public BigDecimal getOrigin_arrivals_today_pct_canceled() {
			return this.origin_arrivals_today_pct_canceled;
		}

		public BigDecimal origin_departures_today_pct_canceled;

		public BigDecimal getOrigin_departures_today_pct_canceled() {
			return this.origin_departures_today_pct_canceled;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		public BigDecimal destination_avg_rating;

		public BigDecimal getDestination_avg_rating() {
			return this.destination_avg_rating;
		}

		public Integer destination_total_ratings;

		public Integer getDestination_total_ratings() {
			return this.destination_total_ratings;
		}

		public Integer destination_reviews_count;

		public Integer getDestination_reviews_count() {
			return this.destination_reviews_count;
		}

		public Integer destination_evaluation_score;

		public Integer getDestination_evaluation_score() {
			return this.destination_evaluation_score;
		}

		public BigDecimal destination_arrivals_delay_index;

		public BigDecimal getDestination_arrivals_delay_index() {
			return this.destination_arrivals_delay_index;
		}

		public Integer destination_arrivals_delay_avg;

		public Integer getDestination_arrivals_delay_avg() {
			return this.destination_arrivals_delay_avg;
		}

		public BigDecimal destination_departures_delay_index;

		public BigDecimal getDestination_departures_delay_index() {
			return this.destination_departures_delay_index;
		}

		public Integer destination_departures_delay_avg;

		public Integer getDestination_departures_delay_avg() {
			return this.destination_departures_delay_avg;
		}

		public BigDecimal destination_arrivals_today_pct_delayed;

		public BigDecimal getDestination_arrivals_today_pct_delayed() {
			return this.destination_arrivals_today_pct_delayed;
		}

		public BigDecimal destination_departures_today_pct_delayed;

		public BigDecimal getDestination_departures_today_pct_delayed() {
			return this.destination_departures_today_pct_delayed;
		}

		public BigDecimal destination_arrivals_today_pct_canceled;

		public BigDecimal getDestination_arrivals_today_pct_canceled() {
			return this.destination_arrivals_today_pct_canceled;
		}

		public BigDecimal destination_departures_today_pct_canceled;

		public BigDecimal getDestination_departures_today_pct_canceled() {
			return this.destination_departures_today_pct_canceled;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final departuresStruct other = (departuresStruct) obj;

			if (this.flight_number == null) {
				if (other.flight_number != null)
					return false;

			} else if (!this.flight_number.equals(other.flight_number))

				return false;

			return true;
		}

		public void copyDataTo(departuresStruct other) {

			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.origin_avg_rating = this.origin_avg_rating;
			other.origin_total_ratings = this.origin_total_ratings;
			other.origin_reviews_count = this.origin_reviews_count;
			other.origin_evaluation_score = this.origin_evaluation_score;
			other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
			other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
			other.origin_departures_delay_index = this.origin_departures_delay_index;
			other.origin_departures_delay_avg = this.origin_departures_delay_avg;
			other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
			other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
			other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
			other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.destination_visible = this.destination_visible;
			other.destination_avg_rating = this.destination_avg_rating;
			other.destination_total_ratings = this.destination_total_ratings;
			other.destination_reviews_count = this.destination_reviews_count;
			other.destination_evaluation_score = this.destination_evaluation_score;
			other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
			other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
			other.destination_departures_delay_index = this.destination_departures_delay_index;
			other.destination_departures_delay_avg = this.destination_departures_delay_avg;
			other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
			other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
			other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
			other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.type = this.type;

		}

		public void copyKeysDataTo(departuresStruct other) {

			other.flight_number = this.flight_number;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",origin_avg_rating=" + String.valueOf(origin_avg_rating));
			sb.append(",origin_total_ratings=" + String.valueOf(origin_total_ratings));
			sb.append(",origin_reviews_count=" + String.valueOf(origin_reviews_count));
			sb.append(",origin_evaluation_score=" + String.valueOf(origin_evaluation_score));
			sb.append(",origin_arrivals_delay_index=" + String.valueOf(origin_arrivals_delay_index));
			sb.append(",origin_arrivals_delay_avg=" + String.valueOf(origin_arrivals_delay_avg));
			sb.append(",origin_departures_delay_index=" + String.valueOf(origin_departures_delay_index));
			sb.append(",origin_departures_delay_avg=" + String.valueOf(origin_departures_delay_avg));
			sb.append(",origin_arrivals_today_pct_delayed=" + String.valueOf(origin_arrivals_today_pct_delayed));
			sb.append(",origin_departures_today_pct_delayed=" + String.valueOf(origin_departures_today_pct_delayed));
			sb.append(",origin_arrivals_today_pct_canceled=" + String.valueOf(origin_arrivals_today_pct_canceled));
			sb.append(",origin_departures_today_pct_canceled=" + String.valueOf(origin_departures_today_pct_canceled));
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append(",destination_avg_rating=" + String.valueOf(destination_avg_rating));
			sb.append(",destination_total_ratings=" + String.valueOf(destination_total_ratings));
			sb.append(",destination_reviews_count=" + String.valueOf(destination_reviews_count));
			sb.append(",destination_evaluation_score=" + String.valueOf(destination_evaluation_score));
			sb.append(",destination_arrivals_delay_index=" + String.valueOf(destination_arrivals_delay_index));
			sb.append(",destination_arrivals_delay_avg=" + String.valueOf(destination_arrivals_delay_avg));
			sb.append(",destination_departures_delay_index=" + String.valueOf(destination_departures_delay_index));
			sb.append(",destination_departures_delay_avg=" + String.valueOf(destination_departures_delay_avg));
			sb.append(",destination_arrivals_today_pct_delayed="
					+ String.valueOf(destination_arrivals_today_pct_delayed));
			sb.append(",destination_departures_today_pct_delayed="
					+ String.valueOf(destination_departures_today_pct_delayed));
			sb.append(",destination_arrivals_today_pct_canceled="
					+ String.valueOf(destination_arrivals_today_pct_canceled));
			sb.append(",destination_departures_today_pct_canceled="
					+ String.valueOf(destination_departures_today_pct_canceled));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(departuresStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.flight_row_id == null) {
				if (other.flight_row_id != null)
					return false;

			} else if (!this.flight_row_id.equals(other.flight_row_id))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.flight_row_id = this.flight_row_id;
			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.destination_visible = this.destination_visible;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.flight_row_id = this.flight_row_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_row_id, other.flight_row_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String airport_name;

		public String getAirport_name() {
			return this.airport_name;
		}

		public String iata_code;

		public String getIata_code() {
			return this.iata_code;
		}

		public String icao_code;

		public String getIcao_code() {
			return this.icao_code;
		}

		public BigDecimal latitude;

		public BigDecimal getLatitude() {
			return this.latitude;
		}

		public BigDecimal longitude;

		public BigDecimal getLongitude() {
			return this.longitude;
		}

		public Integer elevation;

		public Integer getElevation() {
			return this.elevation;
		}

		public String country_name;

		public String getCountry_name() {
			return this.country_name;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String timezone_name;

		public String getTimezone_name() {
			return this.timezone_name;
		}

		public Integer timezone_offset;

		public Integer getTimezone_offset() {
			return this.timezone_offset;
		}

		public String timezone_abbr;

		public String getTimezone_abbr() {
			return this.timezone_abbr;
		}

		public Boolean is_dst;

		public Boolean getIs_dst() {
			return this.is_dst;
		}

		public String homepage_url;

		public String getHomepage_url() {
			return this.homepage_url;
		}

		public String wikipedia_url;

		public String getWikipedia_url() {
			return this.wikipedia_url;
		}

		public Boolean is_visible;

		public Boolean getIs_visible() {
			return this.is_visible;
		}

		public String ratings_url;

		public String getRatings_url() {
			return this.ratings_url;
		}

		public BigDecimal avg_rating;

		public BigDecimal getAvg_rating() {
			return this.avg_rating;
		}

		public Integer total_ratings;

		public Integer getTotal_ratings() {
			return this.total_ratings;
		}

		public Integer reviews_count;

		public Integer getReviews_count() {
			return this.reviews_count;
		}

		public Integer evaluation_score;

		public Integer getEvaluation_score() {
			return this.evaluation_score;
		}

		public BigDecimal arrivals_delay_index;

		public BigDecimal getArrivals_delay_index() {
			return this.arrivals_delay_index;
		}

		public Integer arrivals_delay_avg;

		public Integer getArrivals_delay_avg() {
			return this.arrivals_delay_avg;
		}

		public BigDecimal departures_delay_index;

		public BigDecimal getDepartures_delay_index() {
			return this.departures_delay_index;
		}

		public Integer departures_delay_avg;

		public Integer getDepartures_delay_avg() {
			return this.departures_delay_avg;
		}

		public BigDecimal arrivals_today_pct_delayed;

		public BigDecimal getArrivals_today_pct_delayed() {
			return this.arrivals_today_pct_delayed;
		}

		public BigDecimal arrivals_today_pct_canceled;

		public BigDecimal getArrivals_today_pct_canceled() {
			return this.arrivals_today_pct_canceled;
		}

		public BigDecimal departures_today_pct_delayed;

		public BigDecimal getDepartures_today_pct_delayed() {
			return this.departures_today_pct_delayed;
		}

		public BigDecimal departures_today_pct_canceled;

		public BigDecimal getDepartures_today_pct_canceled() {
			return this.departures_today_pct_canceled;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

				result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.iata_code == null) {
				if (other.iata_code != null)
					return false;

			} else if (!this.iata_code.equals(other.iata_code))

				return false;

			if (this.icao_code == null) {
				if (other.icao_code != null)
					return false;

			} else if (!this.icao_code.equals(other.icao_code))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.airport_name = this.airport_name;
			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.elevation = this.elevation;
			other.country_name = this.country_name;
			other.country_code = this.country_code;
			other.country_id = this.country_id;
			other.city = this.city;
			other.timezone_name = this.timezone_name;
			other.timezone_offset = this.timezone_offset;
			other.timezone_abbr = this.timezone_abbr;
			other.is_dst = this.is_dst;
			other.homepage_url = this.homepage_url;
			other.wikipedia_url = this.wikipedia_url;
			other.is_visible = this.is_visible;
			other.ratings_url = this.ratings_url;
			other.avg_rating = this.avg_rating;
			other.total_ratings = this.total_ratings;
			other.reviews_count = this.reviews_count;
			other.evaluation_score = this.evaluation_score;
			other.arrivals_delay_index = this.arrivals_delay_index;
			other.arrivals_delay_avg = this.arrivals_delay_avg;
			other.departures_delay_index = this.departures_delay_index;
			other.departures_delay_avg = this.departures_delay_avg;
			other.arrivals_today_pct_delayed = this.arrivals_today_pct_delayed;
			other.arrivals_today_pct_canceled = this.arrivals_today_pct_canceled;
			other.departures_today_pct_delayed = this.departures_today_pct_delayed;
			other.departures_today_pct_canceled = this.departures_today_pct_canceled;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("airport_name=" + airport_name);
			sb.append(",iata_code=" + iata_code);
			sb.append(",icao_code=" + icao_code);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",elevation=" + String.valueOf(elevation));
			sb.append(",country_name=" + country_name);
			sb.append(",country_code=" + country_code);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",city=" + city);
			sb.append(",timezone_name=" + timezone_name);
			sb.append(",timezone_offset=" + String.valueOf(timezone_offset));
			sb.append(",timezone_abbr=" + timezone_abbr);
			sb.append(",is_dst=" + String.valueOf(is_dst));
			sb.append(",homepage_url=" + homepage_url);
			sb.append(",wikipedia_url=" + wikipedia_url);
			sb.append(",is_visible=" + String.valueOf(is_visible));
			sb.append(",ratings_url=" + ratings_url);
			sb.append(",avg_rating=" + String.valueOf(avg_rating));
			sb.append(",total_ratings=" + String.valueOf(total_ratings));
			sb.append(",reviews_count=" + String.valueOf(reviews_count));
			sb.append(",evaluation_score=" + String.valueOf(evaluation_score));
			sb.append(",arrivals_delay_index=" + String.valueOf(arrivals_delay_index));
			sb.append(",arrivals_delay_avg=" + String.valueOf(arrivals_delay_avg));
			sb.append(",departures_delay_index=" + String.valueOf(departures_delay_index));
			sb.append(",departures_delay_avg=" + String.valueOf(departures_delay_avg));
			sb.append(",arrivals_today_pct_delayed=" + String.valueOf(arrivals_today_pct_delayed));
			sb.append(",arrivals_today_pct_canceled=" + String.valueOf(arrivals_today_pct_canceled));
			sb.append(",departures_today_pct_delayed=" + String.valueOf(departures_today_pct_delayed));
			sb.append(",departures_today_pct_canceled=" + String.valueOf(departures_today_pct_canceled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iata_code, other.iata_code);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.icao_code, other.icao_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String airport_name;

		public String getAirport_name() {
			return this.airport_name;
		}

		public String iata_code;

		public String getIata_code() {
			return this.iata_code;
		}

		public String icao_code;

		public String getIcao_code() {
			return this.icao_code;
		}

		public BigDecimal latitude;

		public BigDecimal getLatitude() {
			return this.latitude;
		}

		public BigDecimal longitude;

		public BigDecimal getLongitude() {
			return this.longitude;
		}

		public Integer elevation;

		public Integer getElevation() {
			return this.elevation;
		}

		public String country_name;

		public String getCountry_name() {
			return this.country_name;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String timezone_name;

		public String getTimezone_name() {
			return this.timezone_name;
		}

		public Integer timezone_offset;

		public Integer getTimezone_offset() {
			return this.timezone_offset;
		}

		public String timezone_abbr;

		public String getTimezone_abbr() {
			return this.timezone_abbr;
		}

		public Boolean is_dst;

		public Boolean getIs_dst() {
			return this.is_dst;
		}

		public String homepage_url;

		public String getHomepage_url() {
			return this.homepage_url;
		}

		public String wikipedia_url;

		public String getWikipedia_url() {
			return this.wikipedia_url;
		}

		public Boolean is_visible;

		public Boolean getIs_visible() {
			return this.is_visible;
		}

		public String ratings_url;

		public String getRatings_url() {
			return this.ratings_url;
		}

		public BigDecimal avg_rating;

		public BigDecimal getAvg_rating() {
			return this.avg_rating;
		}

		public Integer total_ratings;

		public Integer getTotal_ratings() {
			return this.total_ratings;
		}

		public Integer reviews_count;

		public Integer getReviews_count() {
			return this.reviews_count;
		}

		public Integer evaluation_score;

		public Integer getEvaluation_score() {
			return this.evaluation_score;
		}

		public BigDecimal arrivals_delay_index;

		public BigDecimal getArrivals_delay_index() {
			return this.arrivals_delay_index;
		}

		public Integer arrivals_delay_avg;

		public Integer getArrivals_delay_avg() {
			return this.arrivals_delay_avg;
		}

		public BigDecimal departures_delay_index;

		public BigDecimal getDepartures_delay_index() {
			return this.departures_delay_index;
		}

		public Integer departures_delay_avg;

		public Integer getDepartures_delay_avg() {
			return this.departures_delay_avg;
		}

		public BigDecimal arrivals_today_pct_delayed;

		public BigDecimal getArrivals_today_pct_delayed() {
			return this.arrivals_today_pct_delayed;
		}

		public BigDecimal arrivals_today_pct_canceled;

		public BigDecimal getArrivals_today_pct_canceled() {
			return this.arrivals_today_pct_canceled;
		}

		public BigDecimal departures_today_pct_delayed;

		public BigDecimal getDepartures_today_pct_delayed() {
			return this.departures_today_pct_delayed;
		}

		public BigDecimal departures_today_pct_canceled;

		public BigDecimal getDepartures_today_pct_canceled() {
			return this.departures_today_pct_canceled;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

				result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.iata_code == null) {
				if (other.iata_code != null)
					return false;

			} else if (!this.iata_code.equals(other.iata_code))

				return false;

			if (this.icao_code == null) {
				if (other.icao_code != null)
					return false;

			} else if (!this.icao_code.equals(other.icao_code))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.airport_name = this.airport_name;
			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.elevation = this.elevation;
			other.country_name = this.country_name;
			other.country_code = this.country_code;
			other.country_id = this.country_id;
			other.city = this.city;
			other.timezone_name = this.timezone_name;
			other.timezone_offset = this.timezone_offset;
			other.timezone_abbr = this.timezone_abbr;
			other.is_dst = this.is_dst;
			other.homepage_url = this.homepage_url;
			other.wikipedia_url = this.wikipedia_url;
			other.is_visible = this.is_visible;
			other.ratings_url = this.ratings_url;
			other.avg_rating = this.avg_rating;
			other.total_ratings = this.total_ratings;
			other.reviews_count = this.reviews_count;
			other.evaluation_score = this.evaluation_score;
			other.arrivals_delay_index = this.arrivals_delay_index;
			other.arrivals_delay_avg = this.arrivals_delay_avg;
			other.departures_delay_index = this.departures_delay_index;
			other.departures_delay_avg = this.departures_delay_avg;
			other.arrivals_today_pct_delayed = this.arrivals_today_pct_delayed;
			other.arrivals_today_pct_canceled = this.arrivals_today_pct_canceled;
			other.departures_today_pct_delayed = this.departures_today_pct_delayed;
			other.departures_today_pct_canceled = this.departures_today_pct_canceled;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("airport_name=" + airport_name);
			sb.append(",iata_code=" + iata_code);
			sb.append(",icao_code=" + icao_code);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",elevation=" + String.valueOf(elevation));
			sb.append(",country_name=" + country_name);
			sb.append(",country_code=" + country_code);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",city=" + city);
			sb.append(",timezone_name=" + timezone_name);
			sb.append(",timezone_offset=" + String.valueOf(timezone_offset));
			sb.append(",timezone_abbr=" + timezone_abbr);
			sb.append(",is_dst=" + String.valueOf(is_dst));
			sb.append(",homepage_url=" + homepage_url);
			sb.append(",wikipedia_url=" + wikipedia_url);
			sb.append(",is_visible=" + String.valueOf(is_visible));
			sb.append(",ratings_url=" + ratings_url);
			sb.append(",avg_rating=" + String.valueOf(avg_rating));
			sb.append(",total_ratings=" + String.valueOf(total_ratings));
			sb.append(",reviews_count=" + String.valueOf(reviews_count));
			sb.append(",evaluation_score=" + String.valueOf(evaluation_score));
			sb.append(",arrivals_delay_index=" + String.valueOf(arrivals_delay_index));
			sb.append(",arrivals_delay_avg=" + String.valueOf(arrivals_delay_avg));
			sb.append(",departures_delay_index=" + String.valueOf(departures_delay_index));
			sb.append(",departures_delay_avg=" + String.valueOf(departures_delay_avg));
			sb.append(",arrivals_today_pct_delayed=" + String.valueOf(arrivals_today_pct_delayed));
			sb.append(",arrivals_today_pct_canceled=" + String.valueOf(arrivals_today_pct_canceled));
			sb.append(",departures_today_pct_delayed=" + String.valueOf(departures_today_pct_delayed));
			sb.append(",departures_today_pct_canceled=" + String.valueOf(departures_today_pct_canceled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iata_code, other.iata_code);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.icao_code, other.icao_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class Airport_detailsStruct implements routines.system.IPersistableRow<Airport_detailsStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Airport_detailsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class Flight_departuresStruct implements routines.system.IPersistableRow<Flight_departuresStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Flight_departuresStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tREST_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				Airport_detailsStruct Airport_details = new Airport_detailsStruct();
				row3Struct row3 = new row3Struct();
				row6Struct row6 = new row6Struct();
				Flight_departuresStruct Flight_departures = new Flight_departuresStruct();
				Flight_departuresStruct row10 = Flight_departures;
				row2Struct row2 = new row2Struct();
				row5Struct row5 = new row5Struct();
				departuresStruct departures = new departuresStruct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String iata_code;
					String icao_code;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

							result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.iata_code == null) {
							if (other.iata_code != null)
								return false;

						} else if (!this.iata_code.equals(other.iata_code))

							return false;

						if (this.icao_code == null) {
							if (other.icao_code != null)
								return false;

						} else if (!this.icao_code.equals(other.icao_code))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Airport_details");
				}

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class JsonPathCache_tExtractJSONFields_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "departures");
				}

				int tos_count_tDBOutput_2 = 0;

				int updateKeyCount_tDBOutput_2 = 1;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_2 == 65 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "Raw_Flights";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;

				String properties_tDBOutput_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBOutput_2 == null || properties_tDBOutput_2.trim().length() == 0) {
					properties_tDBOutput_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_2.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_2.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_2 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?"
						+ properties_tDBOutput_2;

				String driverClass_tDBOutput_2 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:HsnXzG++7ugRVlBEemdbtAppKhud8VBPkOaE1BA/Qt0=");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables("airportdata", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_2 = false;
				while (rsTable_tDBOutput_2.next()) {
					String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
					if (table_tDBOutput_2.equalsIgnoreCase("Raw_Flights")) {
						whetherExist_tDBOutput_2 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2
								+ "`(`flight_number` VARCHAR(20)  ,`flight_alternative` VARCHAR(20)  ,`status_text` VARCHAR(50)  ,`status_live` BIT(10)  ,`status_color` VARCHAR(20)  ,`aircraft_code` VARCHAR(10)  ,`aircraft_text` VARCHAR(100)  ,`aircraft_hex` VARCHAR(10)  ,`aircraft_registration` VARCHAR(20)  ,`airline_name` VARCHAR(100)  ,`airline_iata` VARCHAR(2)  ,`airline_icao` VARCHAR(3)  ,`airline_short` VARCHAR(50)  ,`origin_iata` VARCHAR(3)  ,`origin_icao` VARCHAR(4)  ,`origin_name` VARCHAR(200)  ,`origin_latitude` DECIMAL(10,7)  ,`origin_longitude` DECIMAL(10,7)  ,`origin_country` VARCHAR(100)  ,`origin_country_code` VARCHAR(2)  ,`origin_city` VARCHAR(100)  ,`origin_timezone` VARCHAR(50)  ,`origin_timezone_offset` INT(10)  ,`origin_avg_rating` DECIMAL(10,0)  ,`origin_total_ratings` INT(10)  ,`origin_reviews_count` INT(10)  ,`origin_evaluation_score` INT(10)  ,`origin_arrivals_delay_index` DECIMAL(5,2)  ,`origin_arrivals_delay_avg` INT(10)  ,`origin_departures_delay_index` DECIMAL(5,2)  ,`origin_departures_delay_avg` INT(10)  ,`origin_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`origin_departures_today_pct_delayed` DECIMAL(3,2)  ,`origin_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`origin_departures_today_pct_canceled` DECIMAL(3,2)  ,`destination_iata` VARCHAR(3)  ,`destination_icao` VARCHAR(4)  ,`destination_name` VARCHAR(200)  ,`destination_latitude` DECIMAL(10,7)  ,`destination_longitude` DECIMAL(10,7)  ,`destination_country` VARCHAR(100)  ,`destination_country_code` VARCHAR(2)  ,`destination_city` VARCHAR(100)  ,`destination_timezone` VARCHAR(50)  ,`destination_timezone_offset` INT(10)  ,`destination_visible` BIT(10)  ,`destination_avg_rating` DECIMAL(10,0)  ,`destination_total_ratings` INT(10)  ,`destination_reviews_count` INT(10)  ,`destination_evaluation_score` INT(10)  ,`destination_arrivals_delay_index` DECIMAL(5,2)  ,`destination_arrivals_delay_avg` INT(10)  ,`destination_departures_delay_index` DECIMAL(5,2)  ,`destination_departures_delay_avg` INT(10)  ,`destination_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`destination_departures_today_pct_delayed` DECIMAL(3,2)  ,`destination_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`destination_departures_today_pct_canceled` DECIMAL(3,2)  ,`scheduled_departure` BIGINT(20)  ,`scheduled_arrival` BIGINT(20)  ,`real_departure` BIGINT(20)  ,`real_arrival` BIGINT(20)  ,`estimated_departure` BIGINT(20)  ,`estimated_arrival` BIGINT(20)  ,`type` VARCHAR(10)  ,primary key(`flight_number`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement("SELECT COUNT(1) FROM `" + "Raw_Flights" + "` WHERE `flight_number` = ?");
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
				String insert_tDBOutput_2 = "INSERT INTO `" + "Raw_Flights"
						+ "` (`flight_number`,`flight_alternative`,`status_text`,`status_live`,`status_color`,`aircraft_code`,`aircraft_text`,`aircraft_hex`,`aircraft_registration`,`airline_name`,`airline_iata`,`airline_icao`,`airline_short`,`origin_iata`,`origin_icao`,`origin_name`,`origin_latitude`,`origin_longitude`,`origin_country`,`origin_country_code`,`origin_city`,`origin_timezone`,`origin_timezone_offset`,`origin_avg_rating`,`origin_total_ratings`,`origin_reviews_count`,`origin_evaluation_score`,`origin_arrivals_delay_index`,`origin_arrivals_delay_avg`,`origin_departures_delay_index`,`origin_departures_delay_avg`,`origin_arrivals_today_pct_delayed`,`origin_departures_today_pct_delayed`,`origin_arrivals_today_pct_canceled`,`origin_departures_today_pct_canceled`,`destination_iata`,`destination_icao`,`destination_name`,`destination_latitude`,`destination_longitude`,`destination_country`,`destination_country_code`,`destination_city`,`destination_timezone`,`destination_timezone_offset`,`destination_visible`,`destination_avg_rating`,`destination_total_ratings`,`destination_reviews_count`,`destination_evaluation_score`,`destination_arrivals_delay_index`,`destination_arrivals_delay_avg`,`destination_departures_delay_index`,`destination_departures_delay_avg`,`destination_arrivals_today_pct_delayed`,`destination_departures_today_pct_delayed`,`destination_arrivals_today_pct_canceled`,`destination_departures_today_pct_canceled`,`scheduled_departure`,`scheduled_arrival`,`real_departure`,`real_arrival`,`estimated_departure`,`estimated_arrival`,`type`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
				String update_tDBOutput_2 = "UPDATE `" + "Raw_Flights"
						+ "` SET `flight_alternative` = ?,`status_text` = ?,`status_live` = ?,`status_color` = ?,`aircraft_code` = ?,`aircraft_text` = ?,`aircraft_hex` = ?,`aircraft_registration` = ?,`airline_name` = ?,`airline_iata` = ?,`airline_icao` = ?,`airline_short` = ?,`origin_iata` = ?,`origin_icao` = ?,`origin_name` = ?,`origin_latitude` = ?,`origin_longitude` = ?,`origin_country` = ?,`origin_country_code` = ?,`origin_city` = ?,`origin_timezone` = ?,`origin_timezone_offset` = ?,`origin_avg_rating` = ?,`origin_total_ratings` = ?,`origin_reviews_count` = ?,`origin_evaluation_score` = ?,`origin_arrivals_delay_index` = ?,`origin_arrivals_delay_avg` = ?,`origin_departures_delay_index` = ?,`origin_departures_delay_avg` = ?,`origin_arrivals_today_pct_delayed` = ?,`origin_departures_today_pct_delayed` = ?,`origin_arrivals_today_pct_canceled` = ?,`origin_departures_today_pct_canceled` = ?,`destination_iata` = ?,`destination_icao` = ?,`destination_name` = ?,`destination_latitude` = ?,`destination_longitude` = ?,`destination_country` = ?,`destination_country_code` = ?,`destination_city` = ?,`destination_timezone` = ?,`destination_timezone_offset` = ?,`destination_visible` = ?,`destination_avg_rating` = ?,`destination_total_ratings` = ?,`destination_reviews_count` = ?,`destination_evaluation_score` = ?,`destination_arrivals_delay_index` = ?,`destination_arrivals_delay_avg` = ?,`destination_departures_delay_index` = ?,`destination_departures_delay_avg` = ?,`destination_arrivals_today_pct_delayed` = ?,`destination_departures_today_pct_delayed` = ?,`destination_arrivals_today_pct_canceled` = ?,`destination_departures_today_pct_canceled` = ?,`scheduled_departure` = ?,`scheduled_arrival` = ?,`real_departure` = ?,`real_arrival` = ?,`estimated_departure` = ?,`estimated_arrival` = ?,`type` = ? WHERE `flight_number` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				departuresStruct departures_tmp = new departuresStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Long flight_row_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.flight_row_id == null) {
							if (other.flight_row_id != null)
								return false;

						} else if (!this.flight_row_id.equals(other.flight_row_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_4 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_4", false);
				start_Hash.put("tExtractJSONFields_4", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tExtractJSONFields_4 = 0;

				int nb_line_tExtractJSONFields_4 = 0;
				String jsonStr_tExtractJSONFields_4 = "";

				class JsonPathCache_tExtractJSONFields_4 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_4 jsonPathCache_tExtractJSONFields_4 = new JsonPathCache_tExtractJSONFields_4();

				/**
				 * [tExtractJSONFields_4 begin ] stop
				 */

				/**
				 * [tSleep_1 begin ] start
				 */

				ok_Hash.put("tSleep_1", false);
				start_Hash.put("tSleep_1", System.currentTimeMillis());

				currentComponent = "tSleep_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Flight_departures");
				}

				int tos_count_tSleep_1 = 0;

				/**
				 * [tSleep_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				Airport_detailsStruct Airport_details_tmp = new Airport_detailsStruct();
				Flight_departuresStruct Flight_departures_tmp = new Flight_departuresStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tREST_3 begin ] start
				 */

				ok_Hash.put("tREST_3", false);
				start_Hash.put("tREST_3", System.currentTimeMillis());

				currentComponent = "tREST_3";

				int tos_count_tREST_3 = 0;

				String endpoint_tREST_3 = "https://api.flightapi.io/schedule/" + context.apikey
						+ "?mode=departures&iata=DJE&day=-2";

				String trustStoreFile_tREST_3 = System.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_3 = System.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_3 = System.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_3 = System.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_3 = System.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_3 = System.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_3 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_3 = javax.net.ssl.SSLContext.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_3 = null;
				if (trustStoreFile_tREST_3 != null && trustStoreType_tREST_3 != null) {
					char[] password_tREST_3 = null;
					if (trustStorePWD_tREST_3 != null)
						password_tREST_3 = trustStorePWD_tREST_3.toCharArray();
					java.security.KeyStore trustStore_tREST_3 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_3);
					trustStore_tREST_3.load(new java.io.FileInputStream(trustStoreFile_tREST_3), password_tREST_3);

					javax.net.ssl.TrustManagerFactory tmf_tREST_3 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					tmf_tREST_3.init(trustStore_tREST_3);
					tms_tREST_3 = tmf_tREST_3.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_3 = null;
				if (keyStoreFile_tREST_3 != null && keyStoreType_tREST_3 != null) {
					char[] password_tREST_3 = null;
					if (keyStorePWD_tREST_3 != null)
						password_tREST_3 = keyStorePWD_tREST_3.toCharArray();
					java.security.KeyStore keyStore_tREST_3 = java.security.KeyStore.getInstance(keyStoreType_tREST_3);
					keyStore_tREST_3.load(new java.io.FileInputStream(keyStoreFile_tREST_3), password_tREST_3);

					javax.net.ssl.KeyManagerFactory kmf_tREST_3 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					kmf_tREST_3.init(keyStore_tREST_3, password_tREST_3);
					kms_tREST_3 = kmf_tREST_3.getKeyManagers();
				}

				ctx_tREST_3.init(kms_tREST_3, tms_tREST_3, null);
				config_tREST_3.getProperties().put(
						com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
						new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

							public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
								return true;
							}
						}, ctx_tREST_3));

				com.sun.jersey.api.client.Client restClient_tREST_3 = com.sun.jersey.api.client.Client
						.create(config_tREST_3);

				java.util.Map<String, Object> headers_tREST_3 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_3 = headers_tREST_3.get("Transfer-Encoding");
				if (transfer_encoding_tREST_3 != null && "chunked".equals(transfer_encoding_tREST_3)) {
					restClient_tREST_3.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_3;
				if (endpoint_tREST_3 != null && !("").equals(endpoint_tREST_3)) {
					restResource_tREST_3 = restClient_tREST_3.resource(endpoint_tREST_3);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_3 = null;
				String restResponse_tREST_3 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_3 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_3 : headers_tREST_3.entrySet()) {
						if (builder_tREST_3 == null) {
							builder_tREST_3 = restResource_tREST_3.header(header_tREST_3.getKey(),
									header_tREST_3.getValue());
						} else {
							builder_tREST_3.header(header_tREST_3.getKey(), header_tREST_3.getValue());
						}
					}

					if (builder_tREST_3 != null) {
						restResponse_tREST_3 = builder_tREST_3.get(String.class);
					} else {
						restResponse_tREST_3 = restResource_tREST_3.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					globalMap.put("tREST_3_ERROR_MESSAGE", ue.getMessage());
					errorResponse_tREST_3 = ue.getResponse();
				}

				// for output

				row7 = new row7Struct();
				if (errorResponse_tREST_3 != null) {
					row7.ERROR_CODE = errorResponse_tREST_3.getStatus();
					if (row7.ERROR_CODE != 204) {
						row7.Body = errorResponse_tREST_3.getEntity(String.class);
					}
				} else {
					row7.Body = restResponse_tREST_3;
				}

				/**
				 * [tREST_3 begin ] stop
				 */

				/**
				 * [tREST_3 main ] start
				 */

				currentComponent = "tREST_3";

				tos_count_tREST_3++;

				/**
				 * [tREST_3 main ] stop
				 */

				/**
				 * [tREST_3 process_data_begin ] start
				 */

				currentComponent = "tREST_3";

				/**
				 * [tREST_3 process_data_begin ] stop
				 */

				/**
				 * [tMap_3 main ] start
				 */

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1

							, "row7"

					);
				}

				boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_3 = false;
				boolean mainRowRejected_tMap_3 = false;

				// ###############################
				{ // start of Var scope

					// ###############################
					// # Vars tables

					Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
					// ###############################
					// # Output tables

					Airport_details = null;
					Flight_departures = null;

// # Output table : 'Airport_details'
					Airport_details_tmp.Body = row7.Body;
					Airport_details_tmp.ERROR_CODE = row7.ERROR_CODE;
					Airport_details = Airport_details_tmp;

// # Output table : 'Flight_departures'
					Flight_departures_tmp.Body = row7.Body;
					Flight_departures_tmp.ERROR_CODE = row7.ERROR_CODE;
					Flight_departures = Flight_departures_tmp;
// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_3 = false;

				tos_count_tMap_3++;

				/**
				 * [tMap_3 main ] stop
				 */

				/**
				 * [tMap_3 process_data_begin ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 process_data_begin ] stop
				 */
// Start of branch "Airport_details"
				if (Airport_details != null) {

					/**
					 * [tExtractJSONFields_1 main ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "Airport_details"

						);
					}

					if (Airport_details.Body != null) {// C_01
						jsonStr_tExtractJSONFields_1 = Airport_details.Body.toString();

						row3 = null;

						String loopPath_tExtractJSONFields_1 = "$.airport.pluginData";
						java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_1 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
						try {
							document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_1);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
									.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
							Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1
									.read(compiledLoopPath_tExtractJSONFields_1, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
							} else {
								resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
							}

							isStructError_tExtractJSONFields_1 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_1) {
							globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE", ex_tExtractJSONFields_1.getMessage());
							throw (ex_tExtractJSONFields_1);
						}

						String jsonPath_tExtractJSONFields_1 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

						Object value_tExtractJSONFields_1 = null;

						Object root_tExtractJSONFields_1 = null;
						for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
								|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
										.size()); i_tExtractJSONFields_1++) {
							if (!isStructError_tExtractJSONFields_1) {
								Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
										.get(i_tExtractJSONFields_1);
								row3 = null;
								row3 = new row3Struct();
								nb_line_tExtractJSONFields_1++;
								try {
									jsonPath_tExtractJSONFields_1 = "$.details.name";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.airport_name = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.airport_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.code.iata";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.iata_code = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.iata_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.code.icao";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.icao_code = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.icao_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.position.latitude";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.latitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.latitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.latitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.position.longitude";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.longitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.longitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.longitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.position.elevation";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.elevation = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row3.elevation =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.elevation =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.position.country.name";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.country_name = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.country_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.position.country.code";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.country_code = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.country_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.position.country.id";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.country_id = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row3.country_id =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.country_id =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.position.region.city";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.city = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.city =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.timezone.name";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.timezone_name = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.timezone_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.timezone.offset";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.timezone_offset = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row3.timezone_offset =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.timezone_offset =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.timezone.abbr";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.timezone_abbr = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.timezone_abbr =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.timezone.isDst";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.is_dst = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_1.toString());
										} else {
											row3.is_dst =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.is_dst =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.url.homepage";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.homepage_url = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.homepage_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.url.wikipedia";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.wikipedia_url = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.wikipedia_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.visible";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.is_visible = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_1.toString());
										} else {
											row3.is_visible =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.is_visible =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.flightdiary.url";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row3.ratings_url = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.ratings_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.flightdiary.ratings.avg";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.avg_rating = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.avg_rating =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.avg_rating =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.flightdiary.ratings.total";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.total_ratings = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row3.total_ratings =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.total_ratings =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.flightdiary.reviews";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.reviews_count = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row3.reviews_count =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.reviews_count =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.flightdiary.evaluation";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.evaluation_score = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row3.evaluation_score =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.evaluation_score =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.stats.arrivals.delayIndex";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.arrivals_delay_index = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.arrivals_delay_index =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.arrivals_delay_index =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.stats.arrivals.delayAvg";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.arrivals_delay_avg = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row3.arrivals_delay_avg =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.arrivals_delay_avg =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.stats.departures.delayIndex";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.departures_delay_index = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.departures_delay_index =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.departures_delay_index =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.stats.departures.delayAvg";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.departures_delay_avg = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row3.departures_delay_avg =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.departures_delay_avg =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.stats.arrivals.today.percentage.delayed";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.arrivals_today_pct_delayed = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.arrivals_today_pct_delayed =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.arrivals_today_pct_delayed =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.stats.arrivals.today.percentage.canceled";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.arrivals_today_pct_canceled = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.arrivals_today_pct_canceled =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.arrivals_today_pct_canceled =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.stats.departures.today.percentage.delayed";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.departures_today_pct_delayed = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.departures_today_pct_delayed =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.departures_today_pct_delayed =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "$.details.stats.departures.today.percentage.canceled";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row3.departures_today_pct_canceled = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_1.toString());
										} else {
											row3.departures_today_pct_canceled =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
												e_tExtractJSONFields_1.getMessage());
										row3.departures_today_pct_canceled =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
											ex_tExtractJSONFields_1.getMessage());
									throw (ex_tExtractJSONFields_1);
								}

							}

							isStructError_tExtractJSONFields_1 = false;

//}

							tos_count_tExtractJSONFields_1++;

							/**
							 * [tExtractJSONFields_1 main ] stop
							 */

							/**
							 * [tExtractJSONFields_1 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tUniqRow_1 main ] start
								 */

								currentComponent = "tUniqRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

								row6 = null;
								if (row3.iata_code == null) {
									finder_tUniqRow_1.iata_code = null;
								} else {
									finder_tUniqRow_1.iata_code = row3.iata_code.toLowerCase();
								}
								if (row3.icao_code == null) {
									finder_tUniqRow_1.icao_code = null;
								} else {
									finder_tUniqRow_1.icao_code = row3.icao_code.toLowerCase();
								}
								finder_tUniqRow_1.hashCodeDirty = true;
								if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
									KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

									if (row3.iata_code == null) {
										new_tUniqRow_1.iata_code = null;
									} else {
										new_tUniqRow_1.iata_code = row3.iata_code.toLowerCase();
									}
									if (row3.icao_code == null) {
										new_tUniqRow_1.icao_code = null;
									} else {
										new_tUniqRow_1.icao_code = row3.icao_code.toLowerCase();
									}

									keystUniqRow_1.add(new_tUniqRow_1);
									if (row6 == null) {

										row6 = new row6Struct();
									}
									row6.airport_name = row3.airport_name;
									row6.iata_code = row3.iata_code;
									row6.icao_code = row3.icao_code;
									row6.latitude = row3.latitude;
									row6.longitude = row3.longitude;
									row6.elevation = row3.elevation;
									row6.country_name = row3.country_name;
									row6.country_code = row3.country_code;
									row6.country_id = row3.country_id;
									row6.city = row3.city;
									row6.timezone_name = row3.timezone_name;
									row6.timezone_offset = row3.timezone_offset;
									row6.timezone_abbr = row3.timezone_abbr;
									row6.is_dst = row3.is_dst;
									row6.homepage_url = row3.homepage_url;
									row6.wikipedia_url = row3.wikipedia_url;
									row6.is_visible = row3.is_visible;
									row6.ratings_url = row3.ratings_url;
									row6.avg_rating = row3.avg_rating;
									row6.total_ratings = row3.total_ratings;
									row6.reviews_count = row3.reviews_count;
									row6.evaluation_score = row3.evaluation_score;
									row6.arrivals_delay_index = row3.arrivals_delay_index;
									row6.arrivals_delay_avg = row3.arrivals_delay_avg;
									row6.departures_delay_index = row3.departures_delay_index;
									row6.departures_delay_avg = row3.departures_delay_avg;
									row6.arrivals_today_pct_delayed = row3.arrivals_today_pct_delayed;
									row6.arrivals_today_pct_canceled = row3.arrivals_today_pct_canceled;
									row6.departures_today_pct_delayed = row3.departures_today_pct_delayed;
									row6.departures_today_pct_canceled = row3.departures_today_pct_canceled;
									nb_uniques_tUniqRow_1++;
								} else {
									nb_duplicates_tUniqRow_1++;
								}

								tos_count_tUniqRow_1++;

								/**
								 * [tUniqRow_1 main ] stop
								 */

								/**
								 * [tUniqRow_1 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_begin ] stop
								 */
// Start of branch "row6"
								if (row6 != null) {

									/**
									 * [tJavaRow_1 main ] start
									 */

									currentComponent = "tJavaRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row6"

										);
									}

// Airport info
									globalMap.put("airport_name", row6.airport_name);
									System.out.println("airport_name = " + row6.airport_name);
									globalMap.put("iata_code", row6.iata_code);
									System.out.println("iata_code = " + row6.iata_code);
									globalMap.put("icao_code", row6.icao_code);
									System.out.println("icao_code = " + row6.icao_code);
									globalMap.put("latitude", row6.latitude);
									System.out.println("latitude = " + row6.latitude);
									globalMap.put("longitude", row6.longitude);
									System.out.println("longitude = " + row6.longitude);
									globalMap.put("elevation", row6.elevation);
									System.out.println("elevation = " + row6.elevation);
									globalMap.put("country_name", row6.country_name);
									System.out.println("country_name = " + row6.country_name);
									globalMap.put("country_code", row6.country_code);
									System.out.println("country_code = " + row6.country_code);
									globalMap.put("country_id", row6.country_id);
									System.out.println("country_id = " + row6.country_id);
									globalMap.put("city", row6.city);
									System.out.println("city = " + row6.city);

// Timezone info
									globalMap.put("timezone_name", row6.timezone_name);
									System.out.println("timezone_name = " + row6.timezone_name);
									globalMap.put("timezone_offset", row6.timezone_offset);
									System.out.println("timezone_offset = " + row6.timezone_offset);
									globalMap.put("timezone_abbr", row6.timezone_abbr);
									System.out.println("timezone_abbr = " + row6.timezone_abbr);
									globalMap.put("is_dst", row6.is_dst);
									System.out.println("is_dst = " + row6.is_dst);

// URLs
									globalMap.put("homepage_url", row6.homepage_url);
									System.out.println("homepage_url = " + row6.homepage_url);
									globalMap.put("wikipedia_url", row6.wikipedia_url);
									System.out.println("wikipedia_url = " + row6.wikipedia_url);
									globalMap.put("is_visible", row6.is_visible);
									System.out.println("is_visible = " + row6.is_visible);
									globalMap.put("ratings_url", row6.ratings_url);
									System.out.println("ratings_url = " + row6.ratings_url);

// Ratings
									globalMap.put("avg_rating", row6.avg_rating);
									System.out.println("avg_rating = " + row6.avg_rating);
									globalMap.put("total_ratings", row6.total_ratings);
									System.out.println("total_ratings = " + row6.total_ratings);
									globalMap.put("reviews_count", row6.reviews_count);
									System.out.println("reviews_count = " + row6.reviews_count);
									globalMap.put("evaluation_score", row6.evaluation_score);
									System.out.println("evaluation_score = " + row6.evaluation_score);

// Delay indexes
									globalMap.put("arrivals_delay_index", row6.arrivals_delay_index);
									System.out.println("arrivals_delay_index = " + row6.arrivals_delay_index);
									globalMap.put("arrivals_delay_avg", row6.arrivals_delay_avg);
									System.out.println("arrivals_delay_avg = " + row6.arrivals_delay_avg);
									globalMap.put("departures_delay_index", row6.departures_delay_index);
									System.out.println("departures_delay_index = " + row6.departures_delay_index);
									globalMap.put("departures_delay_avg", row6.departures_delay_avg);
									System.out.println("departures_delay_avg = " + row6.departures_delay_avg);

// Today's delays
									globalMap.put("arrivals_today_pct_delayed", row6.arrivals_today_pct_delayed);
									System.out
											.println("arrivals_today_pct_delayed = " + row6.arrivals_today_pct_delayed);
									globalMap.put("departures_today_pct_delayed", row6.departures_today_pct_delayed);
									System.out.println(
											"departures_today_pct_delayed = " + row6.departures_today_pct_delayed);
									globalMap.put("arrivals_today_pct_canceled", row6.arrivals_today_pct_canceled);
									System.out.println(
											"arrivals_today_pct_canceled = " + row6.arrivals_today_pct_canceled);
									globalMap.put("departures_today_pct_canceled", row6.departures_today_pct_canceled);
									System.out.println(
											"departures_today_pct_canceled = " + row6.departures_today_pct_canceled);

									nb_line_tJavaRow_1++;

									tos_count_tJavaRow_1++;

									/**
									 * [tJavaRow_1 main ] stop
									 */

									/**
									 * [tJavaRow_1 process_data_begin ] start
									 */

									currentComponent = "tJavaRow_1";

									/**
									 * [tJavaRow_1 process_data_begin ] stop
									 */

									/**
									 * [tJavaRow_1 process_data_end ] start
									 */

									currentComponent = "tJavaRow_1";

									/**
									 * [tJavaRow_1 process_data_end ] stop
									 */

								} // End of branch "row6"

								/**
								 * [tUniqRow_1 process_data_end ] start
								 */

								currentComponent = "tUniqRow_1";

								/**
								 * [tUniqRow_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					/**
					 * [tExtractJSONFields_1 process_data_end ] stop
					 */

				} // End of branch "Airport_details"

// Start of branch "Flight_departures"
				if (Flight_departures != null) {

					/**
					 * [tSleep_1 main ] start
					 */

					currentComponent = "tSleep_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "Flight_departures"

						);
					}

					Thread.sleep((2) * 1000);

					row10 = Flight_departures;

					tos_count_tSleep_1++;

					/**
					 * [tSleep_1 main ] stop
					 */

					/**
					 * [tSleep_1 process_data_begin ] start
					 */

					currentComponent = "tSleep_1";

					/**
					 * [tSleep_1 process_data_begin ] stop
					 */

					/**
					 * [tExtractJSONFields_4 main ] start
					 */

					currentComponent = "tExtractJSONFields_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row10"

						);
					}

					if (row10.Body != null) {// C_01
						jsonStr_tExtractJSONFields_4 = row10.Body.toString();

						row2 = null;

						String loopPath_tExtractJSONFields_4 = "$.airport.pluginData.schedule.departures.data[*]";
						java.util.List<Object> resultset_tExtractJSONFields_4 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_4 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_4 = null;
						try {
							document_tExtractJSONFields_4 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_4);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
									.getCompiledJsonPath(loopPath_tExtractJSONFields_4);
							Object result_tExtractJSONFields_4 = document_tExtractJSONFields_4
									.read(compiledLoopPath_tExtractJSONFields_4, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_4 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_4 = (net.minidev.json.JSONArray) result_tExtractJSONFields_4;
							} else {
								resultset_tExtractJSONFields_4.add(result_tExtractJSONFields_4);
							}

							isStructError_tExtractJSONFields_4 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_4) {
							globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE", ex_tExtractJSONFields_4.getMessage());
							System.err.println(ex_tExtractJSONFields_4.getMessage());
						}

						String jsonPath_tExtractJSONFields_4 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_4 = null;

						Object value_tExtractJSONFields_4 = null;

						Object root_tExtractJSONFields_4 = null;
						for (int i_tExtractJSONFields_4 = 0; isStructError_tExtractJSONFields_4
								|| (i_tExtractJSONFields_4 < resultset_tExtractJSONFields_4
										.size()); i_tExtractJSONFields_4++) {
							if (!isStructError_tExtractJSONFields_4) {
								Object row_tExtractJSONFields_4 = resultset_tExtractJSONFields_4
										.get(i_tExtractJSONFields_4);
								row2 = null;
								row2 = new row2Struct();
								nb_line_tExtractJSONFields_4++;
								try {
									jsonPath_tExtractJSONFields_4 = "$.flight.identification.row";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.flight_row_id = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_4.toString());
										} else {
											row2.flight_row_id =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.flight_row_id =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.identification.number.default";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.flight_number = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.flight_number =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.identification.number.alternative";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.flight_alternative = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.flight_alternative =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.status.text";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.status_text = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.status_text =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.status.live";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.status_live = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_4.toString());
										} else {
											row2.status_live =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.status_live =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.status.generic.status.color";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.status_color = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.status_color =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.aircraft.model.code";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.aircraft_code = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.aircraft_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.aircraft.model.text";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.aircraft_text = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.aircraft_text =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.aircraft.hex";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.aircraft_hex = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.aircraft_hex =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.aircraft.registration";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.aircraft_registration = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.aircraft_registration =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airline.name";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.airline_name = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.airline_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airline.code.iata";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.airline_iata = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.airline_iata =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airline.code.icao";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.airline_icao = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.airline_icao =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airline.short";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.airline_short = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.airline_short =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.code.iata";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.destination_iata = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_iata =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.code.icao";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.destination_icao = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_icao =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.name";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.destination_name = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.position.latitude";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.destination_latitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_4.toString());
										} else {
											row2.destination_latitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_latitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.position.longitude";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.destination_longitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_4.toString());
										} else {
											row2.destination_longitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_longitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.position.country.name";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.destination_country = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_country =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.position.country.code";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.destination_country_code = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_country_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.position.region.city";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.destination_city = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_city =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.timezone.name";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										row2.destination_timezone = value_tExtractJSONFields_4 == null ?

												null

												: value_tExtractJSONFields_4.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_timezone =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.timezone.offset";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.destination_timezone_offset = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_4.toString());
										} else {
											row2.destination_timezone_offset =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_timezone_offset =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.time.scheduled.departure";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.scheduled_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_4.toString());
										} else {
											row2.scheduled_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.scheduled_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.time.scheduled.arrival";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.scheduled_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_4.toString());
										} else {
											row2.scheduled_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.scheduled_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.time.real.departure";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.real_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_4.toString());
										} else {
											row2.real_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.real_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.time.real.arrival";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.real_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_4.toString());
										} else {
											row2.real_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.real_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.time.estimated.departure";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.estimated_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_4.toString());
										} else {
											row2.estimated_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.estimated_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.time.estimated.arrival";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.estimated_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_4.toString());
										} else {
											row2.estimated_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.estimated_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_4 = "$.flight.airport.destination.visible";
									compiledJsonPath_tExtractJSONFields_4 = jsonPathCache_tExtractJSONFields_4
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_4);

									try {

										value_tExtractJSONFields_4 = compiledJsonPath_tExtractJSONFields_4
												.read(row_tExtractJSONFields_4);

										if (value_tExtractJSONFields_4 != null
												&& !value_tExtractJSONFields_4.toString().isEmpty()) {
											row2.destination_visible = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_4.toString());
										} else {
											row2.destination_visible =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_4) {
										globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
												e_tExtractJSONFields_4.getMessage());
										row2.destination_visible =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_4) {
									globalMap.put("tExtractJSONFields_4_ERROR_MESSAGE",
											ex_tExtractJSONFields_4.getMessage());
									System.err.println(ex_tExtractJSONFields_4.getMessage());
									row2 = null;
								}

							}

							isStructError_tExtractJSONFields_4 = false;

//}

							tos_count_tExtractJSONFields_4++;

							/**
							 * [tExtractJSONFields_4 main ] stop
							 */

							/**
							 * [tExtractJSONFields_4 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_4";

							/**
							 * [tExtractJSONFields_4 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tUniqRow_2 main ] start
								 */

								currentComponent = "tUniqRow_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row2"

									);
								}

								row5 = null;
								finder_tUniqRow_2.flight_row_id = row2.flight_row_id;
								finder_tUniqRow_2.hashCodeDirty = true;
								if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
									KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

									new_tUniqRow_2.flight_row_id = row2.flight_row_id;

									keystUniqRow_2.add(new_tUniqRow_2);
									if (row5 == null) {

										row5 = new row5Struct();
									}
									row5.flight_row_id = row2.flight_row_id;
									row5.flight_number = row2.flight_number;
									row5.flight_alternative = row2.flight_alternative;
									row5.status_text = row2.status_text;
									row5.status_live = row2.status_live;
									row5.status_color = row2.status_color;
									row5.aircraft_code = row2.aircraft_code;
									row5.aircraft_text = row2.aircraft_text;
									row5.aircraft_hex = row2.aircraft_hex;
									row5.aircraft_registration = row2.aircraft_registration;
									row5.airline_name = row2.airline_name;
									row5.airline_iata = row2.airline_iata;
									row5.airline_icao = row2.airline_icao;
									row5.airline_short = row2.airline_short;
									row5.destination_iata = row2.destination_iata;
									row5.destination_icao = row2.destination_icao;
									row5.destination_name = row2.destination_name;
									row5.destination_latitude = row2.destination_latitude;
									row5.destination_longitude = row2.destination_longitude;
									row5.destination_country = row2.destination_country;
									row5.destination_country_code = row2.destination_country_code;
									row5.destination_city = row2.destination_city;
									row5.destination_timezone = row2.destination_timezone;
									row5.destination_timezone_offset = row2.destination_timezone_offset;
									row5.scheduled_departure = row2.scheduled_departure;
									row5.scheduled_arrival = row2.scheduled_arrival;
									row5.real_departure = row2.real_departure;
									row5.real_arrival = row2.real_arrival;
									row5.estimated_departure = row2.estimated_departure;
									row5.estimated_arrival = row2.estimated_arrival;
									row5.destination_visible = row2.destination_visible;
									nb_uniques_tUniqRow_2++;
								} else {
									nb_duplicates_tUniqRow_2++;
								}

								tos_count_tUniqRow_2++;

								/**
								 * [tUniqRow_2 main ] stop
								 */

								/**
								 * [tUniqRow_2 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_2";

								/**
								 * [tUniqRow_2 process_data_begin ] stop
								 */
// Start of branch "row5"
								if (row5 != null) {

									/**
									 * [tMap_2 main ] start
									 */

									currentComponent = "tMap_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row5"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_2 = false;
									boolean mainRowRejected_tMap_2 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
										// ###############################
										// # Output tables

										departures = null;

// # Output table : 'departures'
										departures_tmp.flight_number = row5.flight_number;
										departures_tmp.flight_alternative = row5.flight_alternative;
										departures_tmp.status_text = row5.status_text;
										departures_tmp.status_live = row5.status_live;
										departures_tmp.status_color = row5.status_color;
										departures_tmp.aircraft_code = row5.aircraft_code;
										departures_tmp.aircraft_text = row5.aircraft_text;
										departures_tmp.aircraft_hex = row5.aircraft_hex;
										departures_tmp.aircraft_registration = row5.aircraft_registration;
										departures_tmp.airline_name = row5.airline_name;
										departures_tmp.airline_iata = row5.airline_iata;
										departures_tmp.airline_icao = row5.airline_icao;
										departures_tmp.airline_short = row5.airline_short;
										departures_tmp.origin_iata = (String) globalMap.get("iata_code");
										departures_tmp.origin_icao = (String) globalMap.get("icao_code");
										departures_tmp.origin_name = (String) globalMap.get("airport_name");
										departures_tmp.origin_latitude = (BigDecimal) globalMap.get("latitude");
										departures_tmp.origin_longitude = (BigDecimal) globalMap.get("longitude");
										departures_tmp.origin_country = (String) globalMap.get("country_name");
										departures_tmp.origin_country_code = (String) globalMap.get("country_code");
										departures_tmp.origin_city = (String) globalMap.get("city");
										departures_tmp.origin_timezone = (String) globalMap.get("timezone_name");
										departures_tmp.origin_timezone_offset = (Integer) globalMap
												.get("timezone_offset");
										departures_tmp.origin_avg_rating = (BigDecimal) globalMap.get("avg_rating");
										departures_tmp.origin_total_ratings = (Integer) globalMap.get("total_ratings");
										departures_tmp.origin_reviews_count = (Integer) globalMap.get("reviews_count");
										departures_tmp.origin_evaluation_score = (Integer) globalMap
												.get("evaluation_score");
										departures_tmp.origin_arrivals_delay_index = (BigDecimal) globalMap
												.get("arrivals_delay_index");
										departures_tmp.origin_arrivals_delay_avg = (Integer) globalMap
												.get("arrivals_delay_avg");
										departures_tmp.origin_departures_delay_index = (BigDecimal) globalMap
												.get("departures_delay_index");
										departures_tmp.origin_departures_delay_avg = (Integer) globalMap
												.get("departures_delay_avg");
										departures_tmp.origin_arrivals_today_pct_delayed = (BigDecimal) globalMap
												.get("arrivals_today_pct_delayed");
										departures_tmp.origin_departures_today_pct_delayed = (BigDecimal) globalMap
												.get("departures_today_pct_delayed");
										departures_tmp.origin_arrivals_today_pct_canceled = (BigDecimal) globalMap
												.get("arrivals_today_pct_canceled");
										departures_tmp.origin_departures_today_pct_canceled = (BigDecimal) globalMap
												.get("departures_today_pct_canceled");
										departures_tmp.destination_iata = row5.destination_iata;
										departures_tmp.destination_icao = row5.destination_icao;
										departures_tmp.destination_name = row5.destination_name;
										departures_tmp.destination_latitude = row5.destination_latitude;
										departures_tmp.destination_longitude = row5.destination_longitude;
										departures_tmp.destination_country = row5.destination_country;
										departures_tmp.destination_country_code = row5.destination_country_code;
										departures_tmp.destination_city = row5.destination_city;
										departures_tmp.destination_timezone = row5.destination_timezone;
										departures_tmp.destination_timezone_offset = row5.destination_timezone_offset;
										departures_tmp.destination_visible = null;
										departures_tmp.destination_avg_rating = null;
										departures_tmp.destination_total_ratings = null;
										departures_tmp.destination_reviews_count = null;
										departures_tmp.destination_evaluation_score = null;
										departures_tmp.destination_arrivals_delay_index = null;
										departures_tmp.destination_arrivals_delay_avg = null;
										departures_tmp.destination_departures_delay_index = null;
										departures_tmp.destination_departures_delay_avg = null;
										departures_tmp.destination_arrivals_today_pct_delayed = null;
										departures_tmp.destination_departures_today_pct_delayed = null;
										departures_tmp.destination_arrivals_today_pct_canceled = null;
										departures_tmp.destination_departures_today_pct_canceled = null;
										departures_tmp.scheduled_departure = row5.scheduled_departure;
										departures_tmp.scheduled_arrival = row5.scheduled_arrival;
										departures_tmp.real_departure = row5.real_departure;
										departures_tmp.real_arrival = row5.real_arrival;
										departures_tmp.estimated_departure = row5.estimated_departure;
										departures_tmp.estimated_arrival = row5.estimated_arrival;
										departures_tmp.type = "Departure";
										departures = departures_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */

									/**
									 * [tMap_2 process_data_begin ] start
									 */

									currentComponent = "tMap_2";

									/**
									 * [tMap_2 process_data_begin ] stop
									 */
// Start of branch "departures"
									if (departures != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "departures"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (departures.flight_number == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(1, departures.flight_number);
										}

										int checkCount_tDBOutput_2 = -1;
										try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
											while (rs_tDBOutput_2.next()) {
												checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
											}
										}
										if (checkCount_tDBOutput_2 > 0) {
											if (departures.flight_alternative == null) {
												pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(1, departures.flight_alternative);
											}

											if (departures.status_text == null) {
												pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(2, departures.status_text);
											}

											if (departures.status_live == null) {
												pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.BOOLEAN);
											} else {
												pstmtUpdate_tDBOutput_2.setBoolean(3, departures.status_live);
											}

											if (departures.status_color == null) {
												pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(4, departures.status_color);
											}

											if (departures.aircraft_code == null) {
												pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(5, departures.aircraft_code);
											}

											if (departures.aircraft_text == null) {
												pstmtUpdate_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(6, departures.aircraft_text);
											}

											if (departures.aircraft_hex == null) {
												pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(7, departures.aircraft_hex);
											}

											if (departures.aircraft_registration == null) {
												pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(8, departures.aircraft_registration);
											}

											if (departures.airline_name == null) {
												pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(9, departures.airline_name);
											}

											if (departures.airline_iata == null) {
												pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(10, departures.airline_iata);
											}

											if (departures.airline_icao == null) {
												pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(11, departures.airline_icao);
											}

											if (departures.airline_short == null) {
												pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(12, departures.airline_short);
											}

											if (departures.origin_iata == null) {
												pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(13, departures.origin_iata);
											}

											if (departures.origin_icao == null) {
												pstmtUpdate_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(14, departures.origin_icao);
											}

											if (departures.origin_name == null) {
												pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(15, departures.origin_name);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(16, departures.origin_latitude);

											pstmtUpdate_tDBOutput_2.setBigDecimal(17, departures.origin_longitude);

											if (departures.origin_country == null) {
												pstmtUpdate_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(18, departures.origin_country);
											}

											if (departures.origin_country_code == null) {
												pstmtUpdate_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(19, departures.origin_country_code);
											}

											if (departures.origin_city == null) {
												pstmtUpdate_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(20, departures.origin_city);
											}

											if (departures.origin_timezone == null) {
												pstmtUpdate_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(21, departures.origin_timezone);
											}

											if (departures.origin_timezone_offset == null) {
												pstmtUpdate_tDBOutput_2.setNull(22, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(22, departures.origin_timezone_offset);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(23, departures.origin_avg_rating);

											if (departures.origin_total_ratings == null) {
												pstmtUpdate_tDBOutput_2.setNull(24, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(24, departures.origin_total_ratings);
											}

											if (departures.origin_reviews_count == null) {
												pstmtUpdate_tDBOutput_2.setNull(25, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(25, departures.origin_reviews_count);
											}

											if (departures.origin_evaluation_score == null) {
												pstmtUpdate_tDBOutput_2.setNull(26, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(26, departures.origin_evaluation_score);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(27,
													departures.origin_arrivals_delay_index);

											if (departures.origin_arrivals_delay_avg == null) {
												pstmtUpdate_tDBOutput_2.setNull(28, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(28,
														departures.origin_arrivals_delay_avg);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(29,
													departures.origin_departures_delay_index);

											if (departures.origin_departures_delay_avg == null) {
												pstmtUpdate_tDBOutput_2.setNull(30, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(30,
														departures.origin_departures_delay_avg);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(31,
													departures.origin_arrivals_today_pct_delayed);

											pstmtUpdate_tDBOutput_2.setBigDecimal(32,
													departures.origin_departures_today_pct_delayed);

											pstmtUpdate_tDBOutput_2.setBigDecimal(33,
													departures.origin_arrivals_today_pct_canceled);

											pstmtUpdate_tDBOutput_2.setBigDecimal(34,
													departures.origin_departures_today_pct_canceled);

											if (departures.destination_iata == null) {
												pstmtUpdate_tDBOutput_2.setNull(35, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(35, departures.destination_iata);
											}

											if (departures.destination_icao == null) {
												pstmtUpdate_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(36, departures.destination_icao);
											}

											if (departures.destination_name == null) {
												pstmtUpdate_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(37, departures.destination_name);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(38, departures.destination_latitude);

											pstmtUpdate_tDBOutput_2.setBigDecimal(39, departures.destination_longitude);

											if (departures.destination_country == null) {
												pstmtUpdate_tDBOutput_2.setNull(40, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(40, departures.destination_country);
											}

											if (departures.destination_country_code == null) {
												pstmtUpdate_tDBOutput_2.setNull(41, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(41,
														departures.destination_country_code);
											}

											if (departures.destination_city == null) {
												pstmtUpdate_tDBOutput_2.setNull(42, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(42, departures.destination_city);
											}

											if (departures.destination_timezone == null) {
												pstmtUpdate_tDBOutput_2.setNull(43, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(43, departures.destination_timezone);
											}

											if (departures.destination_timezone_offset == null) {
												pstmtUpdate_tDBOutput_2.setNull(44, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(44,
														departures.destination_timezone_offset);
											}

											if (departures.destination_visible == null) {
												pstmtUpdate_tDBOutput_2.setNull(45, java.sql.Types.BOOLEAN);
											} else {
												pstmtUpdate_tDBOutput_2.setBoolean(45, departures.destination_visible);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(46,
													departures.destination_avg_rating);

											if (departures.destination_total_ratings == null) {
												pstmtUpdate_tDBOutput_2.setNull(47, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(47,
														departures.destination_total_ratings);
											}

											if (departures.destination_reviews_count == null) {
												pstmtUpdate_tDBOutput_2.setNull(48, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(48,
														departures.destination_reviews_count);
											}

											if (departures.destination_evaluation_score == null) {
												pstmtUpdate_tDBOutput_2.setNull(49, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(49,
														departures.destination_evaluation_score);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(50,
													departures.destination_arrivals_delay_index);

											if (departures.destination_arrivals_delay_avg == null) {
												pstmtUpdate_tDBOutput_2.setNull(51, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(51,
														departures.destination_arrivals_delay_avg);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(52,
													departures.destination_departures_delay_index);

											if (departures.destination_departures_delay_avg == null) {
												pstmtUpdate_tDBOutput_2.setNull(53, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setInt(53,
														departures.destination_departures_delay_avg);
											}

											pstmtUpdate_tDBOutput_2.setBigDecimal(54,
													departures.destination_arrivals_today_pct_delayed);

											pstmtUpdate_tDBOutput_2.setBigDecimal(55,
													departures.destination_departures_today_pct_delayed);

											pstmtUpdate_tDBOutput_2.setBigDecimal(56,
													departures.destination_arrivals_today_pct_canceled);

											pstmtUpdate_tDBOutput_2.setBigDecimal(57,
													departures.destination_departures_today_pct_canceled);

											if (departures.scheduled_departure == null) {
												pstmtUpdate_tDBOutput_2.setNull(58, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setLong(58, departures.scheduled_departure);
											}

											if (departures.scheduled_arrival == null) {
												pstmtUpdate_tDBOutput_2.setNull(59, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setLong(59, departures.scheduled_arrival);
											}

											if (departures.real_departure == null) {
												pstmtUpdate_tDBOutput_2.setNull(60, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setLong(60, departures.real_departure);
											}

											if (departures.real_arrival == null) {
												pstmtUpdate_tDBOutput_2.setNull(61, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setLong(61, departures.real_arrival);
											}

											if (departures.estimated_departure == null) {
												pstmtUpdate_tDBOutput_2.setNull(62, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setLong(62, departures.estimated_departure);
											}

											if (departures.estimated_arrival == null) {
												pstmtUpdate_tDBOutput_2.setNull(63, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_2.setLong(63, departures.estimated_arrival);
											}

											if (departures.type == null) {
												pstmtUpdate_tDBOutput_2.setNull(64, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(64, departures.type);
											}

											if (departures.flight_number == null) {
												pstmtUpdate_tDBOutput_2.setNull(65 + count_tDBOutput_2,
														java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_2.setString(65 + count_tDBOutput_2,
														departures.flight_number);
											}

											try {
												int processedCount_tDBOutput_2 = pstmtUpdate_tDBOutput_2
														.executeUpdate();
												updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
												rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
												nb_line_tDBOutput_2++;
											} catch (java.lang.Exception e) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
												whetherReject_tDBOutput_2 = true;
												nb_line_tDBOutput_2++;
												System.err.print(e.getMessage());
											}
										} else {
											if (departures.flight_number == null) {
												pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(1, departures.flight_number);
											}

											if (departures.flight_alternative == null) {
												pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(2, departures.flight_alternative);
											}

											if (departures.status_text == null) {
												pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(3, departures.status_text);
											}

											if (departures.status_live == null) {
												pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.BOOLEAN);
											} else {
												pstmtInsert_tDBOutput_2.setBoolean(4, departures.status_live);
											}

											if (departures.status_color == null) {
												pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(5, departures.status_color);
											}

											if (departures.aircraft_code == null) {
												pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(6, departures.aircraft_code);
											}

											if (departures.aircraft_text == null) {
												pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(7, departures.aircraft_text);
											}

											if (departures.aircraft_hex == null) {
												pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(8, departures.aircraft_hex);
											}

											if (departures.aircraft_registration == null) {
												pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(9, departures.aircraft_registration);
											}

											if (departures.airline_name == null) {
												pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(10, departures.airline_name);
											}

											if (departures.airline_iata == null) {
												pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(11, departures.airline_iata);
											}

											if (departures.airline_icao == null) {
												pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(12, departures.airline_icao);
											}

											if (departures.airline_short == null) {
												pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(13, departures.airline_short);
											}

											if (departures.origin_iata == null) {
												pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(14, departures.origin_iata);
											}

											if (departures.origin_icao == null) {
												pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(15, departures.origin_icao);
											}

											if (departures.origin_name == null) {
												pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(16, departures.origin_name);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(17, departures.origin_latitude);

											pstmtInsert_tDBOutput_2.setBigDecimal(18, departures.origin_longitude);

											if (departures.origin_country == null) {
												pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(19, departures.origin_country);
											}

											if (departures.origin_country_code == null) {
												pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(20, departures.origin_country_code);
											}

											if (departures.origin_city == null) {
												pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(21, departures.origin_city);
											}

											if (departures.origin_timezone == null) {
												pstmtInsert_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(22, departures.origin_timezone);
											}

											if (departures.origin_timezone_offset == null) {
												pstmtInsert_tDBOutput_2.setNull(23, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(23, departures.origin_timezone_offset);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(24, departures.origin_avg_rating);

											if (departures.origin_total_ratings == null) {
												pstmtInsert_tDBOutput_2.setNull(25, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(25, departures.origin_total_ratings);
											}

											if (departures.origin_reviews_count == null) {
												pstmtInsert_tDBOutput_2.setNull(26, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(26, departures.origin_reviews_count);
											}

											if (departures.origin_evaluation_score == null) {
												pstmtInsert_tDBOutput_2.setNull(27, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(27, departures.origin_evaluation_score);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(28,
													departures.origin_arrivals_delay_index);

											if (departures.origin_arrivals_delay_avg == null) {
												pstmtInsert_tDBOutput_2.setNull(29, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(29,
														departures.origin_arrivals_delay_avg);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(30,
													departures.origin_departures_delay_index);

											if (departures.origin_departures_delay_avg == null) {
												pstmtInsert_tDBOutput_2.setNull(31, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(31,
														departures.origin_departures_delay_avg);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(32,
													departures.origin_arrivals_today_pct_delayed);

											pstmtInsert_tDBOutput_2.setBigDecimal(33,
													departures.origin_departures_today_pct_delayed);

											pstmtInsert_tDBOutput_2.setBigDecimal(34,
													departures.origin_arrivals_today_pct_canceled);

											pstmtInsert_tDBOutput_2.setBigDecimal(35,
													departures.origin_departures_today_pct_canceled);

											if (departures.destination_iata == null) {
												pstmtInsert_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(36, departures.destination_iata);
											}

											if (departures.destination_icao == null) {
												pstmtInsert_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(37, departures.destination_icao);
											}

											if (departures.destination_name == null) {
												pstmtInsert_tDBOutput_2.setNull(38, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(38, departures.destination_name);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(39, departures.destination_latitude);

											pstmtInsert_tDBOutput_2.setBigDecimal(40, departures.destination_longitude);

											if (departures.destination_country == null) {
												pstmtInsert_tDBOutput_2.setNull(41, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(41, departures.destination_country);
											}

											if (departures.destination_country_code == null) {
												pstmtInsert_tDBOutput_2.setNull(42, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(42,
														departures.destination_country_code);
											}

											if (departures.destination_city == null) {
												pstmtInsert_tDBOutput_2.setNull(43, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(43, departures.destination_city);
											}

											if (departures.destination_timezone == null) {
												pstmtInsert_tDBOutput_2.setNull(44, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(44, departures.destination_timezone);
											}

											if (departures.destination_timezone_offset == null) {
												pstmtInsert_tDBOutput_2.setNull(45, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(45,
														departures.destination_timezone_offset);
											}

											if (departures.destination_visible == null) {
												pstmtInsert_tDBOutput_2.setNull(46, java.sql.Types.BOOLEAN);
											} else {
												pstmtInsert_tDBOutput_2.setBoolean(46, departures.destination_visible);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(47,
													departures.destination_avg_rating);

											if (departures.destination_total_ratings == null) {
												pstmtInsert_tDBOutput_2.setNull(48, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(48,
														departures.destination_total_ratings);
											}

											if (departures.destination_reviews_count == null) {
												pstmtInsert_tDBOutput_2.setNull(49, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(49,
														departures.destination_reviews_count);
											}

											if (departures.destination_evaluation_score == null) {
												pstmtInsert_tDBOutput_2.setNull(50, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(50,
														departures.destination_evaluation_score);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(51,
													departures.destination_arrivals_delay_index);

											if (departures.destination_arrivals_delay_avg == null) {
												pstmtInsert_tDBOutput_2.setNull(52, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(52,
														departures.destination_arrivals_delay_avg);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(53,
													departures.destination_departures_delay_index);

											if (departures.destination_departures_delay_avg == null) {
												pstmtInsert_tDBOutput_2.setNull(54, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setInt(54,
														departures.destination_departures_delay_avg);
											}

											pstmtInsert_tDBOutput_2.setBigDecimal(55,
													departures.destination_arrivals_today_pct_delayed);

											pstmtInsert_tDBOutput_2.setBigDecimal(56,
													departures.destination_departures_today_pct_delayed);

											pstmtInsert_tDBOutput_2.setBigDecimal(57,
													departures.destination_arrivals_today_pct_canceled);

											pstmtInsert_tDBOutput_2.setBigDecimal(58,
													departures.destination_departures_today_pct_canceled);

											if (departures.scheduled_departure == null) {
												pstmtInsert_tDBOutput_2.setNull(59, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setLong(59, departures.scheduled_departure);
											}

											if (departures.scheduled_arrival == null) {
												pstmtInsert_tDBOutput_2.setNull(60, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setLong(60, departures.scheduled_arrival);
											}

											if (departures.real_departure == null) {
												pstmtInsert_tDBOutput_2.setNull(61, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setLong(61, departures.real_departure);
											}

											if (departures.real_arrival == null) {
												pstmtInsert_tDBOutput_2.setNull(62, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setLong(62, departures.real_arrival);
											}

											if (departures.estimated_departure == null) {
												pstmtInsert_tDBOutput_2.setNull(63, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setLong(63, departures.estimated_departure);
											}

											if (departures.estimated_arrival == null) {
												pstmtInsert_tDBOutput_2.setNull(64, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_2.setLong(64, departures.estimated_arrival);
											}

											if (departures.type == null) {
												pstmtInsert_tDBOutput_2.setNull(65, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_2.setString(65, departures.type);
											}

											try {
												int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2
														.executeUpdate();
												insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
												rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
												nb_line_tDBOutput_2++;
											} catch (java.lang.Exception e) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
												whetherReject_tDBOutput_2 = true;
												nb_line_tDBOutput_2++;
												System.err.print(e.getMessage());
											}
										}
										if (!whetherReject_tDBOutput_2) {
										}
										commitCounter_tDBOutput_2++;

										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

											if (rowsToCommitCount_tDBOutput_2 != 0) {
											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {
												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;

										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "departures"

									/**
									 * [tMap_2 process_data_end ] start
									 */

									currentComponent = "tMap_2";

									/**
									 * [tMap_2 process_data_end ] stop
									 */

								} // End of branch "row5"

								/**
								 * [tUniqRow_2 process_data_end ] start
								 */

								currentComponent = "tUniqRow_2";

								/**
								 * [tUniqRow_2 process_data_end ] stop
								 */

							} // End of branch "row2"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_4 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_4";

					/**
					 * [tExtractJSONFields_4 process_data_end ] stop
					 */

					/**
					 * [tSleep_1 process_data_end ] start
					 */

					currentComponent = "tSleep_1";

					/**
					 * [tSleep_1 process_data_end ] stop
					 */

				} // End of branch "Flight_departures"

				/**
				 * [tMap_3 process_data_end ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 process_data_end ] stop
				 */

				/**
				 * [tREST_3 process_data_end ] start
				 */

				currentComponent = "tREST_3";

				/**
				 * [tREST_3 process_data_end ] stop
				 */

				/**
				 * [tREST_3 end ] start
				 */

				currentComponent = "tREST_3";

				ok_Hash.put("tREST_3", true);
				end_Hash.put("tREST_3", System.currentTimeMillis());

				/**
				 * [tREST_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Airport_details");
				}

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tSleep_1 end ] start
				 */

				currentComponent = "tSleep_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Flight_departures");
				}

				ok_Hash.put("tSleep_1", true);
				end_Hash.put("tSleep_1", System.currentTimeMillis());

				/**
				 * [tSleep_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_4 end ] start
				 */

				currentComponent = "tExtractJSONFields_4";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tExtractJSONFields_4", true);
				end_Hash.put("tExtractJSONFields_4", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_4 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (pstmtUpdate_tDBOutput_2 != null) {
					pstmtUpdate_tDBOutput_2.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_2");
				}
				if (pstmtInsert_tDBOutput_2 != null) {
					pstmtInsert_tDBOutput_2.close();
					resourceMap.remove("pstmtInsert_tDBOutput_2");
				}
				if (pstmt_tDBOutput_2 != null) {
					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {

				}
				conn_tDBOutput_2.commit();
				if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {

					rowsToCommitCount_tDBOutput_2 = 0;
				}
				commitCounter_tDBOutput_2 = 0;

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "departures");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tREST_1Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_3 finally ] start
				 */

				currentComponent = "tREST_3";

				/**
				 * [tREST_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tSleep_1 finally ] start
				 */

				currentComponent = "tSleep_1";

				/**
				 * [tSleep_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_4 finally ] start
				 */

				currentComponent = "tExtractJSONFields_4";

				/**
				 * [tExtractJSONFields_4 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
						if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_2")) != null) {
							pstmtUpdateToClose_tDBOutput_2.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
						if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_2")) != null) {
							pstmtInsertToClose_tDBOutput_2.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_3_SUBPROCESS_STATE", 1);
	}

	public static class arrivalsStruct implements routines.system.IPersistableRow<arrivalsStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public BigDecimal origin_avg_rating;

		public BigDecimal getOrigin_avg_rating() {
			return this.origin_avg_rating;
		}

		public Integer origin_total_ratings;

		public Integer getOrigin_total_ratings() {
			return this.origin_total_ratings;
		}

		public Integer origin_reviews_count;

		public Integer getOrigin_reviews_count() {
			return this.origin_reviews_count;
		}

		public Integer origin_evaluation_score;

		public Integer getOrigin_evaluation_score() {
			return this.origin_evaluation_score;
		}

		public BigDecimal origin_arrivals_delay_index;

		public BigDecimal getOrigin_arrivals_delay_index() {
			return this.origin_arrivals_delay_index;
		}

		public Integer origin_arrivals_delay_avg;

		public Integer getOrigin_arrivals_delay_avg() {
			return this.origin_arrivals_delay_avg;
		}

		public BigDecimal origin_departures_delay_index;

		public BigDecimal getOrigin_departures_delay_index() {
			return this.origin_departures_delay_index;
		}

		public Integer origin_departures_delay_avg;

		public Integer getOrigin_departures_delay_avg() {
			return this.origin_departures_delay_avg;
		}

		public BigDecimal origin_arrivals_today_pct_delayed;

		public BigDecimal getOrigin_arrivals_today_pct_delayed() {
			return this.origin_arrivals_today_pct_delayed;
		}

		public BigDecimal origin_departures_today_pct_delayed;

		public BigDecimal getOrigin_departures_today_pct_delayed() {
			return this.origin_departures_today_pct_delayed;
		}

		public BigDecimal origin_arrivals_today_pct_canceled;

		public BigDecimal getOrigin_arrivals_today_pct_canceled() {
			return this.origin_arrivals_today_pct_canceled;
		}

		public BigDecimal origin_departures_today_pct_canceled;

		public BigDecimal getOrigin_departures_today_pct_canceled() {
			return this.origin_departures_today_pct_canceled;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		public BigDecimal destination_avg_rating;

		public BigDecimal getDestination_avg_rating() {
			return this.destination_avg_rating;
		}

		public Integer destination_total_ratings;

		public Integer getDestination_total_ratings() {
			return this.destination_total_ratings;
		}

		public Integer destination_reviews_count;

		public Integer getDestination_reviews_count() {
			return this.destination_reviews_count;
		}

		public Integer destination_evaluation_score;

		public Integer getDestination_evaluation_score() {
			return this.destination_evaluation_score;
		}

		public BigDecimal destination_arrivals_delay_index;

		public BigDecimal getDestination_arrivals_delay_index() {
			return this.destination_arrivals_delay_index;
		}

		public Integer destination_arrivals_delay_avg;

		public Integer getDestination_arrivals_delay_avg() {
			return this.destination_arrivals_delay_avg;
		}

		public BigDecimal destination_departures_delay_index;

		public BigDecimal getDestination_departures_delay_index() {
			return this.destination_departures_delay_index;
		}

		public Integer destination_departures_delay_avg;

		public Integer getDestination_departures_delay_avg() {
			return this.destination_departures_delay_avg;
		}

		public BigDecimal destination_arrivals_today_pct_delayed;

		public BigDecimal getDestination_arrivals_today_pct_delayed() {
			return this.destination_arrivals_today_pct_delayed;
		}

		public BigDecimal destination_departures_today_pct_delayed;

		public BigDecimal getDestination_departures_today_pct_delayed() {
			return this.destination_departures_today_pct_delayed;
		}

		public BigDecimal destination_arrivals_today_pct_canceled;

		public BigDecimal getDestination_arrivals_today_pct_canceled() {
			return this.destination_arrivals_today_pct_canceled;
		}

		public BigDecimal destination_departures_today_pct_canceled;

		public BigDecimal getDestination_departures_today_pct_canceled() {
			return this.destination_departures_today_pct_canceled;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final arrivalsStruct other = (arrivalsStruct) obj;

			if (this.flight_number == null) {
				if (other.flight_number != null)
					return false;

			} else if (!this.flight_number.equals(other.flight_number))

				return false;

			return true;
		}

		public void copyDataTo(arrivalsStruct other) {

			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.origin_avg_rating = this.origin_avg_rating;
			other.origin_total_ratings = this.origin_total_ratings;
			other.origin_reviews_count = this.origin_reviews_count;
			other.origin_evaluation_score = this.origin_evaluation_score;
			other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
			other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
			other.origin_departures_delay_index = this.origin_departures_delay_index;
			other.origin_departures_delay_avg = this.origin_departures_delay_avg;
			other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
			other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
			other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
			other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.destination_visible = this.destination_visible;
			other.destination_avg_rating = this.destination_avg_rating;
			other.destination_total_ratings = this.destination_total_ratings;
			other.destination_reviews_count = this.destination_reviews_count;
			other.destination_evaluation_score = this.destination_evaluation_score;
			other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
			other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
			other.destination_departures_delay_index = this.destination_departures_delay_index;
			other.destination_departures_delay_avg = this.destination_departures_delay_avg;
			other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
			other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
			other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
			other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.type = this.type;

		}

		public void copyKeysDataTo(arrivalsStruct other) {

			other.flight_number = this.flight_number;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",origin_avg_rating=" + String.valueOf(origin_avg_rating));
			sb.append(",origin_total_ratings=" + String.valueOf(origin_total_ratings));
			sb.append(",origin_reviews_count=" + String.valueOf(origin_reviews_count));
			sb.append(",origin_evaluation_score=" + String.valueOf(origin_evaluation_score));
			sb.append(",origin_arrivals_delay_index=" + String.valueOf(origin_arrivals_delay_index));
			sb.append(",origin_arrivals_delay_avg=" + String.valueOf(origin_arrivals_delay_avg));
			sb.append(",origin_departures_delay_index=" + String.valueOf(origin_departures_delay_index));
			sb.append(",origin_departures_delay_avg=" + String.valueOf(origin_departures_delay_avg));
			sb.append(",origin_arrivals_today_pct_delayed=" + String.valueOf(origin_arrivals_today_pct_delayed));
			sb.append(",origin_departures_today_pct_delayed=" + String.valueOf(origin_departures_today_pct_delayed));
			sb.append(",origin_arrivals_today_pct_canceled=" + String.valueOf(origin_arrivals_today_pct_canceled));
			sb.append(",origin_departures_today_pct_canceled=" + String.valueOf(origin_departures_today_pct_canceled));
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append(",destination_avg_rating=" + String.valueOf(destination_avg_rating));
			sb.append(",destination_total_ratings=" + String.valueOf(destination_total_ratings));
			sb.append(",destination_reviews_count=" + String.valueOf(destination_reviews_count));
			sb.append(",destination_evaluation_score=" + String.valueOf(destination_evaluation_score));
			sb.append(",destination_arrivals_delay_index=" + String.valueOf(destination_arrivals_delay_index));
			sb.append(",destination_arrivals_delay_avg=" + String.valueOf(destination_arrivals_delay_avg));
			sb.append(",destination_departures_delay_index=" + String.valueOf(destination_departures_delay_index));
			sb.append(",destination_departures_delay_avg=" + String.valueOf(destination_departures_delay_avg));
			sb.append(",destination_arrivals_today_pct_delayed="
					+ String.valueOf(destination_arrivals_today_pct_delayed));
			sb.append(",destination_departures_today_pct_delayed="
					+ String.valueOf(destination_departures_today_pct_delayed));
			sb.append(",destination_arrivals_today_pct_canceled="
					+ String.valueOf(destination_arrivals_today_pct_canceled));
			sb.append(",destination_departures_today_pct_canceled="
					+ String.valueOf(destination_departures_today_pct_canceled));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(arrivalsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.flight_row_id == null) {
				if (other.flight_row_id != null)
					return false;

			} else if (!this.flight_row_id.equals(other.flight_row_id))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.flight_row_id = this.flight_row_id;
			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.destination_visible = this.destination_visible;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.flight_row_id = this.flight_row_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_row_id, other.flight_row_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tREST_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row4Struct row4 = new row4Struct();
				row8Struct row8 = new row8Struct();
				arrivalsStruct arrivals = new arrivalsStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "arrivals");
				}

				int tos_count_tDBOutput_1 = 0;

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 65 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "Raw_Flights";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;

				String properties_tDBOutput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
					properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?"
						+ properties_tDBOutput_1;

				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:VZaVIbUPWbI3OsQacHk8vJODAruMbHzwaQacp3Nl5Pw=");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("airportdata", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_1 = false;
				while (rsTable_tDBOutput_1.next()) {
					String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
					if (table_tDBOutput_1.equalsIgnoreCase("Raw_Flights")) {
						whetherExist_tDBOutput_1 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1
								+ "`(`flight_number` VARCHAR(20)  ,`flight_alternative` VARCHAR(20)  ,`status_text` VARCHAR(50)  ,`status_live` BIT(1)  ,`status_color` VARCHAR(20)  ,`aircraft_code` VARCHAR(10)  ,`aircraft_text` VARCHAR(100)  ,`aircraft_hex` VARCHAR(10)  ,`aircraft_registration` VARCHAR(20)  ,`airline_name` VARCHAR(100)  ,`airline_iata` VARCHAR(2)  ,`airline_icao` VARCHAR(3)  ,`airline_short` VARCHAR(50)  ,`origin_iata` VARCHAR(3)  ,`origin_icao` VARCHAR(4)  ,`origin_name` VARCHAR(200)  ,`origin_latitude` DECIMAL(10,7)  ,`origin_longitude` DECIMAL(10,7)  ,`origin_country` VARCHAR(100)  ,`origin_country_code` VARCHAR(2)  ,`origin_city` VARCHAR(100)  ,`origin_timezone` VARCHAR(50)  ,`origin_timezone_offset` INT(10)  ,`origin_avg_rating` DECIMAL(3,2)  ,`origin_total_ratings` INT(10)  ,`origin_reviews_count` INT(10)  ,`origin_evaluation_score` INT(10)  ,`origin_arrivals_delay_index` DECIMAL(5,2)  ,`origin_arrivals_delay_avg` INT(10)  ,`origin_departures_delay_index` DECIMAL(5,2)  ,`origin_departures_delay_avg` INT(10)  ,`origin_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`origin_departures_today_pct_delayed` DECIMAL(3,2)  ,`origin_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`origin_departures_today_pct_canceled` DECIMAL(3,2)  ,`destination_iata` VARCHAR(3)  ,`destination_icao` VARCHAR(4)  ,`destination_name` VARCHAR(200)  ,`destination_latitude` DECIMAL(10,7)  ,`destination_longitude` DECIMAL(10,7)  ,`destination_country` VARCHAR(100)  ,`destination_country_code` VARCHAR(2)  ,`destination_city` VARCHAR(100)  ,`destination_timezone` VARCHAR(50)  ,`destination_timezone_offset` INT(10)  ,`destination_visible` BIT(1)  ,`destination_avg_rating` DECIMAL(3,2)  ,`destination_total_ratings` INT(10)  ,`destination_reviews_count` INT(10)  ,`destination_evaluation_score` INT(10)  ,`destination_arrivals_delay_index` DECIMAL(5,2)  ,`destination_arrivals_delay_avg` INT(10)  ,`destination_departures_delay_index` DECIMAL(5,2)  ,`destination_departures_delay_avg` INT(10)  ,`destination_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`destination_departures_today_pct_delayed` DECIMAL(3,2)  ,`destination_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`destination_departures_today_pct_canceled` DECIMAL(3,2)  ,`scheduled_departure` BIGINT(20)  ,`scheduled_arrival` BIGINT(20)  ,`real_departure` BIGINT(20)  ,`real_arrival` BIGINT(20)  ,`estimated_departure` BIGINT(20)  ,`estimated_arrival` BIGINT(20)  ,`type` VARCHAR(10)  ,primary key(`flight_number`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM `" + "Raw_Flights" + "` WHERE `flight_number` = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO `" + "Raw_Flights"
						+ "` (`flight_number`,`flight_alternative`,`status_text`,`status_live`,`status_color`,`aircraft_code`,`aircraft_text`,`aircraft_hex`,`aircraft_registration`,`airline_name`,`airline_iata`,`airline_icao`,`airline_short`,`origin_iata`,`origin_icao`,`origin_name`,`origin_latitude`,`origin_longitude`,`origin_country`,`origin_country_code`,`origin_city`,`origin_timezone`,`origin_timezone_offset`,`origin_avg_rating`,`origin_total_ratings`,`origin_reviews_count`,`origin_evaluation_score`,`origin_arrivals_delay_index`,`origin_arrivals_delay_avg`,`origin_departures_delay_index`,`origin_departures_delay_avg`,`origin_arrivals_today_pct_delayed`,`origin_departures_today_pct_delayed`,`origin_arrivals_today_pct_canceled`,`origin_departures_today_pct_canceled`,`destination_iata`,`destination_icao`,`destination_name`,`destination_latitude`,`destination_longitude`,`destination_country`,`destination_country_code`,`destination_city`,`destination_timezone`,`destination_timezone_offset`,`destination_visible`,`destination_avg_rating`,`destination_total_ratings`,`destination_reviews_count`,`destination_evaluation_score`,`destination_arrivals_delay_index`,`destination_arrivals_delay_avg`,`destination_departures_delay_index`,`destination_departures_delay_avg`,`destination_arrivals_today_pct_delayed`,`destination_departures_today_pct_delayed`,`destination_arrivals_today_pct_canceled`,`destination_departures_today_pct_canceled`,`scheduled_departure`,`scheduled_arrival`,`real_departure`,`real_arrival`,`estimated_departure`,`estimated_arrival`,`type`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE `" + "Raw_Flights"
						+ "` SET `flight_alternative` = ?,`status_text` = ?,`status_live` = ?,`status_color` = ?,`aircraft_code` = ?,`aircraft_text` = ?,`aircraft_hex` = ?,`aircraft_registration` = ?,`airline_name` = ?,`airline_iata` = ?,`airline_icao` = ?,`airline_short` = ?,`origin_iata` = ?,`origin_icao` = ?,`origin_name` = ?,`origin_latitude` = ?,`origin_longitude` = ?,`origin_country` = ?,`origin_country_code` = ?,`origin_city` = ?,`origin_timezone` = ?,`origin_timezone_offset` = ?,`origin_avg_rating` = ?,`origin_total_ratings` = ?,`origin_reviews_count` = ?,`origin_evaluation_score` = ?,`origin_arrivals_delay_index` = ?,`origin_arrivals_delay_avg` = ?,`origin_departures_delay_index` = ?,`origin_departures_delay_avg` = ?,`origin_arrivals_today_pct_delayed` = ?,`origin_departures_today_pct_delayed` = ?,`origin_arrivals_today_pct_canceled` = ?,`origin_departures_today_pct_canceled` = ?,`destination_iata` = ?,`destination_icao` = ?,`destination_name` = ?,`destination_latitude` = ?,`destination_longitude` = ?,`destination_country` = ?,`destination_country_code` = ?,`destination_city` = ?,`destination_timezone` = ?,`destination_timezone_offset` = ?,`destination_visible` = ?,`destination_avg_rating` = ?,`destination_total_ratings` = ?,`destination_reviews_count` = ?,`destination_evaluation_score` = ?,`destination_arrivals_delay_index` = ?,`destination_arrivals_delay_avg` = ?,`destination_departures_delay_index` = ?,`destination_departures_delay_avg` = ?,`destination_arrivals_today_pct_delayed` = ?,`destination_departures_today_pct_delayed` = ?,`destination_arrivals_today_pct_canceled` = ?,`destination_departures_today_pct_canceled` = ?,`scheduled_departure` = ?,`scheduled_arrival` = ?,`real_departure` = ?,`real_arrival` = ?,`estimated_departure` = ?,`estimated_arrival` = ?,`type` = ? WHERE `flight_number` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				arrivalsStruct arrivals_tmp = new arrivalsStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Long flight_row_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.flight_row_id == null) {
							if (other.flight_row_id != null)
								return false;

						} else if (!this.flight_row_id.equals(other.flight_row_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_3 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_3", false);
				start_Hash.put("tExtractJSONFields_3", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tExtractJSONFields_3 = 0;

				int nb_line_tExtractJSONFields_3 = 0;
				String jsonStr_tExtractJSONFields_3 = "";

				class JsonPathCache_tExtractJSONFields_3 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_3 jsonPathCache_tExtractJSONFields_3 = new JsonPathCache_tExtractJSONFields_3();

				/**
				 * [tExtractJSONFields_3 begin ] stop
				 */

				/**
				 * [tREST_1 begin ] start
				 */

				ok_Hash.put("tREST_1", false);
				start_Hash.put("tREST_1", System.currentTimeMillis());

				currentComponent = "tREST_1";

				int tos_count_tREST_1 = 0;

				String endpoint_tREST_1 = "https://api.flightapi.io/schedule/" + context.apikey
						+ "?mode=arrivals&iata=DJE&day=-2";

				String trustStoreFile_tREST_1 = System.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_1 = System.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_1 = System.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_1 = System.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_1 = System.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_1 = System.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_1 = null;
				if (trustStoreFile_tREST_1 != null && trustStoreType_tREST_1 != null) {
					char[] password_tREST_1 = null;
					if (trustStorePWD_tREST_1 != null)
						password_tREST_1 = trustStorePWD_tREST_1.toCharArray();
					java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_1);
					trustStore_tREST_1.load(new java.io.FileInputStream(trustStoreFile_tREST_1), password_tREST_1);

					javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					tmf_tREST_1.init(trustStore_tREST_1);
					tms_tREST_1 = tmf_tREST_1.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_1 = null;
				if (keyStoreFile_tREST_1 != null && keyStoreType_tREST_1 != null) {
					char[] password_tREST_1 = null;
					if (keyStorePWD_tREST_1 != null)
						password_tREST_1 = keyStorePWD_tREST_1.toCharArray();
					java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore.getInstance(keyStoreType_tREST_1);
					keyStore_tREST_1.load(new java.io.FileInputStream(keyStoreFile_tREST_1), password_tREST_1);

					javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					kmf_tREST_1.init(keyStore_tREST_1, password_tREST_1);
					kms_tREST_1 = kmf_tREST_1.getKeyManagers();
				}

				ctx_tREST_1.init(kms_tREST_1, tms_tREST_1, null);
				config_tREST_1.getProperties().put(
						com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
						new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

							public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
								return true;
							}
						}, ctx_tREST_1));

				com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client
						.create(config_tREST_1);

				java.util.Map<String, Object> headers_tREST_1 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_1 = headers_tREST_1.get("Transfer-Encoding");
				if (transfer_encoding_tREST_1 != null && "chunked".equals(transfer_encoding_tREST_1)) {
					restClient_tREST_1.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_1;
				if (endpoint_tREST_1 != null && !("").equals(endpoint_tREST_1)) {
					restResource_tREST_1 = restClient_tREST_1.resource(endpoint_tREST_1);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
				String restResponse_tREST_1 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_1 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_1 : headers_tREST_1.entrySet()) {
						if (builder_tREST_1 == null) {
							builder_tREST_1 = restResource_tREST_1.header(header_tREST_1.getKey(),
									header_tREST_1.getValue());
						} else {
							builder_tREST_1.header(header_tREST_1.getKey(), header_tREST_1.getValue());
						}
					}

					if (builder_tREST_1 != null) {
						restResponse_tREST_1 = builder_tREST_1.get(String.class);
					} else {
						restResponse_tREST_1 = restResource_tREST_1.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					globalMap.put("tREST_1_ERROR_MESSAGE", ue.getMessage());
					errorResponse_tREST_1 = ue.getResponse();
				}

				// for output

				row1 = new row1Struct();
				if (errorResponse_tREST_1 != null) {
					row1.ERROR_CODE = errorResponse_tREST_1.getStatus();
					if (row1.ERROR_CODE != 204) {
						row1.Body = errorResponse_tREST_1.getEntity(String.class);
					}
				} else {
					row1.Body = restResponse_tREST_1;
				}

				/**
				 * [tREST_1 begin ] stop
				 */

				/**
				 * [tREST_1 main ] start
				 */

				currentComponent = "tREST_1";

				tos_count_tREST_1++;

				/**
				 * [tREST_1 main ] stop
				 */

				/**
				 * [tREST_1 process_data_begin ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 process_data_begin ] stop
				 */

				/**
				 * [tExtractJSONFields_3 main ] start
				 */

				currentComponent = "tExtractJSONFields_3";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1

							, "row1"

					);
				}

				if (row1.Body != null) {// C_01
					jsonStr_tExtractJSONFields_3 = row1.Body.toString();

					row4 = null;

					String loopPath_tExtractJSONFields_3 = "$.airport.pluginData.schedule.arrivals.data[*]";
					java.util.List<Object> resultset_tExtractJSONFields_3 = new java.util.ArrayList<Object>();

					boolean isStructError_tExtractJSONFields_3 = true;
					com.jayway.jsonpath.ReadContext document_tExtractJSONFields_3 = null;
					try {
						document_tExtractJSONFields_3 = com.jayway.jsonpath.JsonPath
								.parse(jsonStr_tExtractJSONFields_3);
						com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
								.getCompiledJsonPath(loopPath_tExtractJSONFields_3);
						Object result_tExtractJSONFields_3 = document_tExtractJSONFields_3
								.read(compiledLoopPath_tExtractJSONFields_3, net.minidev.json.JSONObject.class);
						if (result_tExtractJSONFields_3 instanceof net.minidev.json.JSONArray) {
							resultset_tExtractJSONFields_3 = (net.minidev.json.JSONArray) result_tExtractJSONFields_3;
						} else {
							resultset_tExtractJSONFields_3.add(result_tExtractJSONFields_3);
						}

						isStructError_tExtractJSONFields_3 = false;
					} catch (java.lang.Exception ex_tExtractJSONFields_3) {
						globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE", ex_tExtractJSONFields_3.getMessage());
						System.err.println(ex_tExtractJSONFields_3.getMessage());
					}

					String jsonPath_tExtractJSONFields_3 = null;
					com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_3 = null;

					Object value_tExtractJSONFields_3 = null;

					Object root_tExtractJSONFields_3 = null;
					for (int i_tExtractJSONFields_3 = 0; isStructError_tExtractJSONFields_3
							|| (i_tExtractJSONFields_3 < resultset_tExtractJSONFields_3
									.size()); i_tExtractJSONFields_3++) {
						if (!isStructError_tExtractJSONFields_3) {
							Object row_tExtractJSONFields_3 = resultset_tExtractJSONFields_3
									.get(i_tExtractJSONFields_3);
							row4 = null;
							row4 = new row4Struct();
							nb_line_tExtractJSONFields_3++;
							try {
								jsonPath_tExtractJSONFields_3 = "$.flight.identification.row";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.flight_row_id = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_3.toString());
									} else {
										row4.flight_row_id =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.flight_row_id =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.identification.number.default";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.flight_number = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.flight_number =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.identification.number.alternative";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.flight_alternative = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.flight_alternative =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.status.text";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.status_text = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.status_text =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.status.live";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.status_live = ParserUtils
												.parseTo_Boolean(value_tExtractJSONFields_3.toString());
									} else {
										row4.status_live =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.status_live =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.status.generic.status.color";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.status_color = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.status_color =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.aircraft.model.code";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.aircraft_code = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.aircraft_code =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.aircraft.model.text";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.aircraft_text = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.aircraft_text =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.aircraft.hex";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.aircraft_hex = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.aircraft_hex =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.aircraft.registration";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.aircraft_registration = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.aircraft_registration =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airline.name";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.airline_name = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.airline_name =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airline.code.iata";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.airline_iata = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.airline_iata =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airline.code.icao";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.airline_icao = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.airline_icao =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airline.short";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.airline_short = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.airline_short =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.code.iata";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.origin_iata = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_iata =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.code.icao";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.origin_icao = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_icao =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.name";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.origin_name = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_name =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.position.latitude";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.origin_latitude = ParserUtils
												.parseTo_BigDecimal(value_tExtractJSONFields_3.toString());
									} else {
										row4.origin_latitude =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_latitude =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.position.longitude";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.origin_longitude = ParserUtils
												.parseTo_BigDecimal(value_tExtractJSONFields_3.toString());
									} else {
										row4.origin_longitude =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_longitude =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.position.country.name";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.origin_country = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_country =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.position.country.code";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.origin_country_code = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_country_code =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.position.region.city";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.origin_city = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_city =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.timezone.name";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									row4.origin_timezone = value_tExtractJSONFields_3 == null ?

											null

											: value_tExtractJSONFields_3.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_timezone =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.origin.timezone.offset";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.origin_timezone_offset = ParserUtils
												.parseTo_Integer(value_tExtractJSONFields_3.toString());
									} else {
										row4.origin_timezone_offset =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.origin_timezone_offset =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.time.scheduled.departure";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.scheduled_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_3.toString());
									} else {
										row4.scheduled_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.scheduled_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.time.scheduled.arrival";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.scheduled_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_3.toString());
									} else {
										row4.scheduled_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.scheduled_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.time.real.departure";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.real_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_3.toString());
									} else {
										row4.real_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.real_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.time.real.arrival";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.real_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_3.toString());
									} else {
										row4.real_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.real_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.time.estimated.departure";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.estimated_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_3.toString());
									} else {
										row4.estimated_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.estimated_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.time.estimated.arrival";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.estimated_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_3.toString());
									} else {
										row4.estimated_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.estimated_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_3 = "$.flight.airport.destination.visible";
								compiledJsonPath_tExtractJSONFields_3 = jsonPathCache_tExtractJSONFields_3
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_3);

								try {

									value_tExtractJSONFields_3 = compiledJsonPath_tExtractJSONFields_3
											.read(row_tExtractJSONFields_3);

									if (value_tExtractJSONFields_3 != null
											&& !value_tExtractJSONFields_3.toString().isEmpty()) {
										row4.destination_visible = ParserUtils
												.parseTo_Boolean(value_tExtractJSONFields_3.toString());
									} else {
										row4.destination_visible =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_3) {
									globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
											e_tExtractJSONFields_3.getMessage());
									row4.destination_visible =

											null

									;
								}
							} catch (java.lang.Exception ex_tExtractJSONFields_3) {
								globalMap.put("tExtractJSONFields_3_ERROR_MESSAGE",
										ex_tExtractJSONFields_3.getMessage());
								System.err.println(ex_tExtractJSONFields_3.getMessage());
								row4 = null;
							}

						}

						isStructError_tExtractJSONFields_3 = false;

//}

						tos_count_tExtractJSONFields_3++;

						/**
						 * [tExtractJSONFields_3 main ] stop
						 */

						/**
						 * [tExtractJSONFields_3 process_data_begin ] start
						 */

						currentComponent = "tExtractJSONFields_3";

						/**
						 * [tExtractJSONFields_3 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tUniqRow_3 main ] start
							 */

							currentComponent = "tUniqRow_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row4"

								);
							}

							row8 = null;
							finder_tUniqRow_3.flight_row_id = row4.flight_row_id;
							finder_tUniqRow_3.hashCodeDirty = true;
							if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
								KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

								new_tUniqRow_3.flight_row_id = row4.flight_row_id;

								keystUniqRow_3.add(new_tUniqRow_3);
								if (row8 == null) {

									row8 = new row8Struct();
								}
								row8.flight_row_id = row4.flight_row_id;
								row8.flight_number = row4.flight_number;
								row8.flight_alternative = row4.flight_alternative;
								row8.status_text = row4.status_text;
								row8.status_live = row4.status_live;
								row8.status_color = row4.status_color;
								row8.aircraft_code = row4.aircraft_code;
								row8.aircraft_text = row4.aircraft_text;
								row8.aircraft_hex = row4.aircraft_hex;
								row8.aircraft_registration = row4.aircraft_registration;
								row8.airline_name = row4.airline_name;
								row8.airline_iata = row4.airline_iata;
								row8.airline_icao = row4.airline_icao;
								row8.airline_short = row4.airline_short;
								row8.origin_iata = row4.origin_iata;
								row8.origin_icao = row4.origin_icao;
								row8.origin_name = row4.origin_name;
								row8.origin_latitude = row4.origin_latitude;
								row8.origin_longitude = row4.origin_longitude;
								row8.origin_country = row4.origin_country;
								row8.origin_country_code = row4.origin_country_code;
								row8.origin_city = row4.origin_city;
								row8.origin_timezone = row4.origin_timezone;
								row8.origin_timezone_offset = row4.origin_timezone_offset;
								row8.scheduled_departure = row4.scheduled_departure;
								row8.scheduled_arrival = row4.scheduled_arrival;
								row8.real_departure = row4.real_departure;
								row8.real_arrival = row4.real_arrival;
								row8.estimated_departure = row4.estimated_departure;
								row8.estimated_arrival = row4.estimated_arrival;
								row8.destination_visible = row4.destination_visible;
								nb_uniques_tUniqRow_3++;
							} else {
								nb_duplicates_tUniqRow_3++;
							}

							tos_count_tUniqRow_3++;

							/**
							 * [tUniqRow_3 main ] stop
							 */

							/**
							 * [tUniqRow_3 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_3";

							/**
							 * [tUniqRow_3 process_data_begin ] stop
							 */
// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row8"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									arrivals = null;

// # Output table : 'arrivals'
									arrivals_tmp.flight_number = row8.flight_number;
									arrivals_tmp.flight_alternative = row8.flight_alternative;
									arrivals_tmp.status_text = row8.status_text;
									arrivals_tmp.status_live = row8.status_live;
									arrivals_tmp.status_color = row8.status_color;
									arrivals_tmp.aircraft_code = row8.aircraft_code;
									arrivals_tmp.aircraft_text = row8.aircraft_text;
									arrivals_tmp.aircraft_hex = row8.aircraft_hex;
									arrivals_tmp.aircraft_registration = row8.aircraft_registration;
									arrivals_tmp.airline_name = row8.airline_name;
									arrivals_tmp.airline_iata = row8.airline_iata;
									arrivals_tmp.airline_icao = row8.airline_icao;
									arrivals_tmp.airline_short = row8.airline_short;
									arrivals_tmp.origin_iata = row8.origin_iata;
									arrivals_tmp.origin_icao = row8.origin_icao;
									arrivals_tmp.origin_name = row8.origin_name;
									arrivals_tmp.origin_latitude = row8.origin_latitude;
									arrivals_tmp.origin_longitude = row8.origin_longitude;
									arrivals_tmp.origin_country = row8.origin_country;
									arrivals_tmp.origin_country_code = row8.origin_country_code;
									arrivals_tmp.origin_city = row8.origin_city;
									arrivals_tmp.origin_timezone = row8.origin_timezone;
									arrivals_tmp.origin_timezone_offset = row8.origin_timezone_offset;
									arrivals_tmp.origin_avg_rating = null;
									arrivals_tmp.origin_total_ratings = null;
									arrivals_tmp.origin_reviews_count = null;
									arrivals_tmp.origin_evaluation_score = null;
									arrivals_tmp.origin_arrivals_delay_index = null;
									arrivals_tmp.origin_arrivals_delay_avg = null;
									arrivals_tmp.origin_departures_delay_index = null;
									arrivals_tmp.origin_departures_delay_avg = null;
									arrivals_tmp.origin_arrivals_today_pct_delayed = null;
									arrivals_tmp.origin_departures_today_pct_delayed = null;
									arrivals_tmp.origin_arrivals_today_pct_canceled = null;
									arrivals_tmp.origin_departures_today_pct_canceled = null;
									arrivals_tmp.destination_iata = (String) globalMap.get("iata_code");
									arrivals_tmp.destination_icao = (String) globalMap.get("icao_code");
									arrivals_tmp.destination_name = (String) globalMap.get("country_name");
									arrivals_tmp.destination_latitude = (BigDecimal) globalMap.get("latitude");
									arrivals_tmp.destination_longitude = (BigDecimal) globalMap.get("longitude");
									arrivals_tmp.destination_country = (String) globalMap.get("country_name");
									arrivals_tmp.destination_country_code = (String) globalMap.get("country_code");
									arrivals_tmp.destination_city = (String) globalMap.get("city");
									arrivals_tmp.destination_timezone = (String) globalMap.get("timezone_name");
									arrivals_tmp.destination_timezone_offset = (Integer) globalMap
											.get("timezone_offset");
									arrivals_tmp.destination_visible = (Boolean) globalMap.get("is_visible");
									arrivals_tmp.destination_avg_rating = (BigDecimal) globalMap.get("avg_rating");
									arrivals_tmp.destination_total_ratings = (Integer) globalMap.get("total_ratings");
									arrivals_tmp.destination_reviews_count = (Integer) globalMap.get("reviews_count");
									arrivals_tmp.destination_evaluation_score = (Integer) globalMap
											.get("evaluation_score");
									arrivals_tmp.destination_arrivals_delay_index = (BigDecimal) globalMap
											.get("arrivals_delay_index");
									arrivals_tmp.destination_arrivals_delay_avg = (Integer) globalMap
											.get("arrivals_delay_avg");
									arrivals_tmp.destination_departures_delay_index = (BigDecimal) globalMap
											.get("departures_delay_index");
									arrivals_tmp.destination_departures_delay_avg = (Integer) globalMap
											.get("departures_delay_avg");
									arrivals_tmp.destination_arrivals_today_pct_delayed = (BigDecimal) globalMap
											.get("arrivals_today_pct_delayed");
									arrivals_tmp.destination_departures_today_pct_delayed = (BigDecimal) globalMap
											.get("departures_today_pct_delayed");
									arrivals_tmp.destination_arrivals_today_pct_canceled = (BigDecimal) globalMap
											.get("arrivals_today_pct_canceled");
									arrivals_tmp.destination_departures_today_pct_canceled = (BigDecimal) globalMap
											.get("departures_today_pct_canceled");
									arrivals_tmp.scheduled_departure = row8.scheduled_departure;
									arrivals_tmp.scheduled_arrival = row8.scheduled_arrival;
									arrivals_tmp.real_departure = row8.real_departure;
									arrivals_tmp.real_arrival = row8.real_arrival;
									arrivals_tmp.estimated_departure = row8.estimated_departure;
									arrivals_tmp.estimated_arrival = row8.estimated_arrival;
									arrivals_tmp.type = "Arrival";
									arrivals = arrivals_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "arrivals"
								if (arrivals != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "arrivals"

										);
									}

									whetherReject_tDBOutput_1 = false;
									if (arrivals.flight_number == null) {
										pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(1, arrivals.flight_number);
									}

									int checkCount_tDBOutput_1 = -1;
									try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
										while (rs_tDBOutput_1.next()) {
											checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
										}
									}
									if (checkCount_tDBOutput_1 > 0) {
										if (arrivals.flight_alternative == null) {
											pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(1, arrivals.flight_alternative);
										}

										if (arrivals.status_text == null) {
											pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(2, arrivals.status_text);
										}

										if (arrivals.status_live == null) {
											pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.BOOLEAN);
										} else {
											pstmtUpdate_tDBOutput_1.setBoolean(3, arrivals.status_live);
										}

										if (arrivals.status_color == null) {
											pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(4, arrivals.status_color);
										}

										if (arrivals.aircraft_code == null) {
											pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(5, arrivals.aircraft_code);
										}

										if (arrivals.aircraft_text == null) {
											pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(6, arrivals.aircraft_text);
										}

										if (arrivals.aircraft_hex == null) {
											pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(7, arrivals.aircraft_hex);
										}

										if (arrivals.aircraft_registration == null) {
											pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(8, arrivals.aircraft_registration);
										}

										if (arrivals.airline_name == null) {
											pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(9, arrivals.airline_name);
										}

										if (arrivals.airline_iata == null) {
											pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(10, arrivals.airline_iata);
										}

										if (arrivals.airline_icao == null) {
											pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(11, arrivals.airline_icao);
										}

										if (arrivals.airline_short == null) {
											pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(12, arrivals.airline_short);
										}

										if (arrivals.origin_iata == null) {
											pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(13, arrivals.origin_iata);
										}

										if (arrivals.origin_icao == null) {
											pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(14, arrivals.origin_icao);
										}

										if (arrivals.origin_name == null) {
											pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(15, arrivals.origin_name);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(16, arrivals.origin_latitude);

										pstmtUpdate_tDBOutput_1.setBigDecimal(17, arrivals.origin_longitude);

										if (arrivals.origin_country == null) {
											pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(18, arrivals.origin_country);
										}

										if (arrivals.origin_country_code == null) {
											pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(19, arrivals.origin_country_code);
										}

										if (arrivals.origin_city == null) {
											pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(20, arrivals.origin_city);
										}

										if (arrivals.origin_timezone == null) {
											pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(21, arrivals.origin_timezone);
										}

										if (arrivals.origin_timezone_offset == null) {
											pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(22, arrivals.origin_timezone_offset);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(23, arrivals.origin_avg_rating);

										if (arrivals.origin_total_ratings == null) {
											pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(24, arrivals.origin_total_ratings);
										}

										if (arrivals.origin_reviews_count == null) {
											pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(25, arrivals.origin_reviews_count);
										}

										if (arrivals.origin_evaluation_score == null) {
											pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(26, arrivals.origin_evaluation_score);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(27, arrivals.origin_arrivals_delay_index);

										if (arrivals.origin_arrivals_delay_avg == null) {
											pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(28, arrivals.origin_arrivals_delay_avg);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(29,
												arrivals.origin_departures_delay_index);

										if (arrivals.origin_departures_delay_avg == null) {
											pstmtUpdate_tDBOutput_1.setNull(30, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(30, arrivals.origin_departures_delay_avg);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(31,
												arrivals.origin_arrivals_today_pct_delayed);

										pstmtUpdate_tDBOutput_1.setBigDecimal(32,
												arrivals.origin_departures_today_pct_delayed);

										pstmtUpdate_tDBOutput_1.setBigDecimal(33,
												arrivals.origin_arrivals_today_pct_canceled);

										pstmtUpdate_tDBOutput_1.setBigDecimal(34,
												arrivals.origin_departures_today_pct_canceled);

										if (arrivals.destination_iata == null) {
											pstmtUpdate_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(35, arrivals.destination_iata);
										}

										if (arrivals.destination_icao == null) {
											pstmtUpdate_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(36, arrivals.destination_icao);
										}

										if (arrivals.destination_name == null) {
											pstmtUpdate_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(37, arrivals.destination_name);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(38, arrivals.destination_latitude);

										pstmtUpdate_tDBOutput_1.setBigDecimal(39, arrivals.destination_longitude);

										if (arrivals.destination_country == null) {
											pstmtUpdate_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(40, arrivals.destination_country);
										}

										if (arrivals.destination_country_code == null) {
											pstmtUpdate_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(41, arrivals.destination_country_code);
										}

										if (arrivals.destination_city == null) {
											pstmtUpdate_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(42, arrivals.destination_city);
										}

										if (arrivals.destination_timezone == null) {
											pstmtUpdate_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(43, arrivals.destination_timezone);
										}

										if (arrivals.destination_timezone_offset == null) {
											pstmtUpdate_tDBOutput_1.setNull(44, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(44, arrivals.destination_timezone_offset);
										}

										if (arrivals.destination_visible == null) {
											pstmtUpdate_tDBOutput_1.setNull(45, java.sql.Types.BOOLEAN);
										} else {
											pstmtUpdate_tDBOutput_1.setBoolean(45, arrivals.destination_visible);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(46, arrivals.destination_avg_rating);

										if (arrivals.destination_total_ratings == null) {
											pstmtUpdate_tDBOutput_1.setNull(47, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(47, arrivals.destination_total_ratings);
										}

										if (arrivals.destination_reviews_count == null) {
											pstmtUpdate_tDBOutput_1.setNull(48, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(48, arrivals.destination_reviews_count);
										}

										if (arrivals.destination_evaluation_score == null) {
											pstmtUpdate_tDBOutput_1.setNull(49, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(49, arrivals.destination_evaluation_score);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(50,
												arrivals.destination_arrivals_delay_index);

										if (arrivals.destination_arrivals_delay_avg == null) {
											pstmtUpdate_tDBOutput_1.setNull(51, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(51, arrivals.destination_arrivals_delay_avg);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(52,
												arrivals.destination_departures_delay_index);

										if (arrivals.destination_departures_delay_avg == null) {
											pstmtUpdate_tDBOutput_1.setNull(53, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setInt(53,
													arrivals.destination_departures_delay_avg);
										}

										pstmtUpdate_tDBOutput_1.setBigDecimal(54,
												arrivals.destination_arrivals_today_pct_delayed);

										pstmtUpdate_tDBOutput_1.setBigDecimal(55,
												arrivals.destination_departures_today_pct_delayed);

										pstmtUpdate_tDBOutput_1.setBigDecimal(56,
												arrivals.destination_arrivals_today_pct_canceled);

										pstmtUpdate_tDBOutput_1.setBigDecimal(57,
												arrivals.destination_departures_today_pct_canceled);

										if (arrivals.scheduled_departure == null) {
											pstmtUpdate_tDBOutput_1.setNull(58, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setLong(58, arrivals.scheduled_departure);
										}

										if (arrivals.scheduled_arrival == null) {
											pstmtUpdate_tDBOutput_1.setNull(59, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setLong(59, arrivals.scheduled_arrival);
										}

										if (arrivals.real_departure == null) {
											pstmtUpdate_tDBOutput_1.setNull(60, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setLong(60, arrivals.real_departure);
										}

										if (arrivals.real_arrival == null) {
											pstmtUpdate_tDBOutput_1.setNull(61, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setLong(61, arrivals.real_arrival);
										}

										if (arrivals.estimated_departure == null) {
											pstmtUpdate_tDBOutput_1.setNull(62, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setLong(62, arrivals.estimated_departure);
										}

										if (arrivals.estimated_arrival == null) {
											pstmtUpdate_tDBOutput_1.setNull(63, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_1.setLong(63, arrivals.estimated_arrival);
										}

										if (arrivals.type == null) {
											pstmtUpdate_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(64, arrivals.type);
										}

										if (arrivals.flight_number == null) {
											pstmtUpdate_tDBOutput_1.setNull(65 + count_tDBOutput_1,
													java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_1.setString(65 + count_tDBOutput_1,
													arrivals.flight_number);
										}

										try {
											int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
											updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
											rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
											nb_line_tDBOutput_1++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_1 = true;
											nb_line_tDBOutput_1++;
											System.err.print(e.getMessage());
										}
									} else {
										if (arrivals.flight_number == null) {
											pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(1, arrivals.flight_number);
										}

										if (arrivals.flight_alternative == null) {
											pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(2, arrivals.flight_alternative);
										}

										if (arrivals.status_text == null) {
											pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(3, arrivals.status_text);
										}

										if (arrivals.status_live == null) {
											pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.BOOLEAN);
										} else {
											pstmtInsert_tDBOutput_1.setBoolean(4, arrivals.status_live);
										}

										if (arrivals.status_color == null) {
											pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(5, arrivals.status_color);
										}

										if (arrivals.aircraft_code == null) {
											pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(6, arrivals.aircraft_code);
										}

										if (arrivals.aircraft_text == null) {
											pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(7, arrivals.aircraft_text);
										}

										if (arrivals.aircraft_hex == null) {
											pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(8, arrivals.aircraft_hex);
										}

										if (arrivals.aircraft_registration == null) {
											pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(9, arrivals.aircraft_registration);
										}

										if (arrivals.airline_name == null) {
											pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(10, arrivals.airline_name);
										}

										if (arrivals.airline_iata == null) {
											pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(11, arrivals.airline_iata);
										}

										if (arrivals.airline_icao == null) {
											pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(12, arrivals.airline_icao);
										}

										if (arrivals.airline_short == null) {
											pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(13, arrivals.airline_short);
										}

										if (arrivals.origin_iata == null) {
											pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(14, arrivals.origin_iata);
										}

										if (arrivals.origin_icao == null) {
											pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(15, arrivals.origin_icao);
										}

										if (arrivals.origin_name == null) {
											pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(16, arrivals.origin_name);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(17, arrivals.origin_latitude);

										pstmtInsert_tDBOutput_1.setBigDecimal(18, arrivals.origin_longitude);

										if (arrivals.origin_country == null) {
											pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(19, arrivals.origin_country);
										}

										if (arrivals.origin_country_code == null) {
											pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(20, arrivals.origin_country_code);
										}

										if (arrivals.origin_city == null) {
											pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(21, arrivals.origin_city);
										}

										if (arrivals.origin_timezone == null) {
											pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(22, arrivals.origin_timezone);
										}

										if (arrivals.origin_timezone_offset == null) {
											pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(23, arrivals.origin_timezone_offset);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(24, arrivals.origin_avg_rating);

										if (arrivals.origin_total_ratings == null) {
											pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(25, arrivals.origin_total_ratings);
										}

										if (arrivals.origin_reviews_count == null) {
											pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(26, arrivals.origin_reviews_count);
										}

										if (arrivals.origin_evaluation_score == null) {
											pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(27, arrivals.origin_evaluation_score);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(28, arrivals.origin_arrivals_delay_index);

										if (arrivals.origin_arrivals_delay_avg == null) {
											pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(29, arrivals.origin_arrivals_delay_avg);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(30,
												arrivals.origin_departures_delay_index);

										if (arrivals.origin_departures_delay_avg == null) {
											pstmtInsert_tDBOutput_1.setNull(31, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(31, arrivals.origin_departures_delay_avg);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(32,
												arrivals.origin_arrivals_today_pct_delayed);

										pstmtInsert_tDBOutput_1.setBigDecimal(33,
												arrivals.origin_departures_today_pct_delayed);

										pstmtInsert_tDBOutput_1.setBigDecimal(34,
												arrivals.origin_arrivals_today_pct_canceled);

										pstmtInsert_tDBOutput_1.setBigDecimal(35,
												arrivals.origin_departures_today_pct_canceled);

										if (arrivals.destination_iata == null) {
											pstmtInsert_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(36, arrivals.destination_iata);
										}

										if (arrivals.destination_icao == null) {
											pstmtInsert_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(37, arrivals.destination_icao);
										}

										if (arrivals.destination_name == null) {
											pstmtInsert_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(38, arrivals.destination_name);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(39, arrivals.destination_latitude);

										pstmtInsert_tDBOutput_1.setBigDecimal(40, arrivals.destination_longitude);

										if (arrivals.destination_country == null) {
											pstmtInsert_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(41, arrivals.destination_country);
										}

										if (arrivals.destination_country_code == null) {
											pstmtInsert_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(42, arrivals.destination_country_code);
										}

										if (arrivals.destination_city == null) {
											pstmtInsert_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(43, arrivals.destination_city);
										}

										if (arrivals.destination_timezone == null) {
											pstmtInsert_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(44, arrivals.destination_timezone);
										}

										if (arrivals.destination_timezone_offset == null) {
											pstmtInsert_tDBOutput_1.setNull(45, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(45, arrivals.destination_timezone_offset);
										}

										if (arrivals.destination_visible == null) {
											pstmtInsert_tDBOutput_1.setNull(46, java.sql.Types.BOOLEAN);
										} else {
											pstmtInsert_tDBOutput_1.setBoolean(46, arrivals.destination_visible);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(47, arrivals.destination_avg_rating);

										if (arrivals.destination_total_ratings == null) {
											pstmtInsert_tDBOutput_1.setNull(48, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(48, arrivals.destination_total_ratings);
										}

										if (arrivals.destination_reviews_count == null) {
											pstmtInsert_tDBOutput_1.setNull(49, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(49, arrivals.destination_reviews_count);
										}

										if (arrivals.destination_evaluation_score == null) {
											pstmtInsert_tDBOutput_1.setNull(50, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(50, arrivals.destination_evaluation_score);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(51,
												arrivals.destination_arrivals_delay_index);

										if (arrivals.destination_arrivals_delay_avg == null) {
											pstmtInsert_tDBOutput_1.setNull(52, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(52, arrivals.destination_arrivals_delay_avg);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(53,
												arrivals.destination_departures_delay_index);

										if (arrivals.destination_departures_delay_avg == null) {
											pstmtInsert_tDBOutput_1.setNull(54, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setInt(54,
													arrivals.destination_departures_delay_avg);
										}

										pstmtInsert_tDBOutput_1.setBigDecimal(55,
												arrivals.destination_arrivals_today_pct_delayed);

										pstmtInsert_tDBOutput_1.setBigDecimal(56,
												arrivals.destination_departures_today_pct_delayed);

										pstmtInsert_tDBOutput_1.setBigDecimal(57,
												arrivals.destination_arrivals_today_pct_canceled);

										pstmtInsert_tDBOutput_1.setBigDecimal(58,
												arrivals.destination_departures_today_pct_canceled);

										if (arrivals.scheduled_departure == null) {
											pstmtInsert_tDBOutput_1.setNull(59, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setLong(59, arrivals.scheduled_departure);
										}

										if (arrivals.scheduled_arrival == null) {
											pstmtInsert_tDBOutput_1.setNull(60, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setLong(60, arrivals.scheduled_arrival);
										}

										if (arrivals.real_departure == null) {
											pstmtInsert_tDBOutput_1.setNull(61, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setLong(61, arrivals.real_departure);
										}

										if (arrivals.real_arrival == null) {
											pstmtInsert_tDBOutput_1.setNull(62, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setLong(62, arrivals.real_arrival);
										}

										if (arrivals.estimated_departure == null) {
											pstmtInsert_tDBOutput_1.setNull(63, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setLong(63, arrivals.estimated_departure);
										}

										if (arrivals.estimated_arrival == null) {
											pstmtInsert_tDBOutput_1.setNull(64, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_1.setLong(64, arrivals.estimated_arrival);
										}

										if (arrivals.type == null) {
											pstmtInsert_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_1.setString(65, arrivals.type);
										}

										try {
											int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
											insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
											rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
											nb_line_tDBOutput_1++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_1 = true;
											nb_line_tDBOutput_1++;
											System.err.print(e.getMessage());
										}
									}
									if (!whetherReject_tDBOutput_1) {
									}
									commitCounter_tDBOutput_1++;

									if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

										if (rowsToCommitCount_tDBOutput_1 != 0) {
										}
										conn_tDBOutput_1.commit();
										if (rowsToCommitCount_tDBOutput_1 != 0) {
											rowsToCommitCount_tDBOutput_1 = 0;
										}
										commitCounter_tDBOutput_1 = 0;

									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "arrivals"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tUniqRow_3 process_data_end ] start
							 */

							currentComponent = "tUniqRow_3";

							/**
							 * [tUniqRow_3 process_data_end ] stop
							 */

						} // End of branch "row4"

						// end for
					}

				} // C_01

				/**
				 * [tExtractJSONFields_3 process_data_end ] start
				 */

				currentComponent = "tExtractJSONFields_3";

				/**
				 * [tExtractJSONFields_3 process_data_end ] stop
				 */

				/**
				 * [tREST_1 process_data_end ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 process_data_end ] stop
				 */

				/**
				 * [tREST_1 end ] start
				 */

				currentComponent = "tREST_1";

				ok_Hash.put("tREST_1", true);
				end_Hash.put("tREST_1", System.currentTimeMillis());

				/**
				 * [tREST_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_3 end ] start
				 */

				currentComponent = "tExtractJSONFields_3";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tExtractJSONFields_3", true);
				end_Hash.put("tExtractJSONFields_3", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_3 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "arrivals");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tREST_2Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_1 finally ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_3 finally ] start
				 */

				currentComponent = "tExtractJSONFields_3";

				/**
				 * [tExtractJSONFields_3 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfdeparturesStruct implements routines.system.IPersistableRow<copyOfdeparturesStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public BigDecimal origin_avg_rating;

		public BigDecimal getOrigin_avg_rating() {
			return this.origin_avg_rating;
		}

		public Integer origin_total_ratings;

		public Integer getOrigin_total_ratings() {
			return this.origin_total_ratings;
		}

		public Integer origin_reviews_count;

		public Integer getOrigin_reviews_count() {
			return this.origin_reviews_count;
		}

		public Integer origin_evaluation_score;

		public Integer getOrigin_evaluation_score() {
			return this.origin_evaluation_score;
		}

		public BigDecimal origin_arrivals_delay_index;

		public BigDecimal getOrigin_arrivals_delay_index() {
			return this.origin_arrivals_delay_index;
		}

		public Integer origin_arrivals_delay_avg;

		public Integer getOrigin_arrivals_delay_avg() {
			return this.origin_arrivals_delay_avg;
		}

		public BigDecimal origin_departures_delay_index;

		public BigDecimal getOrigin_departures_delay_index() {
			return this.origin_departures_delay_index;
		}

		public Integer origin_departures_delay_avg;

		public Integer getOrigin_departures_delay_avg() {
			return this.origin_departures_delay_avg;
		}

		public BigDecimal origin_arrivals_today_pct_delayed;

		public BigDecimal getOrigin_arrivals_today_pct_delayed() {
			return this.origin_arrivals_today_pct_delayed;
		}

		public BigDecimal origin_departures_today_pct_delayed;

		public BigDecimal getOrigin_departures_today_pct_delayed() {
			return this.origin_departures_today_pct_delayed;
		}

		public BigDecimal origin_arrivals_today_pct_canceled;

		public BigDecimal getOrigin_arrivals_today_pct_canceled() {
			return this.origin_arrivals_today_pct_canceled;
		}

		public BigDecimal origin_departures_today_pct_canceled;

		public BigDecimal getOrigin_departures_today_pct_canceled() {
			return this.origin_departures_today_pct_canceled;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		public BigDecimal destination_avg_rating;

		public BigDecimal getDestination_avg_rating() {
			return this.destination_avg_rating;
		}

		public Integer destination_total_ratings;

		public Integer getDestination_total_ratings() {
			return this.destination_total_ratings;
		}

		public Integer destination_reviews_count;

		public Integer getDestination_reviews_count() {
			return this.destination_reviews_count;
		}

		public Integer destination_evaluation_score;

		public Integer getDestination_evaluation_score() {
			return this.destination_evaluation_score;
		}

		public BigDecimal destination_arrivals_delay_index;

		public BigDecimal getDestination_arrivals_delay_index() {
			return this.destination_arrivals_delay_index;
		}

		public Integer destination_arrivals_delay_avg;

		public Integer getDestination_arrivals_delay_avg() {
			return this.destination_arrivals_delay_avg;
		}

		public BigDecimal destination_departures_delay_index;

		public BigDecimal getDestination_departures_delay_index() {
			return this.destination_departures_delay_index;
		}

		public Integer destination_departures_delay_avg;

		public Integer getDestination_departures_delay_avg() {
			return this.destination_departures_delay_avg;
		}

		public BigDecimal destination_arrivals_today_pct_delayed;

		public BigDecimal getDestination_arrivals_today_pct_delayed() {
			return this.destination_arrivals_today_pct_delayed;
		}

		public BigDecimal destination_departures_today_pct_delayed;

		public BigDecimal getDestination_departures_today_pct_delayed() {
			return this.destination_departures_today_pct_delayed;
		}

		public BigDecimal destination_arrivals_today_pct_canceled;

		public BigDecimal getDestination_arrivals_today_pct_canceled() {
			return this.destination_arrivals_today_pct_canceled;
		}

		public BigDecimal destination_departures_today_pct_canceled;

		public BigDecimal getDestination_departures_today_pct_canceled() {
			return this.destination_departures_today_pct_canceled;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfdeparturesStruct other = (copyOfdeparturesStruct) obj;

			if (this.flight_number == null) {
				if (other.flight_number != null)
					return false;

			} else if (!this.flight_number.equals(other.flight_number))

				return false;

			return true;
		}

		public void copyDataTo(copyOfdeparturesStruct other) {

			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.origin_avg_rating = this.origin_avg_rating;
			other.origin_total_ratings = this.origin_total_ratings;
			other.origin_reviews_count = this.origin_reviews_count;
			other.origin_evaluation_score = this.origin_evaluation_score;
			other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
			other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
			other.origin_departures_delay_index = this.origin_departures_delay_index;
			other.origin_departures_delay_avg = this.origin_departures_delay_avg;
			other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
			other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
			other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
			other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.destination_visible = this.destination_visible;
			other.destination_avg_rating = this.destination_avg_rating;
			other.destination_total_ratings = this.destination_total_ratings;
			other.destination_reviews_count = this.destination_reviews_count;
			other.destination_evaluation_score = this.destination_evaluation_score;
			other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
			other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
			other.destination_departures_delay_index = this.destination_departures_delay_index;
			other.destination_departures_delay_avg = this.destination_departures_delay_avg;
			other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
			other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
			other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
			other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.type = this.type;

		}

		public void copyKeysDataTo(copyOfdeparturesStruct other) {

			other.flight_number = this.flight_number;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",origin_avg_rating=" + String.valueOf(origin_avg_rating));
			sb.append(",origin_total_ratings=" + String.valueOf(origin_total_ratings));
			sb.append(",origin_reviews_count=" + String.valueOf(origin_reviews_count));
			sb.append(",origin_evaluation_score=" + String.valueOf(origin_evaluation_score));
			sb.append(",origin_arrivals_delay_index=" + String.valueOf(origin_arrivals_delay_index));
			sb.append(",origin_arrivals_delay_avg=" + String.valueOf(origin_arrivals_delay_avg));
			sb.append(",origin_departures_delay_index=" + String.valueOf(origin_departures_delay_index));
			sb.append(",origin_departures_delay_avg=" + String.valueOf(origin_departures_delay_avg));
			sb.append(",origin_arrivals_today_pct_delayed=" + String.valueOf(origin_arrivals_today_pct_delayed));
			sb.append(",origin_departures_today_pct_delayed=" + String.valueOf(origin_departures_today_pct_delayed));
			sb.append(",origin_arrivals_today_pct_canceled=" + String.valueOf(origin_arrivals_today_pct_canceled));
			sb.append(",origin_departures_today_pct_canceled=" + String.valueOf(origin_departures_today_pct_canceled));
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append(",destination_avg_rating=" + String.valueOf(destination_avg_rating));
			sb.append(",destination_total_ratings=" + String.valueOf(destination_total_ratings));
			sb.append(",destination_reviews_count=" + String.valueOf(destination_reviews_count));
			sb.append(",destination_evaluation_score=" + String.valueOf(destination_evaluation_score));
			sb.append(",destination_arrivals_delay_index=" + String.valueOf(destination_arrivals_delay_index));
			sb.append(",destination_arrivals_delay_avg=" + String.valueOf(destination_arrivals_delay_avg));
			sb.append(",destination_departures_delay_index=" + String.valueOf(destination_departures_delay_index));
			sb.append(",destination_departures_delay_avg=" + String.valueOf(destination_departures_delay_avg));
			sb.append(",destination_arrivals_today_pct_delayed="
					+ String.valueOf(destination_arrivals_today_pct_delayed));
			sb.append(",destination_departures_today_pct_delayed="
					+ String.valueOf(destination_departures_today_pct_delayed));
			sb.append(",destination_arrivals_today_pct_canceled="
					+ String.valueOf(destination_arrivals_today_pct_canceled));
			sb.append(",destination_departures_today_pct_canceled="
					+ String.valueOf(destination_departures_today_pct_canceled));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfdeparturesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.flight_row_id == null) {
				if (other.flight_row_id != null)
					return false;

			} else if (!this.flight_row_id.equals(other.flight_row_id))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.flight_row_id = this.flight_row_id;
			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.destination_visible = this.destination_visible;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.flight_row_id = this.flight_row_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_row_id, other.flight_row_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String airport_name;

		public String getAirport_name() {
			return this.airport_name;
		}

		public String iata_code;

		public String getIata_code() {
			return this.iata_code;
		}

		public String icao_code;

		public String getIcao_code() {
			return this.icao_code;
		}

		public BigDecimal latitude;

		public BigDecimal getLatitude() {
			return this.latitude;
		}

		public BigDecimal longitude;

		public BigDecimal getLongitude() {
			return this.longitude;
		}

		public Integer elevation;

		public Integer getElevation() {
			return this.elevation;
		}

		public String country_name;

		public String getCountry_name() {
			return this.country_name;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String timezone_name;

		public String getTimezone_name() {
			return this.timezone_name;
		}

		public Integer timezone_offset;

		public Integer getTimezone_offset() {
			return this.timezone_offset;
		}

		public String timezone_abbr;

		public String getTimezone_abbr() {
			return this.timezone_abbr;
		}

		public Boolean is_dst;

		public Boolean getIs_dst() {
			return this.is_dst;
		}

		public String homepage_url;

		public String getHomepage_url() {
			return this.homepage_url;
		}

		public String wikipedia_url;

		public String getWikipedia_url() {
			return this.wikipedia_url;
		}

		public Boolean is_visible;

		public Boolean getIs_visible() {
			return this.is_visible;
		}

		public String ratings_url;

		public String getRatings_url() {
			return this.ratings_url;
		}

		public BigDecimal avg_rating;

		public BigDecimal getAvg_rating() {
			return this.avg_rating;
		}

		public Integer total_ratings;

		public Integer getTotal_ratings() {
			return this.total_ratings;
		}

		public Integer reviews_count;

		public Integer getReviews_count() {
			return this.reviews_count;
		}

		public Integer evaluation_score;

		public Integer getEvaluation_score() {
			return this.evaluation_score;
		}

		public BigDecimal arrivals_delay_index;

		public BigDecimal getArrivals_delay_index() {
			return this.arrivals_delay_index;
		}

		public Integer arrivals_delay_avg;

		public Integer getArrivals_delay_avg() {
			return this.arrivals_delay_avg;
		}

		public BigDecimal departures_delay_index;

		public BigDecimal getDepartures_delay_index() {
			return this.departures_delay_index;
		}

		public Integer departures_delay_avg;

		public Integer getDepartures_delay_avg() {
			return this.departures_delay_avg;
		}

		public BigDecimal arrivals_today_pct_delayed;

		public BigDecimal getArrivals_today_pct_delayed() {
			return this.arrivals_today_pct_delayed;
		}

		public BigDecimal arrivals_today_pct_canceled;

		public BigDecimal getArrivals_today_pct_canceled() {
			return this.arrivals_today_pct_canceled;
		}

		public BigDecimal departures_today_pct_delayed;

		public BigDecimal getDepartures_today_pct_delayed() {
			return this.departures_today_pct_delayed;
		}

		public BigDecimal departures_today_pct_canceled;

		public BigDecimal getDepartures_today_pct_canceled() {
			return this.departures_today_pct_canceled;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

				result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.iata_code == null) {
				if (other.iata_code != null)
					return false;

			} else if (!this.iata_code.equals(other.iata_code))

				return false;

			if (this.icao_code == null) {
				if (other.icao_code != null)
					return false;

			} else if (!this.icao_code.equals(other.icao_code))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.airport_name = this.airport_name;
			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.elevation = this.elevation;
			other.country_name = this.country_name;
			other.country_code = this.country_code;
			other.country_id = this.country_id;
			other.city = this.city;
			other.timezone_name = this.timezone_name;
			other.timezone_offset = this.timezone_offset;
			other.timezone_abbr = this.timezone_abbr;
			other.is_dst = this.is_dst;
			other.homepage_url = this.homepage_url;
			other.wikipedia_url = this.wikipedia_url;
			other.is_visible = this.is_visible;
			other.ratings_url = this.ratings_url;
			other.avg_rating = this.avg_rating;
			other.total_ratings = this.total_ratings;
			other.reviews_count = this.reviews_count;
			other.evaluation_score = this.evaluation_score;
			other.arrivals_delay_index = this.arrivals_delay_index;
			other.arrivals_delay_avg = this.arrivals_delay_avg;
			other.departures_delay_index = this.departures_delay_index;
			other.departures_delay_avg = this.departures_delay_avg;
			other.arrivals_today_pct_delayed = this.arrivals_today_pct_delayed;
			other.arrivals_today_pct_canceled = this.arrivals_today_pct_canceled;
			other.departures_today_pct_delayed = this.departures_today_pct_delayed;
			other.departures_today_pct_canceled = this.departures_today_pct_canceled;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("airport_name=" + airport_name);
			sb.append(",iata_code=" + iata_code);
			sb.append(",icao_code=" + icao_code);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",elevation=" + String.valueOf(elevation));
			sb.append(",country_name=" + country_name);
			sb.append(",country_code=" + country_code);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",city=" + city);
			sb.append(",timezone_name=" + timezone_name);
			sb.append(",timezone_offset=" + String.valueOf(timezone_offset));
			sb.append(",timezone_abbr=" + timezone_abbr);
			sb.append(",is_dst=" + String.valueOf(is_dst));
			sb.append(",homepage_url=" + homepage_url);
			sb.append(",wikipedia_url=" + wikipedia_url);
			sb.append(",is_visible=" + String.valueOf(is_visible));
			sb.append(",ratings_url=" + ratings_url);
			sb.append(",avg_rating=" + String.valueOf(avg_rating));
			sb.append(",total_ratings=" + String.valueOf(total_ratings));
			sb.append(",reviews_count=" + String.valueOf(reviews_count));
			sb.append(",evaluation_score=" + String.valueOf(evaluation_score));
			sb.append(",arrivals_delay_index=" + String.valueOf(arrivals_delay_index));
			sb.append(",arrivals_delay_avg=" + String.valueOf(arrivals_delay_avg));
			sb.append(",departures_delay_index=" + String.valueOf(departures_delay_index));
			sb.append(",departures_delay_avg=" + String.valueOf(departures_delay_avg));
			sb.append(",arrivals_today_pct_delayed=" + String.valueOf(arrivals_today_pct_delayed));
			sb.append(",arrivals_today_pct_canceled=" + String.valueOf(arrivals_today_pct_canceled));
			sb.append(",departures_today_pct_delayed=" + String.valueOf(departures_today_pct_delayed));
			sb.append(",departures_today_pct_canceled=" + String.valueOf(departures_today_pct_canceled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iata_code, other.iata_code);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.icao_code, other.icao_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String airport_name;

		public String getAirport_name() {
			return this.airport_name;
		}

		public String iata_code;

		public String getIata_code() {
			return this.iata_code;
		}

		public String icao_code;

		public String getIcao_code() {
			return this.icao_code;
		}

		public BigDecimal latitude;

		public BigDecimal getLatitude() {
			return this.latitude;
		}

		public BigDecimal longitude;

		public BigDecimal getLongitude() {
			return this.longitude;
		}

		public Integer elevation;

		public Integer getElevation() {
			return this.elevation;
		}

		public String country_name;

		public String getCountry_name() {
			return this.country_name;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String timezone_name;

		public String getTimezone_name() {
			return this.timezone_name;
		}

		public Integer timezone_offset;

		public Integer getTimezone_offset() {
			return this.timezone_offset;
		}

		public String timezone_abbr;

		public String getTimezone_abbr() {
			return this.timezone_abbr;
		}

		public Boolean is_dst;

		public Boolean getIs_dst() {
			return this.is_dst;
		}

		public String homepage_url;

		public String getHomepage_url() {
			return this.homepage_url;
		}

		public String wikipedia_url;

		public String getWikipedia_url() {
			return this.wikipedia_url;
		}

		public Boolean is_visible;

		public Boolean getIs_visible() {
			return this.is_visible;
		}

		public String ratings_url;

		public String getRatings_url() {
			return this.ratings_url;
		}

		public BigDecimal avg_rating;

		public BigDecimal getAvg_rating() {
			return this.avg_rating;
		}

		public Integer total_ratings;

		public Integer getTotal_ratings() {
			return this.total_ratings;
		}

		public Integer reviews_count;

		public Integer getReviews_count() {
			return this.reviews_count;
		}

		public Integer evaluation_score;

		public Integer getEvaluation_score() {
			return this.evaluation_score;
		}

		public BigDecimal arrivals_delay_index;

		public BigDecimal getArrivals_delay_index() {
			return this.arrivals_delay_index;
		}

		public Integer arrivals_delay_avg;

		public Integer getArrivals_delay_avg() {
			return this.arrivals_delay_avg;
		}

		public BigDecimal departures_delay_index;

		public BigDecimal getDepartures_delay_index() {
			return this.departures_delay_index;
		}

		public Integer departures_delay_avg;

		public Integer getDepartures_delay_avg() {
			return this.departures_delay_avg;
		}

		public BigDecimal arrivals_today_pct_delayed;

		public BigDecimal getArrivals_today_pct_delayed() {
			return this.arrivals_today_pct_delayed;
		}

		public BigDecimal arrivals_today_pct_canceled;

		public BigDecimal getArrivals_today_pct_canceled() {
			return this.arrivals_today_pct_canceled;
		}

		public BigDecimal departures_today_pct_delayed;

		public BigDecimal getDepartures_today_pct_delayed() {
			return this.departures_today_pct_delayed;
		}

		public BigDecimal departures_today_pct_canceled;

		public BigDecimal getDepartures_today_pct_canceled() {
			return this.departures_today_pct_canceled;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

				result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.iata_code == null) {
				if (other.iata_code != null)
					return false;

			} else if (!this.iata_code.equals(other.iata_code))

				return false;

			if (this.icao_code == null) {
				if (other.icao_code != null)
					return false;

			} else if (!this.icao_code.equals(other.icao_code))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.airport_name = this.airport_name;
			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.elevation = this.elevation;
			other.country_name = this.country_name;
			other.country_code = this.country_code;
			other.country_id = this.country_id;
			other.city = this.city;
			other.timezone_name = this.timezone_name;
			other.timezone_offset = this.timezone_offset;
			other.timezone_abbr = this.timezone_abbr;
			other.is_dst = this.is_dst;
			other.homepage_url = this.homepage_url;
			other.wikipedia_url = this.wikipedia_url;
			other.is_visible = this.is_visible;
			other.ratings_url = this.ratings_url;
			other.avg_rating = this.avg_rating;
			other.total_ratings = this.total_ratings;
			other.reviews_count = this.reviews_count;
			other.evaluation_score = this.evaluation_score;
			other.arrivals_delay_index = this.arrivals_delay_index;
			other.arrivals_delay_avg = this.arrivals_delay_avg;
			other.departures_delay_index = this.departures_delay_index;
			other.departures_delay_avg = this.departures_delay_avg;
			other.arrivals_today_pct_delayed = this.arrivals_today_pct_delayed;
			other.arrivals_today_pct_canceled = this.arrivals_today_pct_canceled;
			other.departures_today_pct_delayed = this.departures_today_pct_delayed;
			other.departures_today_pct_canceled = this.departures_today_pct_canceled;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("airport_name=" + airport_name);
			sb.append(",iata_code=" + iata_code);
			sb.append(",icao_code=" + icao_code);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",elevation=" + String.valueOf(elevation));
			sb.append(",country_name=" + country_name);
			sb.append(",country_code=" + country_code);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",city=" + city);
			sb.append(",timezone_name=" + timezone_name);
			sb.append(",timezone_offset=" + String.valueOf(timezone_offset));
			sb.append(",timezone_abbr=" + timezone_abbr);
			sb.append(",is_dst=" + String.valueOf(is_dst));
			sb.append(",homepage_url=" + homepage_url);
			sb.append(",wikipedia_url=" + wikipedia_url);
			sb.append(",is_visible=" + String.valueOf(is_visible));
			sb.append(",ratings_url=" + ratings_url);
			sb.append(",avg_rating=" + String.valueOf(avg_rating));
			sb.append(",total_ratings=" + String.valueOf(total_ratings));
			sb.append(",reviews_count=" + String.valueOf(reviews_count));
			sb.append(",evaluation_score=" + String.valueOf(evaluation_score));
			sb.append(",arrivals_delay_index=" + String.valueOf(arrivals_delay_index));
			sb.append(",arrivals_delay_avg=" + String.valueOf(arrivals_delay_avg));
			sb.append(",departures_delay_index=" + String.valueOf(departures_delay_index));
			sb.append(",departures_delay_avg=" + String.valueOf(departures_delay_avg));
			sb.append(",arrivals_today_pct_delayed=" + String.valueOf(arrivals_today_pct_delayed));
			sb.append(",arrivals_today_pct_canceled=" + String.valueOf(arrivals_today_pct_canceled));
			sb.append(",departures_today_pct_delayed=" + String.valueOf(departures_today_pct_delayed));
			sb.append(",departures_today_pct_canceled=" + String.valueOf(departures_today_pct_canceled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iata_code, other.iata_code);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.icao_code, other.icao_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfAirport_detailsStruct
			implements routines.system.IPersistableRow<copyOfAirport_detailsStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfAirport_detailsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfFlight_departuresStruct
			implements routines.system.IPersistableRow<copyOfFlight_departuresStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfFlight_departuresStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tREST_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				copyOfAirport_detailsStruct copyOfAirport_details = new copyOfAirport_detailsStruct();
				row14Struct row14 = new row14Struct();
				row16Struct row16 = new row16Struct();
				copyOfFlight_departuresStruct copyOfFlight_departures = new copyOfFlight_departuresStruct();
				copyOfFlight_departuresStruct row13 = copyOfFlight_departures;
				row15Struct row15 = new row15Struct();
				row17Struct row17 = new row17Struct();
				copyOfdeparturesStruct copyOfdepartures = new copyOfdeparturesStruct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String iata_code;
					String icao_code;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

							result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.iata_code == null) {
							if (other.iata_code != null)
								return false;

						} else if (!this.iata_code.equals(other.iata_code))

							return false;

						if (this.icao_code == null) {
							if (other.icao_code != null)
								return false;

						} else if (!this.icao_code.equals(other.icao_code))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_2 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_2", false);
				start_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfAirport_details");
				}

				int tos_count_tExtractJSONFields_2 = 0;

				int nb_line_tExtractJSONFields_2 = 0;
				String jsonStr_tExtractJSONFields_2 = "";

				class JsonPathCache_tExtractJSONFields_2 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_2 jsonPathCache_tExtractJSONFields_2 = new JsonPathCache_tExtractJSONFields_2();

				/**
				 * [tExtractJSONFields_2 begin ] stop
				 */

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfdepartures");
				}

				int tos_count_tDBOutput_3 = 0;

				int updateKeyCount_tDBOutput_3 = 1;
				if (updateKeyCount_tDBOutput_3 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_3 == 65 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rowsToCommitCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "Raw_Flights";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime().getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;

				String properties_tDBOutput_3 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBOutput_3 == null || properties_tDBOutput_3.trim().length() == 0) {
					properties_tDBOutput_3 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_3.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_3.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_3 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?"
						+ properties_tDBOutput_3;

				String driverClass_tDBOutput_3 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_3 = "root";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:6tXikZnEvCuO8Q070NoOB+FPxwV+jo2ZZ0lEY+YGYQQ=");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				java.lang.Class.forName(driverClass_tDBOutput_3);

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, dbUser_tDBOutput_3,
						dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables("airportdata", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_3 = false;
				while (rsTable_tDBOutput_3.next()) {
					String table_tDBOutput_3 = rsTable_tDBOutput_3.getString("TABLE_NAME");
					if (table_tDBOutput_3.equalsIgnoreCase("Raw_Flights")) {
						whetherExist_tDBOutput_3 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtCreate_tDBOutput_3.execute("CREATE TABLE `" + tableName_tDBOutput_3
								+ "`(`flight_number` VARCHAR(20)  ,`flight_alternative` VARCHAR(20)  ,`status_text` VARCHAR(50)  ,`status_live` BIT(10)  ,`status_color` VARCHAR(20)  ,`aircraft_code` VARCHAR(10)  ,`aircraft_text` VARCHAR(100)  ,`aircraft_hex` VARCHAR(10)  ,`aircraft_registration` VARCHAR(20)  ,`airline_name` VARCHAR(100)  ,`airline_iata` VARCHAR(2)  ,`airline_icao` VARCHAR(3)  ,`airline_short` VARCHAR(50)  ,`origin_iata` VARCHAR(3)  ,`origin_icao` VARCHAR(4)  ,`origin_name` VARCHAR(200)  ,`origin_latitude` DECIMAL(10,7)  ,`origin_longitude` DECIMAL(10,7)  ,`origin_country` VARCHAR(100)  ,`origin_country_code` VARCHAR(2)  ,`origin_city` VARCHAR(100)  ,`origin_timezone` VARCHAR(50)  ,`origin_timezone_offset` INT(10)  ,`origin_avg_rating` DECIMAL(10,0)  ,`origin_total_ratings` INT(10)  ,`origin_reviews_count` INT(10)  ,`origin_evaluation_score` INT(10)  ,`origin_arrivals_delay_index` DECIMAL(5,2)  ,`origin_arrivals_delay_avg` INT(10)  ,`origin_departures_delay_index` DECIMAL(5,2)  ,`origin_departures_delay_avg` INT(10)  ,`origin_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`origin_departures_today_pct_delayed` DECIMAL(3,2)  ,`origin_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`origin_departures_today_pct_canceled` DECIMAL(3,2)  ,`destination_iata` VARCHAR(3)  ,`destination_icao` VARCHAR(4)  ,`destination_name` VARCHAR(200)  ,`destination_latitude` DECIMAL(10,7)  ,`destination_longitude` DECIMAL(10,7)  ,`destination_country` VARCHAR(100)  ,`destination_country_code` VARCHAR(2)  ,`destination_city` VARCHAR(100)  ,`destination_timezone` VARCHAR(50)  ,`destination_timezone_offset` INT(10)  ,`destination_visible` BIT(10)  ,`destination_avg_rating` DECIMAL(10,0)  ,`destination_total_ratings` INT(10)  ,`destination_reviews_count` INT(10)  ,`destination_evaluation_score` INT(10)  ,`destination_arrivals_delay_index` DECIMAL(5,2)  ,`destination_arrivals_delay_avg` INT(10)  ,`destination_departures_delay_index` DECIMAL(5,2)  ,`destination_departures_delay_avg` INT(10)  ,`destination_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`destination_departures_today_pct_delayed` DECIMAL(3,2)  ,`destination_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`destination_departures_today_pct_canceled` DECIMAL(3,2)  ,`scheduled_departure` BIGINT(20)  ,`scheduled_arrival` BIGINT(20)  ,`real_departure` BIGINT(20)  ,`real_arrival` BIGINT(20)  ,`estimated_departure` BIGINT(20)  ,`estimated_arrival` BIGINT(20)  ,`type` VARCHAR(10)  ,primary key(`flight_number`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement("SELECT COUNT(1) FROM `" + "Raw_Flights" + "` WHERE `flight_number` = ?");
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
				String insert_tDBOutput_3 = "INSERT INTO `" + "Raw_Flights"
						+ "` (`flight_number`,`flight_alternative`,`status_text`,`status_live`,`status_color`,`aircraft_code`,`aircraft_text`,`aircraft_hex`,`aircraft_registration`,`airline_name`,`airline_iata`,`airline_icao`,`airline_short`,`origin_iata`,`origin_icao`,`origin_name`,`origin_latitude`,`origin_longitude`,`origin_country`,`origin_country_code`,`origin_city`,`origin_timezone`,`origin_timezone_offset`,`origin_avg_rating`,`origin_total_ratings`,`origin_reviews_count`,`origin_evaluation_score`,`origin_arrivals_delay_index`,`origin_arrivals_delay_avg`,`origin_departures_delay_index`,`origin_departures_delay_avg`,`origin_arrivals_today_pct_delayed`,`origin_departures_today_pct_delayed`,`origin_arrivals_today_pct_canceled`,`origin_departures_today_pct_canceled`,`destination_iata`,`destination_icao`,`destination_name`,`destination_latitude`,`destination_longitude`,`destination_country`,`destination_country_code`,`destination_city`,`destination_timezone`,`destination_timezone_offset`,`destination_visible`,`destination_avg_rating`,`destination_total_ratings`,`destination_reviews_count`,`destination_evaluation_score`,`destination_arrivals_delay_index`,`destination_arrivals_delay_avg`,`destination_departures_delay_index`,`destination_departures_delay_avg`,`destination_arrivals_today_pct_delayed`,`destination_departures_today_pct_delayed`,`destination_arrivals_today_pct_canceled`,`destination_departures_today_pct_canceled`,`scheduled_departure`,`scheduled_arrival`,`real_departure`,`real_arrival`,`estimated_departure`,`estimated_arrival`,`type`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
				String update_tDBOutput_3 = "UPDATE `" + "Raw_Flights"
						+ "` SET `flight_alternative` = ?,`status_text` = ?,`status_live` = ?,`status_color` = ?,`aircraft_code` = ?,`aircraft_text` = ?,`aircraft_hex` = ?,`aircraft_registration` = ?,`airline_name` = ?,`airline_iata` = ?,`airline_icao` = ?,`airline_short` = ?,`origin_iata` = ?,`origin_icao` = ?,`origin_name` = ?,`origin_latitude` = ?,`origin_longitude` = ?,`origin_country` = ?,`origin_country_code` = ?,`origin_city` = ?,`origin_timezone` = ?,`origin_timezone_offset` = ?,`origin_avg_rating` = ?,`origin_total_ratings` = ?,`origin_reviews_count` = ?,`origin_evaluation_score` = ?,`origin_arrivals_delay_index` = ?,`origin_arrivals_delay_avg` = ?,`origin_departures_delay_index` = ?,`origin_departures_delay_avg` = ?,`origin_arrivals_today_pct_delayed` = ?,`origin_departures_today_pct_delayed` = ?,`origin_arrivals_today_pct_canceled` = ?,`origin_departures_today_pct_canceled` = ?,`destination_iata` = ?,`destination_icao` = ?,`destination_name` = ?,`destination_latitude` = ?,`destination_longitude` = ?,`destination_country` = ?,`destination_country_code` = ?,`destination_city` = ?,`destination_timezone` = ?,`destination_timezone_offset` = ?,`destination_visible` = ?,`destination_avg_rating` = ?,`destination_total_ratings` = ?,`destination_reviews_count` = ?,`destination_evaluation_score` = ?,`destination_arrivals_delay_index` = ?,`destination_arrivals_delay_avg` = ?,`destination_departures_delay_index` = ?,`destination_departures_delay_avg` = ?,`destination_arrivals_today_pct_delayed` = ?,`destination_departures_today_pct_delayed` = ?,`destination_arrivals_today_pct_canceled` = ?,`destination_departures_today_pct_canceled` = ?,`scheduled_departure` = ?,`scheduled_arrival` = ?,`real_departure` = ?,`real_arrival` = ?,`estimated_departure` = ?,`estimated_arrival` = ?,`type` = ? WHERE `flight_number` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(update_tDBOutput_3);
				resourceMap.put("pstmtUpdate_tDBOutput_3", pstmtUpdate_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfdeparturesStruct copyOfdepartures_tmp = new copyOfdeparturesStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());

				currentComponent = "tUniqRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tUniqRow_5 = 0;

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Long flight_row_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.flight_row_id == null) {
							if (other.flight_row_id != null)
								return false;

						} else if (!this.flight_row_id.equals(other.flight_row_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_5 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_5", false);
				start_Hash.put("tExtractJSONFields_5", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tExtractJSONFields_5 = 0;

				int nb_line_tExtractJSONFields_5 = 0;
				String jsonStr_tExtractJSONFields_5 = "";

				class JsonPathCache_tExtractJSONFields_5 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_5 jsonPathCache_tExtractJSONFields_5 = new JsonPathCache_tExtractJSONFields_5();

				/**
				 * [tExtractJSONFields_5 begin ] stop
				 */

				/**
				 * [tSleep_2 begin ] start
				 */

				ok_Hash.put("tSleep_2", false);
				start_Hash.put("tSleep_2", System.currentTimeMillis());

				currentComponent = "tSleep_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfFlight_departures");
				}

				int tos_count_tSleep_2 = 0;

				/**
				 * [tSleep_2 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfAirport_detailsStruct copyOfAirport_details_tmp = new copyOfAirport_detailsStruct();
				copyOfFlight_departuresStruct copyOfFlight_departures_tmp = new copyOfFlight_departuresStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tREST_2 begin ] start
				 */

				ok_Hash.put("tREST_2", false);
				start_Hash.put("tREST_2", System.currentTimeMillis());

				currentComponent = "tREST_2";

				int tos_count_tREST_2 = 0;

				String endpoint_tREST_2 = "https://api.flightapi.io/schedule/" + context.apikey
						+ "?mode=departures&iata=DJE&day=-1";

				String trustStoreFile_tREST_2 = System.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_2 = System.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_2 = System.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_2 = System.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_2 = System.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_2 = System.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_2 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_2 = javax.net.ssl.SSLContext.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_2 = null;
				if (trustStoreFile_tREST_2 != null && trustStoreType_tREST_2 != null) {
					char[] password_tREST_2 = null;
					if (trustStorePWD_tREST_2 != null)
						password_tREST_2 = trustStorePWD_tREST_2.toCharArray();
					java.security.KeyStore trustStore_tREST_2 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_2);
					trustStore_tREST_2.load(new java.io.FileInputStream(trustStoreFile_tREST_2), password_tREST_2);

					javax.net.ssl.TrustManagerFactory tmf_tREST_2 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					tmf_tREST_2.init(trustStore_tREST_2);
					tms_tREST_2 = tmf_tREST_2.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_2 = null;
				if (keyStoreFile_tREST_2 != null && keyStoreType_tREST_2 != null) {
					char[] password_tREST_2 = null;
					if (keyStorePWD_tREST_2 != null)
						password_tREST_2 = keyStorePWD_tREST_2.toCharArray();
					java.security.KeyStore keyStore_tREST_2 = java.security.KeyStore.getInstance(keyStoreType_tREST_2);
					keyStore_tREST_2.load(new java.io.FileInputStream(keyStoreFile_tREST_2), password_tREST_2);

					javax.net.ssl.KeyManagerFactory kmf_tREST_2 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					kmf_tREST_2.init(keyStore_tREST_2, password_tREST_2);
					kms_tREST_2 = kmf_tREST_2.getKeyManagers();
				}

				ctx_tREST_2.init(kms_tREST_2, tms_tREST_2, null);
				config_tREST_2.getProperties().put(
						com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
						new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

							public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
								return true;
							}
						}, ctx_tREST_2));

				com.sun.jersey.api.client.Client restClient_tREST_2 = com.sun.jersey.api.client.Client
						.create(config_tREST_2);

				java.util.Map<String, Object> headers_tREST_2 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_2 = headers_tREST_2.get("Transfer-Encoding");
				if (transfer_encoding_tREST_2 != null && "chunked".equals(transfer_encoding_tREST_2)) {
					restClient_tREST_2.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_2;
				if (endpoint_tREST_2 != null && !("").equals(endpoint_tREST_2)) {
					restResource_tREST_2 = restClient_tREST_2.resource(endpoint_tREST_2);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_2 = null;
				String restResponse_tREST_2 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_2 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_2 : headers_tREST_2.entrySet()) {
						if (builder_tREST_2 == null) {
							builder_tREST_2 = restResource_tREST_2.header(header_tREST_2.getKey(),
									header_tREST_2.getValue());
						} else {
							builder_tREST_2.header(header_tREST_2.getKey(), header_tREST_2.getValue());
						}
					}

					if (builder_tREST_2 != null) {
						restResponse_tREST_2 = builder_tREST_2.get(String.class);
					} else {
						restResponse_tREST_2 = restResource_tREST_2.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					globalMap.put("tREST_2_ERROR_MESSAGE", ue.getMessage());
					errorResponse_tREST_2 = ue.getResponse();
				}

				// for output

				row12 = new row12Struct();
				if (errorResponse_tREST_2 != null) {
					row12.ERROR_CODE = errorResponse_tREST_2.getStatus();
					if (row12.ERROR_CODE != 204) {
						row12.Body = errorResponse_tREST_2.getEntity(String.class);
					}
				} else {
					row12.Body = restResponse_tREST_2;
				}

				/**
				 * [tREST_2 begin ] stop
				 */

				/**
				 * [tREST_2 main ] start
				 */

				currentComponent = "tREST_2";

				tos_count_tREST_2++;

				/**
				 * [tREST_2 main ] stop
				 */

				/**
				 * [tREST_2 process_data_begin ] start
				 */

				currentComponent = "tREST_2";

				/**
				 * [tREST_2 process_data_begin ] stop
				 */

				/**
				 * [tMap_4 main ] start
				 */

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1

							, "row12"

					);
				}

				boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_4 = false;
				boolean mainRowRejected_tMap_4 = false;

				// ###############################
				{ // start of Var scope

					// ###############################
					// # Vars tables

					Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
					// ###############################
					// # Output tables

					copyOfAirport_details = null;
					copyOfFlight_departures = null;

// # Output table : 'copyOfAirport_details'
					copyOfAirport_details_tmp.Body = row12.Body;
					copyOfAirport_details_tmp.ERROR_CODE = row12.ERROR_CODE;
					copyOfAirport_details = copyOfAirport_details_tmp;

// # Output table : 'copyOfFlight_departures'
					copyOfFlight_departures_tmp.Body = row12.Body;
					copyOfFlight_departures_tmp.ERROR_CODE = row12.ERROR_CODE;
					copyOfFlight_departures = copyOfFlight_departures_tmp;
// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_4 = false;

				tos_count_tMap_4++;

				/**
				 * [tMap_4 main ] stop
				 */

				/**
				 * [tMap_4 process_data_begin ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 process_data_begin ] stop
				 */
// Start of branch "copyOfAirport_details"
				if (copyOfAirport_details != null) {

					/**
					 * [tExtractJSONFields_2 main ] start
					 */

					currentComponent = "tExtractJSONFields_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "copyOfAirport_details"

						);
					}

					if (copyOfAirport_details.Body != null) {// C_01
						jsonStr_tExtractJSONFields_2 = copyOfAirport_details.Body.toString();

						row14 = null;

						String loopPath_tExtractJSONFields_2 = "$.airport.pluginData";
						java.util.List<Object> resultset_tExtractJSONFields_2 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_2 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_2 = null;
						try {
							document_tExtractJSONFields_2 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_2);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
									.getCompiledJsonPath(loopPath_tExtractJSONFields_2);
							Object result_tExtractJSONFields_2 = document_tExtractJSONFields_2
									.read(compiledLoopPath_tExtractJSONFields_2, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_2 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_2 = (net.minidev.json.JSONArray) result_tExtractJSONFields_2;
							} else {
								resultset_tExtractJSONFields_2.add(result_tExtractJSONFields_2);
							}

							isStructError_tExtractJSONFields_2 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_2) {
							globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE", ex_tExtractJSONFields_2.getMessage());
							throw (ex_tExtractJSONFields_2);
						}

						String jsonPath_tExtractJSONFields_2 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_2 = null;

						Object value_tExtractJSONFields_2 = null;

						Object root_tExtractJSONFields_2 = null;
						for (int i_tExtractJSONFields_2 = 0; isStructError_tExtractJSONFields_2
								|| (i_tExtractJSONFields_2 < resultset_tExtractJSONFields_2
										.size()); i_tExtractJSONFields_2++) {
							if (!isStructError_tExtractJSONFields_2) {
								Object row_tExtractJSONFields_2 = resultset_tExtractJSONFields_2
										.get(i_tExtractJSONFields_2);
								row14 = null;
								row14 = new row14Struct();
								nb_line_tExtractJSONFields_2++;
								try {
									jsonPath_tExtractJSONFields_2 = "$.details.name";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.airport_name = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.airport_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.code.iata";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.iata_code = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.iata_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.code.icao";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.icao_code = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.icao_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.position.latitude";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.latitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.latitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.latitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.position.longitude";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.longitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.longitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.longitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.position.elevation";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.elevation = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_2.toString());
										} else {
											row14.elevation =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.elevation =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.position.country.name";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.country_name = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.country_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.position.country.code";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.country_code = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.country_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.position.country.id";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.country_id = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_2.toString());
										} else {
											row14.country_id =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.country_id =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.position.region.city";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.city = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.city =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.timezone.name";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.timezone_name = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.timezone_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.timezone.offset";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.timezone_offset = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_2.toString());
										} else {
											row14.timezone_offset =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.timezone_offset =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.timezone.abbr";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.timezone_abbr = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.timezone_abbr =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.timezone.isDst";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.is_dst = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_2.toString());
										} else {
											row14.is_dst =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.is_dst =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.url.homepage";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.homepage_url = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.homepage_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.url.wikipedia";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.wikipedia_url = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.wikipedia_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.visible";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.is_visible = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_2.toString());
										} else {
											row14.is_visible =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.is_visible =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.flightdiary.url";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										row14.ratings_url = value_tExtractJSONFields_2 == null ?

												null

												: value_tExtractJSONFields_2.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.ratings_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.flightdiary.ratings.avg";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.avg_rating = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.avg_rating =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.avg_rating =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.flightdiary.ratings.total";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.total_ratings = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_2.toString());
										} else {
											row14.total_ratings =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.total_ratings =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.flightdiary.reviews";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.reviews_count = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_2.toString());
										} else {
											row14.reviews_count =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.reviews_count =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.flightdiary.evaluation";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.evaluation_score = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_2.toString());
										} else {
											row14.evaluation_score =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.evaluation_score =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.stats.arrivals.delayIndex";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.arrivals_delay_index = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.arrivals_delay_index =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.arrivals_delay_index =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.stats.arrivals.delayAvg";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.arrivals_delay_avg = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_2.toString());
										} else {
											row14.arrivals_delay_avg =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.arrivals_delay_avg =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.stats.departures.delayIndex";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.departures_delay_index = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.departures_delay_index =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.departures_delay_index =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.stats.departures.delayAvg";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.departures_delay_avg = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_2.toString());
										} else {
											row14.departures_delay_avg =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.departures_delay_avg =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.stats.arrivals.today.percentage.delayed";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.arrivals_today_pct_delayed = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.arrivals_today_pct_delayed =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.arrivals_today_pct_delayed =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.stats.arrivals.today.percentage.canceled";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.arrivals_today_pct_canceled = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.arrivals_today_pct_canceled =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.arrivals_today_pct_canceled =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.stats.departures.today.percentage.delayed";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.departures_today_pct_delayed = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.departures_today_pct_delayed =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.departures_today_pct_delayed =

												null

										;
									}
									jsonPath_tExtractJSONFields_2 = "$.details.stats.departures.today.percentage.canceled";
									compiledJsonPath_tExtractJSONFields_2 = jsonPathCache_tExtractJSONFields_2
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_2);

									try {

										value_tExtractJSONFields_2 = compiledJsonPath_tExtractJSONFields_2
												.read(row_tExtractJSONFields_2);

										if (value_tExtractJSONFields_2 != null
												&& !value_tExtractJSONFields_2.toString().isEmpty()) {
											row14.departures_today_pct_canceled = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_2.toString());
										} else {
											row14.departures_today_pct_canceled =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_2) {
										globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
												e_tExtractJSONFields_2.getMessage());
										row14.departures_today_pct_canceled =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_2) {
									globalMap.put("tExtractJSONFields_2_ERROR_MESSAGE",
											ex_tExtractJSONFields_2.getMessage());
									throw (ex_tExtractJSONFields_2);
								}

							}

							isStructError_tExtractJSONFields_2 = false;

//}

							tos_count_tExtractJSONFields_2++;

							/**
							 * [tExtractJSONFields_2 main ] stop
							 */

							/**
							 * [tExtractJSONFields_2 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_2";

							/**
							 * [tExtractJSONFields_2 process_data_begin ] stop
							 */
// Start of branch "row14"
							if (row14 != null) {

								/**
								 * [tUniqRow_4 main ] start
								 */

								currentComponent = "tUniqRow_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row14"

									);
								}

								row16 = null;
								if (row14.iata_code == null) {
									finder_tUniqRow_4.iata_code = null;
								} else {
									finder_tUniqRow_4.iata_code = row14.iata_code.toLowerCase();
								}
								if (row14.icao_code == null) {
									finder_tUniqRow_4.icao_code = null;
								} else {
									finder_tUniqRow_4.icao_code = row14.icao_code.toLowerCase();
								}
								finder_tUniqRow_4.hashCodeDirty = true;
								if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
									KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

									if (row14.iata_code == null) {
										new_tUniqRow_4.iata_code = null;
									} else {
										new_tUniqRow_4.iata_code = row14.iata_code.toLowerCase();
									}
									if (row14.icao_code == null) {
										new_tUniqRow_4.icao_code = null;
									} else {
										new_tUniqRow_4.icao_code = row14.icao_code.toLowerCase();
									}

									keystUniqRow_4.add(new_tUniqRow_4);
									if (row16 == null) {

										row16 = new row16Struct();
									}
									row16.airport_name = row14.airport_name;
									row16.iata_code = row14.iata_code;
									row16.icao_code = row14.icao_code;
									row16.latitude = row14.latitude;
									row16.longitude = row14.longitude;
									row16.elevation = row14.elevation;
									row16.country_name = row14.country_name;
									row16.country_code = row14.country_code;
									row16.country_id = row14.country_id;
									row16.city = row14.city;
									row16.timezone_name = row14.timezone_name;
									row16.timezone_offset = row14.timezone_offset;
									row16.timezone_abbr = row14.timezone_abbr;
									row16.is_dst = row14.is_dst;
									row16.homepage_url = row14.homepage_url;
									row16.wikipedia_url = row14.wikipedia_url;
									row16.is_visible = row14.is_visible;
									row16.ratings_url = row14.ratings_url;
									row16.avg_rating = row14.avg_rating;
									row16.total_ratings = row14.total_ratings;
									row16.reviews_count = row14.reviews_count;
									row16.evaluation_score = row14.evaluation_score;
									row16.arrivals_delay_index = row14.arrivals_delay_index;
									row16.arrivals_delay_avg = row14.arrivals_delay_avg;
									row16.departures_delay_index = row14.departures_delay_index;
									row16.departures_delay_avg = row14.departures_delay_avg;
									row16.arrivals_today_pct_delayed = row14.arrivals_today_pct_delayed;
									row16.arrivals_today_pct_canceled = row14.arrivals_today_pct_canceled;
									row16.departures_today_pct_delayed = row14.departures_today_pct_delayed;
									row16.departures_today_pct_canceled = row14.departures_today_pct_canceled;
									nb_uniques_tUniqRow_4++;
								} else {
									nb_duplicates_tUniqRow_4++;
								}

								tos_count_tUniqRow_4++;

								/**
								 * [tUniqRow_4 main ] stop
								 */

								/**
								 * [tUniqRow_4 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_4";

								/**
								 * [tUniqRow_4 process_data_begin ] stop
								 */
// Start of branch "row16"
								if (row16 != null) {

									/**
									 * [tJavaRow_2 main ] start
									 */

									currentComponent = "tJavaRow_2";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row16"

										);
									}

// Airport info
									globalMap.put("airport_name", row16.airport_name);
									System.out.println("airport_name = " + row16.airport_name);
									globalMap.put("iata_code", row16.iata_code);
									System.out.println("iata_code = " + row16.iata_code);
									globalMap.put("icao_code", row16.icao_code);
									System.out.println("icao_code = " + row16.icao_code);
									globalMap.put("latitude", row16.latitude);
									System.out.println("latitude = " + row16.latitude);
									globalMap.put("longitude", row16.longitude);
									System.out.println("longitude = " + row16.longitude);
									globalMap.put("elevation", row16.elevation);
									System.out.println("elevation = " + row16.elevation);
									globalMap.put("country_name", row16.country_name);
									System.out.println("country_name = " + row16.country_name);
									globalMap.put("country_code", row16.country_code);
									System.out.println("country_code = " + row16.country_code);
									globalMap.put("country_id", row16.country_id);
									System.out.println("country_id = " + row16.country_id);
									globalMap.put("city", row16.city);
									System.out.println("city = " + row16.city);

// Timezone info
									globalMap.put("timezone_name", row16.timezone_name);
									System.out.println("timezone_name = " + row16.timezone_name);
									globalMap.put("timezone_offset", row16.timezone_offset);
									System.out.println("timezone_offset = " + row16.timezone_offset);
									globalMap.put("timezone_abbr", row16.timezone_abbr);
									System.out.println("timezone_abbr = " + row16.timezone_abbr);
									globalMap.put("is_dst", row16.is_dst);
									System.out.println("is_dst = " + row16.is_dst);

// URLs
									globalMap.put("homepage_url", row16.homepage_url);
									System.out.println("homepage_url = " + row16.homepage_url);
									globalMap.put("wikipedia_url", row16.wikipedia_url);
									System.out.println("wikipedia_url = " + row16.wikipedia_url);
									globalMap.put("is_visible", row16.is_visible);
									System.out.println("is_visible = " + row16.is_visible);
									globalMap.put("ratings_url", row16.ratings_url);
									System.out.println("ratings_url = " + row16.ratings_url);

// Ratings
									globalMap.put("avg_rating", row16.avg_rating);
									System.out.println("avg_rating = " + row16.avg_rating);
									globalMap.put("total_ratings", row16.total_ratings);
									System.out.println("total_ratings = " + row16.total_ratings);
									globalMap.put("reviews_count", row16.reviews_count);
									System.out.println("reviews_count = " + row16.reviews_count);
									globalMap.put("evaluation_score", row16.evaluation_score);
									System.out.println("evaluation_score = " + row16.evaluation_score);

// Delay indexes
									globalMap.put("copyOfarrivals_delay_index", row16.arrivals_delay_index);
									System.out.println("arrivals_delay_index = " + row16.arrivals_delay_index);
									globalMap.put("copyOfarrivals_delay_avg", row16.arrivals_delay_avg);
									System.out.println("arrivals_delay_avg = " + row16.arrivals_delay_avg);
									globalMap.put("copyOfdepartures_delay_index", row16.departures_delay_index);
									System.out.println("departures_delay_index = " + row16.departures_delay_index);
									globalMap.put("copyOfdepartures_delay_avg", row16.departures_delay_avg);
									System.out.println("departures_delay_avg = " + row16.departures_delay_avg);

// Today's delays
									globalMap.put("copyOfarrivals_today_pct_delayed", row16.arrivals_today_pct_delayed);
									System.out.println(
											"arrivals_today_pct_delayed = " + row16.arrivals_today_pct_delayed);
									globalMap.put("copyOfdepartures_today_pct_delayed",
											row16.departures_today_pct_delayed);
									System.out.println(
											"departures_today_pct_delayed = " + row16.departures_today_pct_delayed);
									globalMap.put("copyOfarrivals_today_pct_canceled",
											row16.arrivals_today_pct_canceled);
									System.out.println(
											"arrivals_today_pct_canceled = " + row16.arrivals_today_pct_canceled);
									globalMap.put("copyOfdepartures_today_pct_canceled",
											row16.departures_today_pct_canceled);
									System.out.println(
											"departures_today_pct_canceled = " + row16.departures_today_pct_canceled);

									nb_line_tJavaRow_2++;

									tos_count_tJavaRow_2++;

									/**
									 * [tJavaRow_2 main ] stop
									 */

									/**
									 * [tJavaRow_2 process_data_begin ] start
									 */

									currentComponent = "tJavaRow_2";

									/**
									 * [tJavaRow_2 process_data_begin ] stop
									 */

									/**
									 * [tJavaRow_2 process_data_end ] start
									 */

									currentComponent = "tJavaRow_2";

									/**
									 * [tJavaRow_2 process_data_end ] stop
									 */

								} // End of branch "row16"

								/**
								 * [tUniqRow_4 process_data_end ] start
								 */

								currentComponent = "tUniqRow_4";

								/**
								 * [tUniqRow_4 process_data_end ] stop
								 */

							} // End of branch "row14"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_2 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_2";

					/**
					 * [tExtractJSONFields_2 process_data_end ] stop
					 */

				} // End of branch "copyOfAirport_details"

// Start of branch "copyOfFlight_departures"
				if (copyOfFlight_departures != null) {

					/**
					 * [tSleep_2 main ] start
					 */

					currentComponent = "tSleep_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "copyOfFlight_departures"

						);
					}

					Thread.sleep((2) * 1000);

					row13 = copyOfFlight_departures;

					tos_count_tSleep_2++;

					/**
					 * [tSleep_2 main ] stop
					 */

					/**
					 * [tSleep_2 process_data_begin ] start
					 */

					currentComponent = "tSleep_2";

					/**
					 * [tSleep_2 process_data_begin ] stop
					 */

					/**
					 * [tExtractJSONFields_5 main ] start
					 */

					currentComponent = "tExtractJSONFields_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row13"

						);
					}

					if (row13.Body != null) {// C_01
						jsonStr_tExtractJSONFields_5 = row13.Body.toString();

						row15 = null;

						String loopPath_tExtractJSONFields_5 = "$.airport.pluginData.schedule.departures.data[*]";
						java.util.List<Object> resultset_tExtractJSONFields_5 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_5 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_5 = null;
						try {
							document_tExtractJSONFields_5 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_5);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
									.getCompiledJsonPath(loopPath_tExtractJSONFields_5);
							Object result_tExtractJSONFields_5 = document_tExtractJSONFields_5
									.read(compiledLoopPath_tExtractJSONFields_5, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_5 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_5 = (net.minidev.json.JSONArray) result_tExtractJSONFields_5;
							} else {
								resultset_tExtractJSONFields_5.add(result_tExtractJSONFields_5);
							}

							isStructError_tExtractJSONFields_5 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_5) {
							globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE", ex_tExtractJSONFields_5.getMessage());
							System.err.println(ex_tExtractJSONFields_5.getMessage());
						}

						String jsonPath_tExtractJSONFields_5 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_5 = null;

						Object value_tExtractJSONFields_5 = null;

						Object root_tExtractJSONFields_5 = null;
						for (int i_tExtractJSONFields_5 = 0; isStructError_tExtractJSONFields_5
								|| (i_tExtractJSONFields_5 < resultset_tExtractJSONFields_5
										.size()); i_tExtractJSONFields_5++) {
							if (!isStructError_tExtractJSONFields_5) {
								Object row_tExtractJSONFields_5 = resultset_tExtractJSONFields_5
										.get(i_tExtractJSONFields_5);
								row15 = null;
								row15 = new row15Struct();
								nb_line_tExtractJSONFields_5++;
								try {
									jsonPath_tExtractJSONFields_5 = "$.flight.identification.row";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.flight_row_id = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_5.toString());
										} else {
											row15.flight_row_id =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.flight_row_id =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.identification.number.default";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.flight_number = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.flight_number =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.identification.number.alternative";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.flight_alternative = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.flight_alternative =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.status.text";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.status_text = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.status_text =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.status.live";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.status_live = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_5.toString());
										} else {
											row15.status_live =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.status_live =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.status.generic.status.color";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.status_color = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.status_color =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.aircraft.model.code";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.aircraft_code = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.aircraft_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.aircraft.model.text";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.aircraft_text = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.aircraft_text =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.aircraft.hex";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.aircraft_hex = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.aircraft_hex =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.aircraft.registration";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.aircraft_registration = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.aircraft_registration =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airline.name";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.airline_name = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.airline_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airline.code.iata";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.airline_iata = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.airline_iata =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airline.code.icao";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.airline_icao = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.airline_icao =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airline.short";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.airline_short = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.airline_short =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.code.iata";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.destination_iata = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_iata =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.code.icao";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.destination_icao = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_icao =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.name";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.destination_name = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.position.latitude";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.destination_latitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_5.toString());
										} else {
											row15.destination_latitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_latitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.position.longitude";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.destination_longitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_5.toString());
										} else {
											row15.destination_longitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_longitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.position.country.name";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.destination_country = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_country =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.position.country.code";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.destination_country_code = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_country_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.position.region.city";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.destination_city = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_city =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.timezone.name";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										row15.destination_timezone = value_tExtractJSONFields_5 == null ?

												null

												: value_tExtractJSONFields_5.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_timezone =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.timezone.offset";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.destination_timezone_offset = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_5.toString());
										} else {
											row15.destination_timezone_offset =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_timezone_offset =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.time.scheduled.departure";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.scheduled_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_5.toString());
										} else {
											row15.scheduled_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.scheduled_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.time.scheduled.arrival";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.scheduled_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_5.toString());
										} else {
											row15.scheduled_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.scheduled_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.time.real.departure";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.real_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_5.toString());
										} else {
											row15.real_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.real_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.time.real.arrival";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.real_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_5.toString());
										} else {
											row15.real_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.real_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.time.estimated.departure";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.estimated_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_5.toString());
										} else {
											row15.estimated_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.estimated_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.time.estimated.arrival";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.estimated_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_5.toString());
										} else {
											row15.estimated_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.estimated_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_5 = "$.flight.airport.destination.visible";
									compiledJsonPath_tExtractJSONFields_5 = jsonPathCache_tExtractJSONFields_5
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_5);

									try {

										value_tExtractJSONFields_5 = compiledJsonPath_tExtractJSONFields_5
												.read(row_tExtractJSONFields_5);

										if (value_tExtractJSONFields_5 != null
												&& !value_tExtractJSONFields_5.toString().isEmpty()) {
											row15.destination_visible = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_5.toString());
										} else {
											row15.destination_visible =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_5) {
										globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
												e_tExtractJSONFields_5.getMessage());
										row15.destination_visible =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_5) {
									globalMap.put("tExtractJSONFields_5_ERROR_MESSAGE",
											ex_tExtractJSONFields_5.getMessage());
									System.err.println(ex_tExtractJSONFields_5.getMessage());
									row15 = null;
								}

							}

							isStructError_tExtractJSONFields_5 = false;

//}

							tos_count_tExtractJSONFields_5++;

							/**
							 * [tExtractJSONFields_5 main ] stop
							 */

							/**
							 * [tExtractJSONFields_5 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_5";

							/**
							 * [tExtractJSONFields_5 process_data_begin ] stop
							 */
// Start of branch "row15"
							if (row15 != null) {

								/**
								 * [tUniqRow_5 main ] start
								 */

								currentComponent = "tUniqRow_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row15"

									);
								}

								row17 = null;
								finder_tUniqRow_5.flight_row_id = row15.flight_row_id;
								finder_tUniqRow_5.hashCodeDirty = true;
								if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
									KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

									new_tUniqRow_5.flight_row_id = row15.flight_row_id;

									keystUniqRow_5.add(new_tUniqRow_5);
									if (row17 == null) {

										row17 = new row17Struct();
									}
									row17.flight_row_id = row15.flight_row_id;
									row17.flight_number = row15.flight_number;
									row17.flight_alternative = row15.flight_alternative;
									row17.status_text = row15.status_text;
									row17.status_live = row15.status_live;
									row17.status_color = row15.status_color;
									row17.aircraft_code = row15.aircraft_code;
									row17.aircraft_text = row15.aircraft_text;
									row17.aircraft_hex = row15.aircraft_hex;
									row17.aircraft_registration = row15.aircraft_registration;
									row17.airline_name = row15.airline_name;
									row17.airline_iata = row15.airline_iata;
									row17.airline_icao = row15.airline_icao;
									row17.airline_short = row15.airline_short;
									row17.destination_iata = row15.destination_iata;
									row17.destination_icao = row15.destination_icao;
									row17.destination_name = row15.destination_name;
									row17.destination_latitude = row15.destination_latitude;
									row17.destination_longitude = row15.destination_longitude;
									row17.destination_country = row15.destination_country;
									row17.destination_country_code = row15.destination_country_code;
									row17.destination_city = row15.destination_city;
									row17.destination_timezone = row15.destination_timezone;
									row17.destination_timezone_offset = row15.destination_timezone_offset;
									row17.scheduled_departure = row15.scheduled_departure;
									row17.scheduled_arrival = row15.scheduled_arrival;
									row17.real_departure = row15.real_departure;
									row17.real_arrival = row15.real_arrival;
									row17.estimated_departure = row15.estimated_departure;
									row17.estimated_arrival = row15.estimated_arrival;
									row17.destination_visible = row15.destination_visible;
									nb_uniques_tUniqRow_5++;
								} else {
									nb_duplicates_tUniqRow_5++;
								}

								tos_count_tUniqRow_5++;

								/**
								 * [tUniqRow_5 main ] stop
								 */

								/**
								 * [tUniqRow_5 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_5";

								/**
								 * [tUniqRow_5 process_data_begin ] stop
								 */
// Start of branch "row17"
								if (row17 != null) {

									/**
									 * [tMap_5 main ] start
									 */

									currentComponent = "tMap_5";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row17"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_5 = false;
									boolean mainRowRejected_tMap_5 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
										// ###############################
										// # Output tables

										copyOfdepartures = null;

// # Output table : 'copyOfdepartures'
										copyOfdepartures_tmp.flight_number = row17.flight_number;
										copyOfdepartures_tmp.flight_alternative = row17.flight_alternative;
										copyOfdepartures_tmp.status_text = row17.status_text;
										copyOfdepartures_tmp.status_live = row17.status_live;
										copyOfdepartures_tmp.status_color = row17.status_color;
										copyOfdepartures_tmp.aircraft_code = row17.aircraft_code;
										copyOfdepartures_tmp.aircraft_text = row17.aircraft_text;
										copyOfdepartures_tmp.aircraft_hex = row17.aircraft_hex;
										copyOfdepartures_tmp.aircraft_registration = row17.aircraft_registration;
										copyOfdepartures_tmp.airline_name = row17.airline_name;
										copyOfdepartures_tmp.airline_iata = row17.airline_iata;
										copyOfdepartures_tmp.airline_icao = row17.airline_icao;
										copyOfdepartures_tmp.airline_short = row17.airline_short;
										copyOfdepartures_tmp.origin_iata = (String) globalMap.get("iata_code");
										copyOfdepartures_tmp.origin_icao = (String) globalMap.get("icao_code");
										copyOfdepartures_tmp.origin_name = (String) globalMap.get("airport_name");
										copyOfdepartures_tmp.origin_latitude = (BigDecimal) globalMap.get("latitude");
										copyOfdepartures_tmp.origin_longitude = (BigDecimal) globalMap.get("longitude");
										copyOfdepartures_tmp.origin_country = (String) globalMap.get("country_name");
										copyOfdepartures_tmp.origin_country_code = (String) globalMap
												.get("country_code");
										copyOfdepartures_tmp.origin_city = (String) globalMap.get("city");
										copyOfdepartures_tmp.origin_timezone = (String) globalMap.get("timezone_name");
										copyOfdepartures_tmp.origin_timezone_offset = (Integer) globalMap
												.get("timezone_offset");
										copyOfdepartures_tmp.origin_avg_rating = (BigDecimal) globalMap
												.get("avg_rating");
										copyOfdepartures_tmp.origin_total_ratings = (Integer) globalMap
												.get("total_ratings");
										copyOfdepartures_tmp.origin_reviews_count = (Integer) globalMap
												.get("reviews_count");
										copyOfdepartures_tmp.origin_evaluation_score = (Integer) globalMap
												.get("evaluation_score");
										copyOfdepartures_tmp.origin_arrivals_delay_index = (BigDecimal) globalMap
												.get("arrivals_delay_index");
										copyOfdepartures_tmp.origin_arrivals_delay_avg = (Integer) globalMap
												.get("arrivals_delay_avg");
										copyOfdepartures_tmp.origin_departures_delay_index = (BigDecimal) globalMap
												.get("departures_delay_index");
										copyOfdepartures_tmp.origin_departures_delay_avg = (Integer) globalMap
												.get("departures_delay_avg");
										copyOfdepartures_tmp.origin_arrivals_today_pct_delayed = (BigDecimal) globalMap
												.get("arrivals_today_pct_delayed");
										copyOfdepartures_tmp.origin_departures_today_pct_delayed = (BigDecimal) globalMap
												.get("departures_today_pct_delayed");
										copyOfdepartures_tmp.origin_arrivals_today_pct_canceled = (BigDecimal) globalMap
												.get("arrivals_today_pct_canceled");
										copyOfdepartures_tmp.origin_departures_today_pct_canceled = (BigDecimal) globalMap
												.get("departures_today_pct_canceled");
										copyOfdepartures_tmp.destination_iata = row17.destination_iata;
										copyOfdepartures_tmp.destination_icao = row17.destination_icao;
										copyOfdepartures_tmp.destination_name = row17.destination_name;
										copyOfdepartures_tmp.destination_latitude = row17.destination_latitude;
										copyOfdepartures_tmp.destination_longitude = row17.destination_longitude;
										copyOfdepartures_tmp.destination_country = row17.destination_country;
										copyOfdepartures_tmp.destination_country_code = row17.destination_country_code;
										copyOfdepartures_tmp.destination_city = row17.destination_city;
										copyOfdepartures_tmp.destination_timezone = row17.destination_timezone;
										copyOfdepartures_tmp.destination_timezone_offset = row17.destination_timezone_offset;
										copyOfdepartures_tmp.destination_visible = null;
										copyOfdepartures_tmp.destination_avg_rating = null;
										copyOfdepartures_tmp.destination_total_ratings = null;
										copyOfdepartures_tmp.destination_reviews_count = null;
										copyOfdepartures_tmp.destination_evaluation_score = null;
										copyOfdepartures_tmp.destination_arrivals_delay_index = null;
										copyOfdepartures_tmp.destination_arrivals_delay_avg = null;
										copyOfdepartures_tmp.destination_departures_delay_index = null;
										copyOfdepartures_tmp.destination_departures_delay_avg = null;
										copyOfdepartures_tmp.destination_arrivals_today_pct_delayed = null;
										copyOfdepartures_tmp.destination_departures_today_pct_delayed = null;
										copyOfdepartures_tmp.destination_arrivals_today_pct_canceled = null;
										copyOfdepartures_tmp.destination_departures_today_pct_canceled = null;
										copyOfdepartures_tmp.scheduled_departure = row17.scheduled_departure;
										copyOfdepartures_tmp.scheduled_arrival = row17.scheduled_arrival;
										copyOfdepartures_tmp.real_departure = row17.real_departure;
										copyOfdepartures_tmp.real_arrival = row17.real_arrival;
										copyOfdepartures_tmp.estimated_departure = row17.estimated_departure;
										copyOfdepartures_tmp.estimated_arrival = row17.estimated_arrival;
										copyOfdepartures_tmp.type = "Departure";
										copyOfdepartures = copyOfdepartures_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_5 = false;

									tos_count_tMap_5++;

									/**
									 * [tMap_5 main ] stop
									 */

									/**
									 * [tMap_5 process_data_begin ] start
									 */

									currentComponent = "tMap_5";

									/**
									 * [tMap_5 process_data_begin ] stop
									 */
// Start of branch "copyOfdepartures"
									if (copyOfdepartures != null) {

										/**
										 * [tDBOutput_3 main ] start
										 */

										currentComponent = "tDBOutput_3";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "copyOfdepartures"

											);
										}

										whetherReject_tDBOutput_3 = false;
										if (copyOfdepartures.flight_number == null) {
											pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_3.setString(1, copyOfdepartures.flight_number);
										}

										int checkCount_tDBOutput_3 = -1;
										try (java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery()) {
											while (rs_tDBOutput_3.next()) {
												checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
											}
										}
										if (checkCount_tDBOutput_3 > 0) {
											if (copyOfdepartures.flight_alternative == null) {
												pstmtUpdate_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(1,
														copyOfdepartures.flight_alternative);
											}

											if (copyOfdepartures.status_text == null) {
												pstmtUpdate_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(2, copyOfdepartures.status_text);
											}

											if (copyOfdepartures.status_live == null) {
												pstmtUpdate_tDBOutput_3.setNull(3, java.sql.Types.BOOLEAN);
											} else {
												pstmtUpdate_tDBOutput_3.setBoolean(3, copyOfdepartures.status_live);
											}

											if (copyOfdepartures.status_color == null) {
												pstmtUpdate_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(4, copyOfdepartures.status_color);
											}

											if (copyOfdepartures.aircraft_code == null) {
												pstmtUpdate_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(5, copyOfdepartures.aircraft_code);
											}

											if (copyOfdepartures.aircraft_text == null) {
												pstmtUpdate_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(6, copyOfdepartures.aircraft_text);
											}

											if (copyOfdepartures.aircraft_hex == null) {
												pstmtUpdate_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(7, copyOfdepartures.aircraft_hex);
											}

											if (copyOfdepartures.aircraft_registration == null) {
												pstmtUpdate_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(8,
														copyOfdepartures.aircraft_registration);
											}

											if (copyOfdepartures.airline_name == null) {
												pstmtUpdate_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(9, copyOfdepartures.airline_name);
											}

											if (copyOfdepartures.airline_iata == null) {
												pstmtUpdate_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(10, copyOfdepartures.airline_iata);
											}

											if (copyOfdepartures.airline_icao == null) {
												pstmtUpdate_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(11, copyOfdepartures.airline_icao);
											}

											if (copyOfdepartures.airline_short == null) {
												pstmtUpdate_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(12, copyOfdepartures.airline_short);
											}

											if (copyOfdepartures.origin_iata == null) {
												pstmtUpdate_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(13, copyOfdepartures.origin_iata);
											}

											if (copyOfdepartures.origin_icao == null) {
												pstmtUpdate_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(14, copyOfdepartures.origin_icao);
											}

											if (copyOfdepartures.origin_name == null) {
												pstmtUpdate_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(15, copyOfdepartures.origin_name);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(16, copyOfdepartures.origin_latitude);

											pstmtUpdate_tDBOutput_3.setBigDecimal(17,
													copyOfdepartures.origin_longitude);

											if (copyOfdepartures.origin_country == null) {
												pstmtUpdate_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(18, copyOfdepartures.origin_country);
											}

											if (copyOfdepartures.origin_country_code == null) {
												pstmtUpdate_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(19,
														copyOfdepartures.origin_country_code);
											}

											if (copyOfdepartures.origin_city == null) {
												pstmtUpdate_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(20, copyOfdepartures.origin_city);
											}

											if (copyOfdepartures.origin_timezone == null) {
												pstmtUpdate_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(21, copyOfdepartures.origin_timezone);
											}

											if (copyOfdepartures.origin_timezone_offset == null) {
												pstmtUpdate_tDBOutput_3.setNull(22, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(22,
														copyOfdepartures.origin_timezone_offset);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(23,
													copyOfdepartures.origin_avg_rating);

											if (copyOfdepartures.origin_total_ratings == null) {
												pstmtUpdate_tDBOutput_3.setNull(24, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(24,
														copyOfdepartures.origin_total_ratings);
											}

											if (copyOfdepartures.origin_reviews_count == null) {
												pstmtUpdate_tDBOutput_3.setNull(25, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(25,
														copyOfdepartures.origin_reviews_count);
											}

											if (copyOfdepartures.origin_evaluation_score == null) {
												pstmtUpdate_tDBOutput_3.setNull(26, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(26,
														copyOfdepartures.origin_evaluation_score);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(27,
													copyOfdepartures.origin_arrivals_delay_index);

											if (copyOfdepartures.origin_arrivals_delay_avg == null) {
												pstmtUpdate_tDBOutput_3.setNull(28, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(28,
														copyOfdepartures.origin_arrivals_delay_avg);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(29,
													copyOfdepartures.origin_departures_delay_index);

											if (copyOfdepartures.origin_departures_delay_avg == null) {
												pstmtUpdate_tDBOutput_3.setNull(30, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(30,
														copyOfdepartures.origin_departures_delay_avg);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(31,
													copyOfdepartures.origin_arrivals_today_pct_delayed);

											pstmtUpdate_tDBOutput_3.setBigDecimal(32,
													copyOfdepartures.origin_departures_today_pct_delayed);

											pstmtUpdate_tDBOutput_3.setBigDecimal(33,
													copyOfdepartures.origin_arrivals_today_pct_canceled);

											pstmtUpdate_tDBOutput_3.setBigDecimal(34,
													copyOfdepartures.origin_departures_today_pct_canceled);

											if (copyOfdepartures.destination_iata == null) {
												pstmtUpdate_tDBOutput_3.setNull(35, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(35,
														copyOfdepartures.destination_iata);
											}

											if (copyOfdepartures.destination_icao == null) {
												pstmtUpdate_tDBOutput_3.setNull(36, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(36,
														copyOfdepartures.destination_icao);
											}

											if (copyOfdepartures.destination_name == null) {
												pstmtUpdate_tDBOutput_3.setNull(37, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(37,
														copyOfdepartures.destination_name);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(38,
													copyOfdepartures.destination_latitude);

											pstmtUpdate_tDBOutput_3.setBigDecimal(39,
													copyOfdepartures.destination_longitude);

											if (copyOfdepartures.destination_country == null) {
												pstmtUpdate_tDBOutput_3.setNull(40, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(40,
														copyOfdepartures.destination_country);
											}

											if (copyOfdepartures.destination_country_code == null) {
												pstmtUpdate_tDBOutput_3.setNull(41, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(41,
														copyOfdepartures.destination_country_code);
											}

											if (copyOfdepartures.destination_city == null) {
												pstmtUpdate_tDBOutput_3.setNull(42, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(42,
														copyOfdepartures.destination_city);
											}

											if (copyOfdepartures.destination_timezone == null) {
												pstmtUpdate_tDBOutput_3.setNull(43, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(43,
														copyOfdepartures.destination_timezone);
											}

											if (copyOfdepartures.destination_timezone_offset == null) {
												pstmtUpdate_tDBOutput_3.setNull(44, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(44,
														copyOfdepartures.destination_timezone_offset);
											}

											if (copyOfdepartures.destination_visible == null) {
												pstmtUpdate_tDBOutput_3.setNull(45, java.sql.Types.BOOLEAN);
											} else {
												pstmtUpdate_tDBOutput_3.setBoolean(45,
														copyOfdepartures.destination_visible);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(46,
													copyOfdepartures.destination_avg_rating);

											if (copyOfdepartures.destination_total_ratings == null) {
												pstmtUpdate_tDBOutput_3.setNull(47, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(47,
														copyOfdepartures.destination_total_ratings);
											}

											if (copyOfdepartures.destination_reviews_count == null) {
												pstmtUpdate_tDBOutput_3.setNull(48, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(48,
														copyOfdepartures.destination_reviews_count);
											}

											if (copyOfdepartures.destination_evaluation_score == null) {
												pstmtUpdate_tDBOutput_3.setNull(49, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(49,
														copyOfdepartures.destination_evaluation_score);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(50,
													copyOfdepartures.destination_arrivals_delay_index);

											if (copyOfdepartures.destination_arrivals_delay_avg == null) {
												pstmtUpdate_tDBOutput_3.setNull(51, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(51,
														copyOfdepartures.destination_arrivals_delay_avg);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(52,
													copyOfdepartures.destination_departures_delay_index);

											if (copyOfdepartures.destination_departures_delay_avg == null) {
												pstmtUpdate_tDBOutput_3.setNull(53, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setInt(53,
														copyOfdepartures.destination_departures_delay_avg);
											}

											pstmtUpdate_tDBOutput_3.setBigDecimal(54,
													copyOfdepartures.destination_arrivals_today_pct_delayed);

											pstmtUpdate_tDBOutput_3.setBigDecimal(55,
													copyOfdepartures.destination_departures_today_pct_delayed);

											pstmtUpdate_tDBOutput_3.setBigDecimal(56,
													copyOfdepartures.destination_arrivals_today_pct_canceled);

											pstmtUpdate_tDBOutput_3.setBigDecimal(57,
													copyOfdepartures.destination_departures_today_pct_canceled);

											if (copyOfdepartures.scheduled_departure == null) {
												pstmtUpdate_tDBOutput_3.setNull(58, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setLong(58,
														copyOfdepartures.scheduled_departure);
											}

											if (copyOfdepartures.scheduled_arrival == null) {
												pstmtUpdate_tDBOutput_3.setNull(59, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setLong(59, copyOfdepartures.scheduled_arrival);
											}

											if (copyOfdepartures.real_departure == null) {
												pstmtUpdate_tDBOutput_3.setNull(60, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setLong(60, copyOfdepartures.real_departure);
											}

											if (copyOfdepartures.real_arrival == null) {
												pstmtUpdate_tDBOutput_3.setNull(61, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setLong(61, copyOfdepartures.real_arrival);
											}

											if (copyOfdepartures.estimated_departure == null) {
												pstmtUpdate_tDBOutput_3.setNull(62, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setLong(62,
														copyOfdepartures.estimated_departure);
											}

											if (copyOfdepartures.estimated_arrival == null) {
												pstmtUpdate_tDBOutput_3.setNull(63, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_3.setLong(63, copyOfdepartures.estimated_arrival);
											}

											if (copyOfdepartures.type == null) {
												pstmtUpdate_tDBOutput_3.setNull(64, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(64, copyOfdepartures.type);
											}

											if (copyOfdepartures.flight_number == null) {
												pstmtUpdate_tDBOutput_3.setNull(65 + count_tDBOutput_3,
														java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_3.setString(65 + count_tDBOutput_3,
														copyOfdepartures.flight_number);
											}

											try {
												int processedCount_tDBOutput_3 = pstmtUpdate_tDBOutput_3
														.executeUpdate();
												updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
												rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
												nb_line_tDBOutput_3++;
											} catch (java.lang.Exception e) {
												globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
												whetherReject_tDBOutput_3 = true;
												nb_line_tDBOutput_3++;
												System.err.print(e.getMessage());
											}
										} else {
											if (copyOfdepartures.flight_number == null) {
												pstmtInsert_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(1, copyOfdepartures.flight_number);
											}

											if (copyOfdepartures.flight_alternative == null) {
												pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(2,
														copyOfdepartures.flight_alternative);
											}

											if (copyOfdepartures.status_text == null) {
												pstmtInsert_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(3, copyOfdepartures.status_text);
											}

											if (copyOfdepartures.status_live == null) {
												pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.BOOLEAN);
											} else {
												pstmtInsert_tDBOutput_3.setBoolean(4, copyOfdepartures.status_live);
											}

											if (copyOfdepartures.status_color == null) {
												pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(5, copyOfdepartures.status_color);
											}

											if (copyOfdepartures.aircraft_code == null) {
												pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(6, copyOfdepartures.aircraft_code);
											}

											if (copyOfdepartures.aircraft_text == null) {
												pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(7, copyOfdepartures.aircraft_text);
											}

											if (copyOfdepartures.aircraft_hex == null) {
												pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(8, copyOfdepartures.aircraft_hex);
											}

											if (copyOfdepartures.aircraft_registration == null) {
												pstmtInsert_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(9,
														copyOfdepartures.aircraft_registration);
											}

											if (copyOfdepartures.airline_name == null) {
												pstmtInsert_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(10, copyOfdepartures.airline_name);
											}

											if (copyOfdepartures.airline_iata == null) {
												pstmtInsert_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(11, copyOfdepartures.airline_iata);
											}

											if (copyOfdepartures.airline_icao == null) {
												pstmtInsert_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(12, copyOfdepartures.airline_icao);
											}

											if (copyOfdepartures.airline_short == null) {
												pstmtInsert_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(13, copyOfdepartures.airline_short);
											}

											if (copyOfdepartures.origin_iata == null) {
												pstmtInsert_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(14, copyOfdepartures.origin_iata);
											}

											if (copyOfdepartures.origin_icao == null) {
												pstmtInsert_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(15, copyOfdepartures.origin_icao);
											}

											if (copyOfdepartures.origin_name == null) {
												pstmtInsert_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(16, copyOfdepartures.origin_name);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(17, copyOfdepartures.origin_latitude);

											pstmtInsert_tDBOutput_3.setBigDecimal(18,
													copyOfdepartures.origin_longitude);

											if (copyOfdepartures.origin_country == null) {
												pstmtInsert_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(19, copyOfdepartures.origin_country);
											}

											if (copyOfdepartures.origin_country_code == null) {
												pstmtInsert_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(20,
														copyOfdepartures.origin_country_code);
											}

											if (copyOfdepartures.origin_city == null) {
												pstmtInsert_tDBOutput_3.setNull(21, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(21, copyOfdepartures.origin_city);
											}

											if (copyOfdepartures.origin_timezone == null) {
												pstmtInsert_tDBOutput_3.setNull(22, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(22, copyOfdepartures.origin_timezone);
											}

											if (copyOfdepartures.origin_timezone_offset == null) {
												pstmtInsert_tDBOutput_3.setNull(23, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(23,
														copyOfdepartures.origin_timezone_offset);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(24,
													copyOfdepartures.origin_avg_rating);

											if (copyOfdepartures.origin_total_ratings == null) {
												pstmtInsert_tDBOutput_3.setNull(25, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(25,
														copyOfdepartures.origin_total_ratings);
											}

											if (copyOfdepartures.origin_reviews_count == null) {
												pstmtInsert_tDBOutput_3.setNull(26, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(26,
														copyOfdepartures.origin_reviews_count);
											}

											if (copyOfdepartures.origin_evaluation_score == null) {
												pstmtInsert_tDBOutput_3.setNull(27, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(27,
														copyOfdepartures.origin_evaluation_score);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(28,
													copyOfdepartures.origin_arrivals_delay_index);

											if (copyOfdepartures.origin_arrivals_delay_avg == null) {
												pstmtInsert_tDBOutput_3.setNull(29, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(29,
														copyOfdepartures.origin_arrivals_delay_avg);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(30,
													copyOfdepartures.origin_departures_delay_index);

											if (copyOfdepartures.origin_departures_delay_avg == null) {
												pstmtInsert_tDBOutput_3.setNull(31, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(31,
														copyOfdepartures.origin_departures_delay_avg);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(32,
													copyOfdepartures.origin_arrivals_today_pct_delayed);

											pstmtInsert_tDBOutput_3.setBigDecimal(33,
													copyOfdepartures.origin_departures_today_pct_delayed);

											pstmtInsert_tDBOutput_3.setBigDecimal(34,
													copyOfdepartures.origin_arrivals_today_pct_canceled);

											pstmtInsert_tDBOutput_3.setBigDecimal(35,
													copyOfdepartures.origin_departures_today_pct_canceled);

											if (copyOfdepartures.destination_iata == null) {
												pstmtInsert_tDBOutput_3.setNull(36, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(36,
														copyOfdepartures.destination_iata);
											}

											if (copyOfdepartures.destination_icao == null) {
												pstmtInsert_tDBOutput_3.setNull(37, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(37,
														copyOfdepartures.destination_icao);
											}

											if (copyOfdepartures.destination_name == null) {
												pstmtInsert_tDBOutput_3.setNull(38, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(38,
														copyOfdepartures.destination_name);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(39,
													copyOfdepartures.destination_latitude);

											pstmtInsert_tDBOutput_3.setBigDecimal(40,
													copyOfdepartures.destination_longitude);

											if (copyOfdepartures.destination_country == null) {
												pstmtInsert_tDBOutput_3.setNull(41, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(41,
														copyOfdepartures.destination_country);
											}

											if (copyOfdepartures.destination_country_code == null) {
												pstmtInsert_tDBOutput_3.setNull(42, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(42,
														copyOfdepartures.destination_country_code);
											}

											if (copyOfdepartures.destination_city == null) {
												pstmtInsert_tDBOutput_3.setNull(43, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(43,
														copyOfdepartures.destination_city);
											}

											if (copyOfdepartures.destination_timezone == null) {
												pstmtInsert_tDBOutput_3.setNull(44, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(44,
														copyOfdepartures.destination_timezone);
											}

											if (copyOfdepartures.destination_timezone_offset == null) {
												pstmtInsert_tDBOutput_3.setNull(45, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(45,
														copyOfdepartures.destination_timezone_offset);
											}

											if (copyOfdepartures.destination_visible == null) {
												pstmtInsert_tDBOutput_3.setNull(46, java.sql.Types.BOOLEAN);
											} else {
												pstmtInsert_tDBOutput_3.setBoolean(46,
														copyOfdepartures.destination_visible);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(47,
													copyOfdepartures.destination_avg_rating);

											if (copyOfdepartures.destination_total_ratings == null) {
												pstmtInsert_tDBOutput_3.setNull(48, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(48,
														copyOfdepartures.destination_total_ratings);
											}

											if (copyOfdepartures.destination_reviews_count == null) {
												pstmtInsert_tDBOutput_3.setNull(49, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(49,
														copyOfdepartures.destination_reviews_count);
											}

											if (copyOfdepartures.destination_evaluation_score == null) {
												pstmtInsert_tDBOutput_3.setNull(50, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(50,
														copyOfdepartures.destination_evaluation_score);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(51,
													copyOfdepartures.destination_arrivals_delay_index);

											if (copyOfdepartures.destination_arrivals_delay_avg == null) {
												pstmtInsert_tDBOutput_3.setNull(52, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(52,
														copyOfdepartures.destination_arrivals_delay_avg);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(53,
													copyOfdepartures.destination_departures_delay_index);

											if (copyOfdepartures.destination_departures_delay_avg == null) {
												pstmtInsert_tDBOutput_3.setNull(54, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setInt(54,
														copyOfdepartures.destination_departures_delay_avg);
											}

											pstmtInsert_tDBOutput_3.setBigDecimal(55,
													copyOfdepartures.destination_arrivals_today_pct_delayed);

											pstmtInsert_tDBOutput_3.setBigDecimal(56,
													copyOfdepartures.destination_departures_today_pct_delayed);

											pstmtInsert_tDBOutput_3.setBigDecimal(57,
													copyOfdepartures.destination_arrivals_today_pct_canceled);

											pstmtInsert_tDBOutput_3.setBigDecimal(58,
													copyOfdepartures.destination_departures_today_pct_canceled);

											if (copyOfdepartures.scheduled_departure == null) {
												pstmtInsert_tDBOutput_3.setNull(59, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setLong(59,
														copyOfdepartures.scheduled_departure);
											}

											if (copyOfdepartures.scheduled_arrival == null) {
												pstmtInsert_tDBOutput_3.setNull(60, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setLong(60, copyOfdepartures.scheduled_arrival);
											}

											if (copyOfdepartures.real_departure == null) {
												pstmtInsert_tDBOutput_3.setNull(61, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setLong(61, copyOfdepartures.real_departure);
											}

											if (copyOfdepartures.real_arrival == null) {
												pstmtInsert_tDBOutput_3.setNull(62, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setLong(62, copyOfdepartures.real_arrival);
											}

											if (copyOfdepartures.estimated_departure == null) {
												pstmtInsert_tDBOutput_3.setNull(63, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setLong(63,
														copyOfdepartures.estimated_departure);
											}

											if (copyOfdepartures.estimated_arrival == null) {
												pstmtInsert_tDBOutput_3.setNull(64, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_3.setLong(64, copyOfdepartures.estimated_arrival);
											}

											if (copyOfdepartures.type == null) {
												pstmtInsert_tDBOutput_3.setNull(65, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_3.setString(65, copyOfdepartures.type);
											}

											try {
												int processedCount_tDBOutput_3 = pstmtInsert_tDBOutput_3
														.executeUpdate();
												insertedCount_tDBOutput_3 += processedCount_tDBOutput_3;
												rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
												nb_line_tDBOutput_3++;
											} catch (java.lang.Exception e) {
												globalMap.put("tDBOutput_3_ERROR_MESSAGE", e.getMessage());
												whetherReject_tDBOutput_3 = true;
												nb_line_tDBOutput_3++;
												System.err.print(e.getMessage());
											}
										}
										if (!whetherReject_tDBOutput_3) {
										}
										commitCounter_tDBOutput_3++;

										if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

											if (rowsToCommitCount_tDBOutput_3 != 0) {
											}
											conn_tDBOutput_3.commit();
											if (rowsToCommitCount_tDBOutput_3 != 0) {
												rowsToCommitCount_tDBOutput_3 = 0;
											}
											commitCounter_tDBOutput_3 = 0;

										}

										tos_count_tDBOutput_3++;

										/**
										 * [tDBOutput_3 main ] stop
										 */

										/**
										 * [tDBOutput_3 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_3";

										/**
										 * [tDBOutput_3 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_3 process_data_end ] start
										 */

										currentComponent = "tDBOutput_3";

										/**
										 * [tDBOutput_3 process_data_end ] stop
										 */

									} // End of branch "copyOfdepartures"

									/**
									 * [tMap_5 process_data_end ] start
									 */

									currentComponent = "tMap_5";

									/**
									 * [tMap_5 process_data_end ] stop
									 */

								} // End of branch "row17"

								/**
								 * [tUniqRow_5 process_data_end ] start
								 */

								currentComponent = "tUniqRow_5";

								/**
								 * [tUniqRow_5 process_data_end ] stop
								 */

							} // End of branch "row15"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_5 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_5";

					/**
					 * [tExtractJSONFields_5 process_data_end ] stop
					 */

					/**
					 * [tSleep_2 process_data_end ] start
					 */

					currentComponent = "tSleep_2";

					/**
					 * [tSleep_2 process_data_end ] stop
					 */

				} // End of branch "copyOfFlight_departures"

				/**
				 * [tMap_4 process_data_end ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 process_data_end ] stop
				 */

				/**
				 * [tREST_2 process_data_end ] start
				 */

				currentComponent = "tREST_2";

				/**
				 * [tREST_2 process_data_end ] stop
				 */

				/**
				 * [tREST_2 end ] start
				 */

				currentComponent = "tREST_2";

				ok_Hash.put("tREST_2", true);
				end_Hash.put("tREST_2", System.currentTimeMillis());

				/**
				 * [tREST_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tExtractJSONFields_2 end ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				globalMap.put("tExtractJSONFields_2_NB_LINE", nb_line_tExtractJSONFields_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfAirport_details");
				}

				ok_Hash.put("tExtractJSONFields_2", true);
				end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_2 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES", nb_duplicates_tUniqRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tSleep_2 end ] start
				 */

				currentComponent = "tSleep_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfFlight_departures");
				}

				ok_Hash.put("tSleep_2", true);
				end_Hash.put("tSleep_2", System.currentTimeMillis());

				/**
				 * [tSleep_2 end ] stop
				 */

				/**
				 * [tExtractJSONFields_5 end ] start
				 */

				currentComponent = "tExtractJSONFields_5";

				globalMap.put("tExtractJSONFields_2_NB_LINE", nb_line_tExtractJSONFields_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tExtractJSONFields_5", true);
				end_Hash.put("tExtractJSONFields_5", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_5 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES", nb_duplicates_tUniqRow_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (pstmtUpdate_tDBOutput_3 != null) {
					pstmtUpdate_tDBOutput_3.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_3");
				}
				if (pstmtInsert_tDBOutput_3 != null) {
					pstmtInsert_tDBOutput_3.close();
					resourceMap.remove("pstmtInsert_tDBOutput_3");
				}
				if (pstmt_tDBOutput_3 != null) {
					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				if (commitCounter_tDBOutput_3 > 0 && rowsToCommitCount_tDBOutput_3 != 0) {

				}
				conn_tDBOutput_3.commit();
				if (commitCounter_tDBOutput_3 > 0 && rowsToCommitCount_tDBOutput_3 != 0) {

					rowsToCommitCount_tDBOutput_3 = 0;
				}
				commitCounter_tDBOutput_3 = 0;

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfdepartures");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tREST_4Process(globalMap);

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_2 finally ] start
				 */

				currentComponent = "tREST_2";

				/**
				 * [tREST_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_2 finally ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				/**
				 * [tExtractJSONFields_2 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tSleep_2 finally ] start
				 */

				currentComponent = "tSleep_2";

				/**
				 * [tSleep_2 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_5 finally ] start
				 */

				currentComponent = "tExtractJSONFields_5";

				/**
				 * [tExtractJSONFields_5 finally ] stop
				 */

				/**
				 * [tUniqRow_5 finally ] start
				 */

				currentComponent = "tUniqRow_5";

				/**
				 * [tUniqRow_5 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_3 = null;
						if ((pstmtUpdateToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_3")) != null) {
							pstmtUpdateToClose_tDBOutput_3.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_3 = null;
						if ((pstmtInsertToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_3")) != null) {
							pstmtInsertToClose_tDBOutput_3.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfarrivalsStruct implements routines.system.IPersistableRow<copyOfarrivalsStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public BigDecimal origin_avg_rating;

		public BigDecimal getOrigin_avg_rating() {
			return this.origin_avg_rating;
		}

		public Integer origin_total_ratings;

		public Integer getOrigin_total_ratings() {
			return this.origin_total_ratings;
		}

		public Integer origin_reviews_count;

		public Integer getOrigin_reviews_count() {
			return this.origin_reviews_count;
		}

		public Integer origin_evaluation_score;

		public Integer getOrigin_evaluation_score() {
			return this.origin_evaluation_score;
		}

		public BigDecimal origin_arrivals_delay_index;

		public BigDecimal getOrigin_arrivals_delay_index() {
			return this.origin_arrivals_delay_index;
		}

		public Integer origin_arrivals_delay_avg;

		public Integer getOrigin_arrivals_delay_avg() {
			return this.origin_arrivals_delay_avg;
		}

		public BigDecimal origin_departures_delay_index;

		public BigDecimal getOrigin_departures_delay_index() {
			return this.origin_departures_delay_index;
		}

		public Integer origin_departures_delay_avg;

		public Integer getOrigin_departures_delay_avg() {
			return this.origin_departures_delay_avg;
		}

		public BigDecimal origin_arrivals_today_pct_delayed;

		public BigDecimal getOrigin_arrivals_today_pct_delayed() {
			return this.origin_arrivals_today_pct_delayed;
		}

		public BigDecimal origin_departures_today_pct_delayed;

		public BigDecimal getOrigin_departures_today_pct_delayed() {
			return this.origin_departures_today_pct_delayed;
		}

		public BigDecimal origin_arrivals_today_pct_canceled;

		public BigDecimal getOrigin_arrivals_today_pct_canceled() {
			return this.origin_arrivals_today_pct_canceled;
		}

		public BigDecimal origin_departures_today_pct_canceled;

		public BigDecimal getOrigin_departures_today_pct_canceled() {
			return this.origin_departures_today_pct_canceled;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		public BigDecimal destination_avg_rating;

		public BigDecimal getDestination_avg_rating() {
			return this.destination_avg_rating;
		}

		public Integer destination_total_ratings;

		public Integer getDestination_total_ratings() {
			return this.destination_total_ratings;
		}

		public Integer destination_reviews_count;

		public Integer getDestination_reviews_count() {
			return this.destination_reviews_count;
		}

		public Integer destination_evaluation_score;

		public Integer getDestination_evaluation_score() {
			return this.destination_evaluation_score;
		}

		public BigDecimal destination_arrivals_delay_index;

		public BigDecimal getDestination_arrivals_delay_index() {
			return this.destination_arrivals_delay_index;
		}

		public Integer destination_arrivals_delay_avg;

		public Integer getDestination_arrivals_delay_avg() {
			return this.destination_arrivals_delay_avg;
		}

		public BigDecimal destination_departures_delay_index;

		public BigDecimal getDestination_departures_delay_index() {
			return this.destination_departures_delay_index;
		}

		public Integer destination_departures_delay_avg;

		public Integer getDestination_departures_delay_avg() {
			return this.destination_departures_delay_avg;
		}

		public BigDecimal destination_arrivals_today_pct_delayed;

		public BigDecimal getDestination_arrivals_today_pct_delayed() {
			return this.destination_arrivals_today_pct_delayed;
		}

		public BigDecimal destination_departures_today_pct_delayed;

		public BigDecimal getDestination_departures_today_pct_delayed() {
			return this.destination_departures_today_pct_delayed;
		}

		public BigDecimal destination_arrivals_today_pct_canceled;

		public BigDecimal getDestination_arrivals_today_pct_canceled() {
			return this.destination_arrivals_today_pct_canceled;
		}

		public BigDecimal destination_departures_today_pct_canceled;

		public BigDecimal getDestination_departures_today_pct_canceled() {
			return this.destination_departures_today_pct_canceled;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfarrivalsStruct other = (copyOfarrivalsStruct) obj;

			if (this.flight_number == null) {
				if (other.flight_number != null)
					return false;

			} else if (!this.flight_number.equals(other.flight_number))

				return false;

			return true;
		}

		public void copyDataTo(copyOfarrivalsStruct other) {

			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.origin_avg_rating = this.origin_avg_rating;
			other.origin_total_ratings = this.origin_total_ratings;
			other.origin_reviews_count = this.origin_reviews_count;
			other.origin_evaluation_score = this.origin_evaluation_score;
			other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
			other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
			other.origin_departures_delay_index = this.origin_departures_delay_index;
			other.origin_departures_delay_avg = this.origin_departures_delay_avg;
			other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
			other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
			other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
			other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.destination_visible = this.destination_visible;
			other.destination_avg_rating = this.destination_avg_rating;
			other.destination_total_ratings = this.destination_total_ratings;
			other.destination_reviews_count = this.destination_reviews_count;
			other.destination_evaluation_score = this.destination_evaluation_score;
			other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
			other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
			other.destination_departures_delay_index = this.destination_departures_delay_index;
			other.destination_departures_delay_avg = this.destination_departures_delay_avg;
			other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
			other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
			other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
			other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.type = this.type;

		}

		public void copyKeysDataTo(copyOfarrivalsStruct other) {

			other.flight_number = this.flight_number;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",origin_avg_rating=" + String.valueOf(origin_avg_rating));
			sb.append(",origin_total_ratings=" + String.valueOf(origin_total_ratings));
			sb.append(",origin_reviews_count=" + String.valueOf(origin_reviews_count));
			sb.append(",origin_evaluation_score=" + String.valueOf(origin_evaluation_score));
			sb.append(",origin_arrivals_delay_index=" + String.valueOf(origin_arrivals_delay_index));
			sb.append(",origin_arrivals_delay_avg=" + String.valueOf(origin_arrivals_delay_avg));
			sb.append(",origin_departures_delay_index=" + String.valueOf(origin_departures_delay_index));
			sb.append(",origin_departures_delay_avg=" + String.valueOf(origin_departures_delay_avg));
			sb.append(",origin_arrivals_today_pct_delayed=" + String.valueOf(origin_arrivals_today_pct_delayed));
			sb.append(",origin_departures_today_pct_delayed=" + String.valueOf(origin_departures_today_pct_delayed));
			sb.append(",origin_arrivals_today_pct_canceled=" + String.valueOf(origin_arrivals_today_pct_canceled));
			sb.append(",origin_departures_today_pct_canceled=" + String.valueOf(origin_departures_today_pct_canceled));
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append(",destination_avg_rating=" + String.valueOf(destination_avg_rating));
			sb.append(",destination_total_ratings=" + String.valueOf(destination_total_ratings));
			sb.append(",destination_reviews_count=" + String.valueOf(destination_reviews_count));
			sb.append(",destination_evaluation_score=" + String.valueOf(destination_evaluation_score));
			sb.append(",destination_arrivals_delay_index=" + String.valueOf(destination_arrivals_delay_index));
			sb.append(",destination_arrivals_delay_avg=" + String.valueOf(destination_arrivals_delay_avg));
			sb.append(",destination_departures_delay_index=" + String.valueOf(destination_departures_delay_index));
			sb.append(",destination_departures_delay_avg=" + String.valueOf(destination_departures_delay_avg));
			sb.append(",destination_arrivals_today_pct_delayed="
					+ String.valueOf(destination_arrivals_today_pct_delayed));
			sb.append(",destination_departures_today_pct_delayed="
					+ String.valueOf(destination_departures_today_pct_delayed));
			sb.append(",destination_arrivals_today_pct_canceled="
					+ String.valueOf(destination_arrivals_today_pct_canceled));
			sb.append(",destination_departures_today_pct_canceled="
					+ String.valueOf(destination_departures_today_pct_canceled));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfarrivalsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.flight_row_id == null) {
				if (other.flight_row_id != null)
					return false;

			} else if (!this.flight_row_id.equals(other.flight_row_id))

				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.flight_row_id = this.flight_row_id;
			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.destination_visible = this.destination_visible;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.flight_row_id = this.flight_row_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_row_id, other.flight_row_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tREST_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				row20Struct row20 = new row20Struct();
				row21Struct row21 = new row21Struct();
				copyOfarrivalsStruct copyOfarrivals = new copyOfarrivalsStruct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfarrivals");
				}

				int tos_count_tDBOutput_4 = 0;

				int updateKeyCount_tDBOutput_4 = 1;
				if (updateKeyCount_tDBOutput_4 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_4 == 65 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rowsToCommitCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "Raw_Flights";
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
				calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime().getTime();
				long date_tDBOutput_4;

				java.sql.Connection conn_tDBOutput_4 = null;

				String properties_tDBOutput_4 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBOutput_4 == null || properties_tDBOutput_4.trim().length() == 0) {
					properties_tDBOutput_4 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_4.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_4 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_4.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_4 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?"
						+ properties_tDBOutput_4;

				String driverClass_tDBOutput_4 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_4 = "root";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:NiWc2ZslD/akGuX9Siui3QBfKDOWy0KbrtFg99qOvLM=");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				java.lang.Class.forName(driverClass_tDBOutput_4);

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4,
						dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables("airportdata", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_4 = false;
				while (rsTable_tDBOutput_4.next()) {
					String table_tDBOutput_4 = rsTable_tDBOutput_4.getString("TABLE_NAME");
					if (table_tDBOutput_4.equalsIgnoreCase("Raw_Flights")) {
						whetherExist_tDBOutput_4 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						stmtCreate_tDBOutput_4.execute("CREATE TABLE `" + tableName_tDBOutput_4
								+ "`(`flight_number` VARCHAR(20)  ,`flight_alternative` VARCHAR(20)  ,`status_text` VARCHAR(50)  ,`status_live` BIT(1)  ,`status_color` VARCHAR(20)  ,`aircraft_code` VARCHAR(10)  ,`aircraft_text` VARCHAR(100)  ,`aircraft_hex` VARCHAR(10)  ,`aircraft_registration` VARCHAR(20)  ,`airline_name` VARCHAR(100)  ,`airline_iata` VARCHAR(2)  ,`airline_icao` VARCHAR(3)  ,`airline_short` VARCHAR(50)  ,`origin_iata` VARCHAR(3)  ,`origin_icao` VARCHAR(4)  ,`origin_name` VARCHAR(200)  ,`origin_latitude` DECIMAL(10,7)  ,`origin_longitude` DECIMAL(10,7)  ,`origin_country` VARCHAR(100)  ,`origin_country_code` VARCHAR(2)  ,`origin_city` VARCHAR(100)  ,`origin_timezone` VARCHAR(50)  ,`origin_timezone_offset` INT(10)  ,`origin_avg_rating` DECIMAL(3,2)  ,`origin_total_ratings` INT(10)  ,`origin_reviews_count` INT(10)  ,`origin_evaluation_score` INT(10)  ,`origin_arrivals_delay_index` DECIMAL(5,2)  ,`origin_arrivals_delay_avg` INT(10)  ,`origin_departures_delay_index` DECIMAL(5,2)  ,`origin_departures_delay_avg` INT(10)  ,`origin_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`origin_departures_today_pct_delayed` DECIMAL(3,2)  ,`origin_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`origin_departures_today_pct_canceled` DECIMAL(3,2)  ,`destination_iata` VARCHAR(3)  ,`destination_icao` VARCHAR(4)  ,`destination_name` VARCHAR(200)  ,`destination_latitude` DECIMAL(10,7)  ,`destination_longitude` DECIMAL(10,7)  ,`destination_country` VARCHAR(100)  ,`destination_country_code` VARCHAR(2)  ,`destination_city` VARCHAR(100)  ,`destination_timezone` VARCHAR(50)  ,`destination_timezone_offset` INT(10)  ,`destination_visible` BIT(1)  ,`destination_avg_rating` DECIMAL(3,2)  ,`destination_total_ratings` INT(10)  ,`destination_reviews_count` INT(10)  ,`destination_evaluation_score` INT(10)  ,`destination_arrivals_delay_index` DECIMAL(5,2)  ,`destination_arrivals_delay_avg` INT(10)  ,`destination_departures_delay_index` DECIMAL(5,2)  ,`destination_departures_delay_avg` INT(10)  ,`destination_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`destination_departures_today_pct_delayed` DECIMAL(3,2)  ,`destination_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`destination_departures_today_pct_canceled` DECIMAL(3,2)  ,`scheduled_departure` BIGINT(20)  ,`scheduled_arrival` BIGINT(20)  ,`real_departure` BIGINT(20)  ,`real_arrival` BIGINT(20)  ,`estimated_departure` BIGINT(20)  ,`estimated_arrival` BIGINT(20)  ,`type` VARCHAR(10)  ,primary key(`flight_number`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement("SELECT COUNT(1) FROM `" + "Raw_Flights" + "` WHERE `flight_number` = ?");
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
				String insert_tDBOutput_4 = "INSERT INTO `" + "Raw_Flights"
						+ "` (`flight_number`,`flight_alternative`,`status_text`,`status_live`,`status_color`,`aircraft_code`,`aircraft_text`,`aircraft_hex`,`aircraft_registration`,`airline_name`,`airline_iata`,`airline_icao`,`airline_short`,`origin_iata`,`origin_icao`,`origin_name`,`origin_latitude`,`origin_longitude`,`origin_country`,`origin_country_code`,`origin_city`,`origin_timezone`,`origin_timezone_offset`,`origin_avg_rating`,`origin_total_ratings`,`origin_reviews_count`,`origin_evaluation_score`,`origin_arrivals_delay_index`,`origin_arrivals_delay_avg`,`origin_departures_delay_index`,`origin_departures_delay_avg`,`origin_arrivals_today_pct_delayed`,`origin_departures_today_pct_delayed`,`origin_arrivals_today_pct_canceled`,`origin_departures_today_pct_canceled`,`destination_iata`,`destination_icao`,`destination_name`,`destination_latitude`,`destination_longitude`,`destination_country`,`destination_country_code`,`destination_city`,`destination_timezone`,`destination_timezone_offset`,`destination_visible`,`destination_avg_rating`,`destination_total_ratings`,`destination_reviews_count`,`destination_evaluation_score`,`destination_arrivals_delay_index`,`destination_arrivals_delay_avg`,`destination_departures_delay_index`,`destination_departures_delay_avg`,`destination_arrivals_today_pct_delayed`,`destination_departures_today_pct_delayed`,`destination_arrivals_today_pct_canceled`,`destination_departures_today_pct_canceled`,`scheduled_departure`,`scheduled_arrival`,`real_departure`,`real_arrival`,`estimated_departure`,`estimated_arrival`,`type`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
				String update_tDBOutput_4 = "UPDATE `" + "Raw_Flights"
						+ "` SET `flight_alternative` = ?,`status_text` = ?,`status_live` = ?,`status_color` = ?,`aircraft_code` = ?,`aircraft_text` = ?,`aircraft_hex` = ?,`aircraft_registration` = ?,`airline_name` = ?,`airline_iata` = ?,`airline_icao` = ?,`airline_short` = ?,`origin_iata` = ?,`origin_icao` = ?,`origin_name` = ?,`origin_latitude` = ?,`origin_longitude` = ?,`origin_country` = ?,`origin_country_code` = ?,`origin_city` = ?,`origin_timezone` = ?,`origin_timezone_offset` = ?,`origin_avg_rating` = ?,`origin_total_ratings` = ?,`origin_reviews_count` = ?,`origin_evaluation_score` = ?,`origin_arrivals_delay_index` = ?,`origin_arrivals_delay_avg` = ?,`origin_departures_delay_index` = ?,`origin_departures_delay_avg` = ?,`origin_arrivals_today_pct_delayed` = ?,`origin_departures_today_pct_delayed` = ?,`origin_arrivals_today_pct_canceled` = ?,`origin_departures_today_pct_canceled` = ?,`destination_iata` = ?,`destination_icao` = ?,`destination_name` = ?,`destination_latitude` = ?,`destination_longitude` = ?,`destination_country` = ?,`destination_country_code` = ?,`destination_city` = ?,`destination_timezone` = ?,`destination_timezone_offset` = ?,`destination_visible` = ?,`destination_avg_rating` = ?,`destination_total_ratings` = ?,`destination_reviews_count` = ?,`destination_evaluation_score` = ?,`destination_arrivals_delay_index` = ?,`destination_arrivals_delay_avg` = ?,`destination_departures_delay_index` = ?,`destination_departures_delay_avg` = ?,`destination_arrivals_today_pct_delayed` = ?,`destination_departures_today_pct_delayed` = ?,`destination_arrivals_today_pct_canceled` = ?,`destination_departures_today_pct_canceled` = ?,`scheduled_departure` = ?,`scheduled_arrival` = ?,`real_departure` = ?,`real_arrival` = ?,`estimated_departure` = ?,`estimated_arrival` = ?,`type` = ? WHERE `flight_number` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(update_tDBOutput_4);
				resourceMap.put("pstmtUpdate_tDBOutput_4", pstmtUpdate_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfarrivalsStruct copyOfarrivals_tmp = new copyOfarrivalsStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());

				currentComponent = "tUniqRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tUniqRow_6 = 0;

				class KeyStruct_tUniqRow_6 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Long flight_row_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

						if (this.flight_row_id == null) {
							if (other.flight_row_id != null)
								return false;

						} else if (!this.flight_row_id.equals(other.flight_row_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;
				KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
				java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_6 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_6", false);
				start_Hash.put("tExtractJSONFields_6", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tExtractJSONFields_6 = 0;

				int nb_line_tExtractJSONFields_6 = 0;
				String jsonStr_tExtractJSONFields_6 = "";

				class JsonPathCache_tExtractJSONFields_6 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_6 jsonPathCache_tExtractJSONFields_6 = new JsonPathCache_tExtractJSONFields_6();

				/**
				 * [tExtractJSONFields_6 begin ] stop
				 */

				/**
				 * [tREST_4 begin ] start
				 */

				ok_Hash.put("tREST_4", false);
				start_Hash.put("tREST_4", System.currentTimeMillis());

				currentComponent = "tREST_4";

				int tos_count_tREST_4 = 0;

				String endpoint_tREST_4 = "https://api.flightapi.io/schedule/" + context.apikey
						+ "?mode=arrivals&iata=DJE&day=-1";

				String trustStoreFile_tREST_4 = System.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_4 = System.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_4 = System.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_4 = System.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_4 = System.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_4 = System.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_4 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_4 = javax.net.ssl.SSLContext.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_4 = null;
				if (trustStoreFile_tREST_4 != null && trustStoreType_tREST_4 != null) {
					char[] password_tREST_4 = null;
					if (trustStorePWD_tREST_4 != null)
						password_tREST_4 = trustStorePWD_tREST_4.toCharArray();
					java.security.KeyStore trustStore_tREST_4 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_4);
					trustStore_tREST_4.load(new java.io.FileInputStream(trustStoreFile_tREST_4), password_tREST_4);

					javax.net.ssl.TrustManagerFactory tmf_tREST_4 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					tmf_tREST_4.init(trustStore_tREST_4);
					tms_tREST_4 = tmf_tREST_4.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_4 = null;
				if (keyStoreFile_tREST_4 != null && keyStoreType_tREST_4 != null) {
					char[] password_tREST_4 = null;
					if (keyStorePWD_tREST_4 != null)
						password_tREST_4 = keyStorePWD_tREST_4.toCharArray();
					java.security.KeyStore keyStore_tREST_4 = java.security.KeyStore.getInstance(keyStoreType_tREST_4);
					keyStore_tREST_4.load(new java.io.FileInputStream(keyStoreFile_tREST_4), password_tREST_4);

					javax.net.ssl.KeyManagerFactory kmf_tREST_4 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					kmf_tREST_4.init(keyStore_tREST_4, password_tREST_4);
					kms_tREST_4 = kmf_tREST_4.getKeyManagers();
				}

				ctx_tREST_4.init(kms_tREST_4, tms_tREST_4, null);
				config_tREST_4.getProperties().put(
						com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
						new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

							public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
								return true;
							}
						}, ctx_tREST_4));

				com.sun.jersey.api.client.Client restClient_tREST_4 = com.sun.jersey.api.client.Client
						.create(config_tREST_4);

				java.util.Map<String, Object> headers_tREST_4 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_4 = headers_tREST_4.get("Transfer-Encoding");
				if (transfer_encoding_tREST_4 != null && "chunked".equals(transfer_encoding_tREST_4)) {
					restClient_tREST_4.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_4;
				if (endpoint_tREST_4 != null && !("").equals(endpoint_tREST_4)) {
					restResource_tREST_4 = restClient_tREST_4.resource(endpoint_tREST_4);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_4 = null;
				String restResponse_tREST_4 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_4 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_4 : headers_tREST_4.entrySet()) {
						if (builder_tREST_4 == null) {
							builder_tREST_4 = restResource_tREST_4.header(header_tREST_4.getKey(),
									header_tREST_4.getValue());
						} else {
							builder_tREST_4.header(header_tREST_4.getKey(), header_tREST_4.getValue());
						}
					}

					if (builder_tREST_4 != null) {
						restResponse_tREST_4 = builder_tREST_4.get(String.class);
					} else {
						restResponse_tREST_4 = restResource_tREST_4.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					globalMap.put("tREST_4_ERROR_MESSAGE", ue.getMessage());
					errorResponse_tREST_4 = ue.getResponse();
				}

				// for output

				row19 = new row19Struct();
				if (errorResponse_tREST_4 != null) {
					row19.ERROR_CODE = errorResponse_tREST_4.getStatus();
					if (row19.ERROR_CODE != 204) {
						row19.Body = errorResponse_tREST_4.getEntity(String.class);
					}
				} else {
					row19.Body = restResponse_tREST_4;
				}

				/**
				 * [tREST_4 begin ] stop
				 */

				/**
				 * [tREST_4 main ] start
				 */

				currentComponent = "tREST_4";

				tos_count_tREST_4++;

				/**
				 * [tREST_4 main ] stop
				 */

				/**
				 * [tREST_4 process_data_begin ] start
				 */

				currentComponent = "tREST_4";

				/**
				 * [tREST_4 process_data_begin ] stop
				 */

				/**
				 * [tExtractJSONFields_6 main ] start
				 */

				currentComponent = "tExtractJSONFields_6";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1

							, "row19"

					);
				}

				if (row19.Body != null) {// C_01
					jsonStr_tExtractJSONFields_6 = row19.Body.toString();

					row20 = null;

					String loopPath_tExtractJSONFields_6 = "$.airport.pluginData.schedule.arrivals.data[*]";
					java.util.List<Object> resultset_tExtractJSONFields_6 = new java.util.ArrayList<Object>();

					boolean isStructError_tExtractJSONFields_6 = true;
					com.jayway.jsonpath.ReadContext document_tExtractJSONFields_6 = null;
					try {
						document_tExtractJSONFields_6 = com.jayway.jsonpath.JsonPath
								.parse(jsonStr_tExtractJSONFields_6);
						com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
								.getCompiledJsonPath(loopPath_tExtractJSONFields_6);
						Object result_tExtractJSONFields_6 = document_tExtractJSONFields_6
								.read(compiledLoopPath_tExtractJSONFields_6, net.minidev.json.JSONObject.class);
						if (result_tExtractJSONFields_6 instanceof net.minidev.json.JSONArray) {
							resultset_tExtractJSONFields_6 = (net.minidev.json.JSONArray) result_tExtractJSONFields_6;
						} else {
							resultset_tExtractJSONFields_6.add(result_tExtractJSONFields_6);
						}

						isStructError_tExtractJSONFields_6 = false;
					} catch (java.lang.Exception ex_tExtractJSONFields_6) {
						globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE", ex_tExtractJSONFields_6.getMessage());
						System.err.println(ex_tExtractJSONFields_6.getMessage());
					}

					String jsonPath_tExtractJSONFields_6 = null;
					com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_6 = null;

					Object value_tExtractJSONFields_6 = null;

					Object root_tExtractJSONFields_6 = null;
					for (int i_tExtractJSONFields_6 = 0; isStructError_tExtractJSONFields_6
							|| (i_tExtractJSONFields_6 < resultset_tExtractJSONFields_6
									.size()); i_tExtractJSONFields_6++) {
						if (!isStructError_tExtractJSONFields_6) {
							Object row_tExtractJSONFields_6 = resultset_tExtractJSONFields_6
									.get(i_tExtractJSONFields_6);
							row20 = null;
							row20 = new row20Struct();
							nb_line_tExtractJSONFields_6++;
							try {
								jsonPath_tExtractJSONFields_6 = "$.flight.identification.row";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.flight_row_id = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_6.toString());
									} else {
										row20.flight_row_id =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.flight_row_id =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.identification.number.default";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.flight_number = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.flight_number =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.identification.number.alternative";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.flight_alternative = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.flight_alternative =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.status.text";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.status_text = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.status_text =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.status.live";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.status_live = ParserUtils
												.parseTo_Boolean(value_tExtractJSONFields_6.toString());
									} else {
										row20.status_live =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.status_live =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.status.generic.status.color";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.status_color = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.status_color =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.aircraft.model.code";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.aircraft_code = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.aircraft_code =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.aircraft.model.text";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.aircraft_text = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.aircraft_text =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.aircraft.hex";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.aircraft_hex = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.aircraft_hex =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.aircraft.registration";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.aircraft_registration = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.aircraft_registration =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airline.name";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.airline_name = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.airline_name =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airline.code.iata";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.airline_iata = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.airline_iata =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airline.code.icao";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.airline_icao = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.airline_icao =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airline.short";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.airline_short = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.airline_short =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.code.iata";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.origin_iata = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_iata =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.code.icao";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.origin_icao = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_icao =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.name";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.origin_name = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_name =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.position.latitude";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.origin_latitude = ParserUtils
												.parseTo_BigDecimal(value_tExtractJSONFields_6.toString());
									} else {
										row20.origin_latitude =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_latitude =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.position.longitude";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.origin_longitude = ParserUtils
												.parseTo_BigDecimal(value_tExtractJSONFields_6.toString());
									} else {
										row20.origin_longitude =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_longitude =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.position.country.name";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.origin_country = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_country =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.position.country.code";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.origin_country_code = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_country_code =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.position.region.city";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.origin_city = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_city =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.timezone.name";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									row20.origin_timezone = value_tExtractJSONFields_6 == null ?

											null

											: value_tExtractJSONFields_6.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_timezone =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.origin.timezone.offset";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.origin_timezone_offset = ParserUtils
												.parseTo_Integer(value_tExtractJSONFields_6.toString());
									} else {
										row20.origin_timezone_offset =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.origin_timezone_offset =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.time.scheduled.departure";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.scheduled_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_6.toString());
									} else {
										row20.scheduled_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.scheduled_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.time.scheduled.arrival";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.scheduled_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_6.toString());
									} else {
										row20.scheduled_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.scheduled_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.time.real.departure";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.real_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_6.toString());
									} else {
										row20.real_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.real_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.time.real.arrival";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.real_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_6.toString());
									} else {
										row20.real_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.real_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.time.estimated.departure";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.estimated_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_6.toString());
									} else {
										row20.estimated_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.estimated_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.time.estimated.arrival";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.estimated_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_6.toString());
									} else {
										row20.estimated_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.estimated_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_6 = "$.flight.airport.destination.visible";
								compiledJsonPath_tExtractJSONFields_6 = jsonPathCache_tExtractJSONFields_6
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_6);

								try {

									value_tExtractJSONFields_6 = compiledJsonPath_tExtractJSONFields_6
											.read(row_tExtractJSONFields_6);

									if (value_tExtractJSONFields_6 != null
											&& !value_tExtractJSONFields_6.toString().isEmpty()) {
										row20.destination_visible = ParserUtils
												.parseTo_Boolean(value_tExtractJSONFields_6.toString());
									} else {
										row20.destination_visible =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_6) {
									globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
											e_tExtractJSONFields_6.getMessage());
									row20.destination_visible =

											null

									;
								}
							} catch (java.lang.Exception ex_tExtractJSONFields_6) {
								globalMap.put("tExtractJSONFields_6_ERROR_MESSAGE",
										ex_tExtractJSONFields_6.getMessage());
								System.err.println(ex_tExtractJSONFields_6.getMessage());
								row20 = null;
							}

						}

						isStructError_tExtractJSONFields_6 = false;

//}

						tos_count_tExtractJSONFields_6++;

						/**
						 * [tExtractJSONFields_6 main ] stop
						 */

						/**
						 * [tExtractJSONFields_6 process_data_begin ] start
						 */

						currentComponent = "tExtractJSONFields_6";

						/**
						 * [tExtractJSONFields_6 process_data_begin ] stop
						 */
// Start of branch "row20"
						if (row20 != null) {

							/**
							 * [tUniqRow_6 main ] start
							 */

							currentComponent = "tUniqRow_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row20"

								);
							}

							row21 = null;
							finder_tUniqRow_6.flight_row_id = row20.flight_row_id;
							finder_tUniqRow_6.hashCodeDirty = true;
							if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
								KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

								new_tUniqRow_6.flight_row_id = row20.flight_row_id;

								keystUniqRow_6.add(new_tUniqRow_6);
								if (row21 == null) {

									row21 = new row21Struct();
								}
								row21.flight_row_id = row20.flight_row_id;
								row21.flight_number = row20.flight_number;
								row21.flight_alternative = row20.flight_alternative;
								row21.status_text = row20.status_text;
								row21.status_live = row20.status_live;
								row21.status_color = row20.status_color;
								row21.aircraft_code = row20.aircraft_code;
								row21.aircraft_text = row20.aircraft_text;
								row21.aircraft_hex = row20.aircraft_hex;
								row21.aircraft_registration = row20.aircraft_registration;
								row21.airline_name = row20.airline_name;
								row21.airline_iata = row20.airline_iata;
								row21.airline_icao = row20.airline_icao;
								row21.airline_short = row20.airline_short;
								row21.origin_iata = row20.origin_iata;
								row21.origin_icao = row20.origin_icao;
								row21.origin_name = row20.origin_name;
								row21.origin_latitude = row20.origin_latitude;
								row21.origin_longitude = row20.origin_longitude;
								row21.origin_country = row20.origin_country;
								row21.origin_country_code = row20.origin_country_code;
								row21.origin_city = row20.origin_city;
								row21.origin_timezone = row20.origin_timezone;
								row21.origin_timezone_offset = row20.origin_timezone_offset;
								row21.scheduled_departure = row20.scheduled_departure;
								row21.scheduled_arrival = row20.scheduled_arrival;
								row21.real_departure = row20.real_departure;
								row21.real_arrival = row20.real_arrival;
								row21.estimated_departure = row20.estimated_departure;
								row21.estimated_arrival = row20.estimated_arrival;
								row21.destination_visible = row20.destination_visible;
								nb_uniques_tUniqRow_6++;
							} else {
								nb_duplicates_tUniqRow_6++;
							}

							tos_count_tUniqRow_6++;

							/**
							 * [tUniqRow_6 main ] stop
							 */

							/**
							 * [tUniqRow_6 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_6";

							/**
							 * [tUniqRow_6 process_data_begin ] stop
							 */
// Start of branch "row21"
							if (row21 != null) {

								/**
								 * [tMap_6 main ] start
								 */

								currentComponent = "tMap_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row21"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_6 = false;
								boolean mainRowRejected_tMap_6 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
									// ###############################
									// # Output tables

									copyOfarrivals = null;

// # Output table : 'copyOfarrivals'
									copyOfarrivals_tmp.flight_number = row21.flight_number;
									copyOfarrivals_tmp.flight_alternative = row21.flight_alternative;
									copyOfarrivals_tmp.status_text = row21.status_text;
									copyOfarrivals_tmp.status_live = row21.status_live;
									copyOfarrivals_tmp.status_color = row21.status_color;
									copyOfarrivals_tmp.aircraft_code = row21.aircraft_code;
									copyOfarrivals_tmp.aircraft_text = row21.aircraft_text;
									copyOfarrivals_tmp.aircraft_hex = row21.aircraft_hex;
									copyOfarrivals_tmp.aircraft_registration = row21.aircraft_registration;
									copyOfarrivals_tmp.airline_name = row21.airline_name;
									copyOfarrivals_tmp.airline_iata = row21.airline_iata;
									copyOfarrivals_tmp.airline_icao = row21.airline_icao;
									copyOfarrivals_tmp.airline_short = row21.airline_short;
									copyOfarrivals_tmp.origin_iata = row21.origin_iata;
									copyOfarrivals_tmp.origin_icao = row21.origin_icao;
									copyOfarrivals_tmp.origin_name = row21.origin_name;
									copyOfarrivals_tmp.origin_latitude = row21.origin_latitude;
									copyOfarrivals_tmp.origin_longitude = row21.origin_longitude;
									copyOfarrivals_tmp.origin_country = row21.origin_country;
									copyOfarrivals_tmp.origin_country_code = row21.origin_country_code;
									copyOfarrivals_tmp.origin_city = row21.origin_city;
									copyOfarrivals_tmp.origin_timezone = row21.origin_timezone;
									copyOfarrivals_tmp.origin_timezone_offset = row21.origin_timezone_offset;
									copyOfarrivals_tmp.origin_avg_rating = null;
									copyOfarrivals_tmp.origin_total_ratings = null;
									copyOfarrivals_tmp.origin_reviews_count = null;
									copyOfarrivals_tmp.origin_evaluation_score = null;
									copyOfarrivals_tmp.origin_arrivals_delay_index = null;
									copyOfarrivals_tmp.origin_arrivals_delay_avg = null;
									copyOfarrivals_tmp.origin_departures_delay_index = null;
									copyOfarrivals_tmp.origin_departures_delay_avg = null;
									copyOfarrivals_tmp.origin_arrivals_today_pct_delayed = null;
									copyOfarrivals_tmp.origin_departures_today_pct_delayed = null;
									copyOfarrivals_tmp.origin_arrivals_today_pct_canceled = null;
									copyOfarrivals_tmp.origin_departures_today_pct_canceled = null;
									copyOfarrivals_tmp.destination_iata = (String) globalMap.get("iata_code");
									copyOfarrivals_tmp.destination_icao = (String) globalMap.get("icao_code");
									copyOfarrivals_tmp.destination_name = (String) globalMap.get("country_name");
									copyOfarrivals_tmp.destination_latitude = (BigDecimal) globalMap.get("latitude");
									copyOfarrivals_tmp.destination_longitude = (BigDecimal) globalMap.get("longitude");
									copyOfarrivals_tmp.destination_country = (String) globalMap.get("country_name");
									copyOfarrivals_tmp.destination_country_code = (String) globalMap
											.get("country_code");
									copyOfarrivals_tmp.destination_city = (String) globalMap.get("city");
									copyOfarrivals_tmp.destination_timezone = (String) globalMap.get("timezone_name");
									copyOfarrivals_tmp.destination_timezone_offset = (Integer) globalMap
											.get("timezone_offset");
									copyOfarrivals_tmp.destination_visible = (Boolean) globalMap.get("is_visible");
									copyOfarrivals_tmp.destination_avg_rating = (BigDecimal) globalMap
											.get("avg_rating");
									copyOfarrivals_tmp.destination_total_ratings = (Integer) globalMap
											.get("total_ratings");
									copyOfarrivals_tmp.destination_reviews_count = (Integer) globalMap
											.get("reviews_count");
									copyOfarrivals_tmp.destination_evaluation_score = (Integer) globalMap
											.get("evaluation_score");
									copyOfarrivals_tmp.destination_arrivals_delay_index = (BigDecimal) globalMap
											.get("arrivals_delay_index");
									copyOfarrivals_tmp.destination_arrivals_delay_avg = (Integer) globalMap
											.get("arrivals_delay_avg");
									copyOfarrivals_tmp.destination_departures_delay_index = (BigDecimal) globalMap
											.get("departures_delay_index");
									copyOfarrivals_tmp.destination_departures_delay_avg = (Integer) globalMap
											.get("departures_delay_avg");
									copyOfarrivals_tmp.destination_arrivals_today_pct_delayed = (BigDecimal) globalMap
											.get("arrivals_today_pct_delayed");
									copyOfarrivals_tmp.destination_departures_today_pct_delayed = (BigDecimal) globalMap
											.get("departures_today_pct_delayed");
									copyOfarrivals_tmp.destination_arrivals_today_pct_canceled = (BigDecimal) globalMap
											.get("arrivals_today_pct_canceled");
									copyOfarrivals_tmp.destination_departures_today_pct_canceled = (BigDecimal) globalMap
											.get("departures_today_pct_canceled");
									copyOfarrivals_tmp.scheduled_departure = row21.scheduled_departure;
									copyOfarrivals_tmp.scheduled_arrival = row21.scheduled_arrival;
									copyOfarrivals_tmp.real_departure = row21.real_departure;
									copyOfarrivals_tmp.real_arrival = row21.real_arrival;
									copyOfarrivals_tmp.estimated_departure = row21.estimated_departure;
									copyOfarrivals_tmp.estimated_arrival = row21.estimated_arrival;
									copyOfarrivals_tmp.type = "Arrival";
									copyOfarrivals = copyOfarrivals_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6 = false;

								tos_count_tMap_6++;

								/**
								 * [tMap_6 main ] stop
								 */

								/**
								 * [tMap_6 process_data_begin ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_begin ] stop
								 */
// Start of branch "copyOfarrivals"
								if (copyOfarrivals != null) {

									/**
									 * [tDBOutput_4 main ] start
									 */

									currentComponent = "tDBOutput_4";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "copyOfarrivals"

										);
									}

									whetherReject_tDBOutput_4 = false;
									if (copyOfarrivals.flight_number == null) {
										pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_4.setString(1, copyOfarrivals.flight_number);
									}

									int checkCount_tDBOutput_4 = -1;
									try (java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery()) {
										while (rs_tDBOutput_4.next()) {
											checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
										}
									}
									if (checkCount_tDBOutput_4 > 0) {
										if (copyOfarrivals.flight_alternative == null) {
											pstmtUpdate_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(1, copyOfarrivals.flight_alternative);
										}

										if (copyOfarrivals.status_text == null) {
											pstmtUpdate_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(2, copyOfarrivals.status_text);
										}

										if (copyOfarrivals.status_live == null) {
											pstmtUpdate_tDBOutput_4.setNull(3, java.sql.Types.BOOLEAN);
										} else {
											pstmtUpdate_tDBOutput_4.setBoolean(3, copyOfarrivals.status_live);
										}

										if (copyOfarrivals.status_color == null) {
											pstmtUpdate_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(4, copyOfarrivals.status_color);
										}

										if (copyOfarrivals.aircraft_code == null) {
											pstmtUpdate_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(5, copyOfarrivals.aircraft_code);
										}

										if (copyOfarrivals.aircraft_text == null) {
											pstmtUpdate_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(6, copyOfarrivals.aircraft_text);
										}

										if (copyOfarrivals.aircraft_hex == null) {
											pstmtUpdate_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(7, copyOfarrivals.aircraft_hex);
										}

										if (copyOfarrivals.aircraft_registration == null) {
											pstmtUpdate_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(8, copyOfarrivals.aircraft_registration);
										}

										if (copyOfarrivals.airline_name == null) {
											pstmtUpdate_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(9, copyOfarrivals.airline_name);
										}

										if (copyOfarrivals.airline_iata == null) {
											pstmtUpdate_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(10, copyOfarrivals.airline_iata);
										}

										if (copyOfarrivals.airline_icao == null) {
											pstmtUpdate_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(11, copyOfarrivals.airline_icao);
										}

										if (copyOfarrivals.airline_short == null) {
											pstmtUpdate_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(12, copyOfarrivals.airline_short);
										}

										if (copyOfarrivals.origin_iata == null) {
											pstmtUpdate_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(13, copyOfarrivals.origin_iata);
										}

										if (copyOfarrivals.origin_icao == null) {
											pstmtUpdate_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(14, copyOfarrivals.origin_icao);
										}

										if (copyOfarrivals.origin_name == null) {
											pstmtUpdate_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(15, copyOfarrivals.origin_name);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(16, copyOfarrivals.origin_latitude);

										pstmtUpdate_tDBOutput_4.setBigDecimal(17, copyOfarrivals.origin_longitude);

										if (copyOfarrivals.origin_country == null) {
											pstmtUpdate_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(18, copyOfarrivals.origin_country);
										}

										if (copyOfarrivals.origin_country_code == null) {
											pstmtUpdate_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(19, copyOfarrivals.origin_country_code);
										}

										if (copyOfarrivals.origin_city == null) {
											pstmtUpdate_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(20, copyOfarrivals.origin_city);
										}

										if (copyOfarrivals.origin_timezone == null) {
											pstmtUpdate_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(21, copyOfarrivals.origin_timezone);
										}

										if (copyOfarrivals.origin_timezone_offset == null) {
											pstmtUpdate_tDBOutput_4.setNull(22, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(22, copyOfarrivals.origin_timezone_offset);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(23, copyOfarrivals.origin_avg_rating);

										if (copyOfarrivals.origin_total_ratings == null) {
											pstmtUpdate_tDBOutput_4.setNull(24, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(24, copyOfarrivals.origin_total_ratings);
										}

										if (copyOfarrivals.origin_reviews_count == null) {
											pstmtUpdate_tDBOutput_4.setNull(25, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(25, copyOfarrivals.origin_reviews_count);
										}

										if (copyOfarrivals.origin_evaluation_score == null) {
											pstmtUpdate_tDBOutput_4.setNull(26, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(26, copyOfarrivals.origin_evaluation_score);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(27,
												copyOfarrivals.origin_arrivals_delay_index);

										if (copyOfarrivals.origin_arrivals_delay_avg == null) {
											pstmtUpdate_tDBOutput_4.setNull(28, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(28,
													copyOfarrivals.origin_arrivals_delay_avg);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(29,
												copyOfarrivals.origin_departures_delay_index);

										if (copyOfarrivals.origin_departures_delay_avg == null) {
											pstmtUpdate_tDBOutput_4.setNull(30, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(30,
													copyOfarrivals.origin_departures_delay_avg);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(31,
												copyOfarrivals.origin_arrivals_today_pct_delayed);

										pstmtUpdate_tDBOutput_4.setBigDecimal(32,
												copyOfarrivals.origin_departures_today_pct_delayed);

										pstmtUpdate_tDBOutput_4.setBigDecimal(33,
												copyOfarrivals.origin_arrivals_today_pct_canceled);

										pstmtUpdate_tDBOutput_4.setBigDecimal(34,
												copyOfarrivals.origin_departures_today_pct_canceled);

										if (copyOfarrivals.destination_iata == null) {
											pstmtUpdate_tDBOutput_4.setNull(35, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(35, copyOfarrivals.destination_iata);
										}

										if (copyOfarrivals.destination_icao == null) {
											pstmtUpdate_tDBOutput_4.setNull(36, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(36, copyOfarrivals.destination_icao);
										}

										if (copyOfarrivals.destination_name == null) {
											pstmtUpdate_tDBOutput_4.setNull(37, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(37, copyOfarrivals.destination_name);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(38, copyOfarrivals.destination_latitude);

										pstmtUpdate_tDBOutput_4.setBigDecimal(39, copyOfarrivals.destination_longitude);

										if (copyOfarrivals.destination_country == null) {
											pstmtUpdate_tDBOutput_4.setNull(40, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(40, copyOfarrivals.destination_country);
										}

										if (copyOfarrivals.destination_country_code == null) {
											pstmtUpdate_tDBOutput_4.setNull(41, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(41,
													copyOfarrivals.destination_country_code);
										}

										if (copyOfarrivals.destination_city == null) {
											pstmtUpdate_tDBOutput_4.setNull(42, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(42, copyOfarrivals.destination_city);
										}

										if (copyOfarrivals.destination_timezone == null) {
											pstmtUpdate_tDBOutput_4.setNull(43, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(43, copyOfarrivals.destination_timezone);
										}

										if (copyOfarrivals.destination_timezone_offset == null) {
											pstmtUpdate_tDBOutput_4.setNull(44, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(44,
													copyOfarrivals.destination_timezone_offset);
										}

										if (copyOfarrivals.destination_visible == null) {
											pstmtUpdate_tDBOutput_4.setNull(45, java.sql.Types.BOOLEAN);
										} else {
											pstmtUpdate_tDBOutput_4.setBoolean(45, copyOfarrivals.destination_visible);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(46,
												copyOfarrivals.destination_avg_rating);

										if (copyOfarrivals.destination_total_ratings == null) {
											pstmtUpdate_tDBOutput_4.setNull(47, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(47,
													copyOfarrivals.destination_total_ratings);
										}

										if (copyOfarrivals.destination_reviews_count == null) {
											pstmtUpdate_tDBOutput_4.setNull(48, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(48,
													copyOfarrivals.destination_reviews_count);
										}

										if (copyOfarrivals.destination_evaluation_score == null) {
											pstmtUpdate_tDBOutput_4.setNull(49, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(49,
													copyOfarrivals.destination_evaluation_score);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(50,
												copyOfarrivals.destination_arrivals_delay_index);

										if (copyOfarrivals.destination_arrivals_delay_avg == null) {
											pstmtUpdate_tDBOutput_4.setNull(51, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(51,
													copyOfarrivals.destination_arrivals_delay_avg);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(52,
												copyOfarrivals.destination_departures_delay_index);

										if (copyOfarrivals.destination_departures_delay_avg == null) {
											pstmtUpdate_tDBOutput_4.setNull(53, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setInt(53,
													copyOfarrivals.destination_departures_delay_avg);
										}

										pstmtUpdate_tDBOutput_4.setBigDecimal(54,
												copyOfarrivals.destination_arrivals_today_pct_delayed);

										pstmtUpdate_tDBOutput_4.setBigDecimal(55,
												copyOfarrivals.destination_departures_today_pct_delayed);

										pstmtUpdate_tDBOutput_4.setBigDecimal(56,
												copyOfarrivals.destination_arrivals_today_pct_canceled);

										pstmtUpdate_tDBOutput_4.setBigDecimal(57,
												copyOfarrivals.destination_departures_today_pct_canceled);

										if (copyOfarrivals.scheduled_departure == null) {
											pstmtUpdate_tDBOutput_4.setNull(58, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setLong(58, copyOfarrivals.scheduled_departure);
										}

										if (copyOfarrivals.scheduled_arrival == null) {
											pstmtUpdate_tDBOutput_4.setNull(59, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setLong(59, copyOfarrivals.scheduled_arrival);
										}

										if (copyOfarrivals.real_departure == null) {
											pstmtUpdate_tDBOutput_4.setNull(60, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setLong(60, copyOfarrivals.real_departure);
										}

										if (copyOfarrivals.real_arrival == null) {
											pstmtUpdate_tDBOutput_4.setNull(61, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setLong(61, copyOfarrivals.real_arrival);
										}

										if (copyOfarrivals.estimated_departure == null) {
											pstmtUpdate_tDBOutput_4.setNull(62, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setLong(62, copyOfarrivals.estimated_departure);
										}

										if (copyOfarrivals.estimated_arrival == null) {
											pstmtUpdate_tDBOutput_4.setNull(63, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_4.setLong(63, copyOfarrivals.estimated_arrival);
										}

										if (copyOfarrivals.type == null) {
											pstmtUpdate_tDBOutput_4.setNull(64, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(64, copyOfarrivals.type);
										}

										if (copyOfarrivals.flight_number == null) {
											pstmtUpdate_tDBOutput_4.setNull(65 + count_tDBOutput_4,
													java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_4.setString(65 + count_tDBOutput_4,
													copyOfarrivals.flight_number);
										}

										try {
											int processedCount_tDBOutput_4 = pstmtUpdate_tDBOutput_4.executeUpdate();
											updatedCount_tDBOutput_4 += processedCount_tDBOutput_4;
											rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
											nb_line_tDBOutput_4++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_4 = true;
											nb_line_tDBOutput_4++;
											System.err.print(e.getMessage());
										}
									} else {
										if (copyOfarrivals.flight_number == null) {
											pstmtInsert_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(1, copyOfarrivals.flight_number);
										}

										if (copyOfarrivals.flight_alternative == null) {
											pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(2, copyOfarrivals.flight_alternative);
										}

										if (copyOfarrivals.status_text == null) {
											pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(3, copyOfarrivals.status_text);
										}

										if (copyOfarrivals.status_live == null) {
											pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.BOOLEAN);
										} else {
											pstmtInsert_tDBOutput_4.setBoolean(4, copyOfarrivals.status_live);
										}

										if (copyOfarrivals.status_color == null) {
											pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(5, copyOfarrivals.status_color);
										}

										if (copyOfarrivals.aircraft_code == null) {
											pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(6, copyOfarrivals.aircraft_code);
										}

										if (copyOfarrivals.aircraft_text == null) {
											pstmtInsert_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(7, copyOfarrivals.aircraft_text);
										}

										if (copyOfarrivals.aircraft_hex == null) {
											pstmtInsert_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(8, copyOfarrivals.aircraft_hex);
										}

										if (copyOfarrivals.aircraft_registration == null) {
											pstmtInsert_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(9, copyOfarrivals.aircraft_registration);
										}

										if (copyOfarrivals.airline_name == null) {
											pstmtInsert_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(10, copyOfarrivals.airline_name);
										}

										if (copyOfarrivals.airline_iata == null) {
											pstmtInsert_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(11, copyOfarrivals.airline_iata);
										}

										if (copyOfarrivals.airline_icao == null) {
											pstmtInsert_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(12, copyOfarrivals.airline_icao);
										}

										if (copyOfarrivals.airline_short == null) {
											pstmtInsert_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(13, copyOfarrivals.airline_short);
										}

										if (copyOfarrivals.origin_iata == null) {
											pstmtInsert_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(14, copyOfarrivals.origin_iata);
										}

										if (copyOfarrivals.origin_icao == null) {
											pstmtInsert_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(15, copyOfarrivals.origin_icao);
										}

										if (copyOfarrivals.origin_name == null) {
											pstmtInsert_tDBOutput_4.setNull(16, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(16, copyOfarrivals.origin_name);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(17, copyOfarrivals.origin_latitude);

										pstmtInsert_tDBOutput_4.setBigDecimal(18, copyOfarrivals.origin_longitude);

										if (copyOfarrivals.origin_country == null) {
											pstmtInsert_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(19, copyOfarrivals.origin_country);
										}

										if (copyOfarrivals.origin_country_code == null) {
											pstmtInsert_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(20, copyOfarrivals.origin_country_code);
										}

										if (copyOfarrivals.origin_city == null) {
											pstmtInsert_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(21, copyOfarrivals.origin_city);
										}

										if (copyOfarrivals.origin_timezone == null) {
											pstmtInsert_tDBOutput_4.setNull(22, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(22, copyOfarrivals.origin_timezone);
										}

										if (copyOfarrivals.origin_timezone_offset == null) {
											pstmtInsert_tDBOutput_4.setNull(23, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(23, copyOfarrivals.origin_timezone_offset);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(24, copyOfarrivals.origin_avg_rating);

										if (copyOfarrivals.origin_total_ratings == null) {
											pstmtInsert_tDBOutput_4.setNull(25, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(25, copyOfarrivals.origin_total_ratings);
										}

										if (copyOfarrivals.origin_reviews_count == null) {
											pstmtInsert_tDBOutput_4.setNull(26, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(26, copyOfarrivals.origin_reviews_count);
										}

										if (copyOfarrivals.origin_evaluation_score == null) {
											pstmtInsert_tDBOutput_4.setNull(27, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(27, copyOfarrivals.origin_evaluation_score);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(28,
												copyOfarrivals.origin_arrivals_delay_index);

										if (copyOfarrivals.origin_arrivals_delay_avg == null) {
											pstmtInsert_tDBOutput_4.setNull(29, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(29,
													copyOfarrivals.origin_arrivals_delay_avg);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(30,
												copyOfarrivals.origin_departures_delay_index);

										if (copyOfarrivals.origin_departures_delay_avg == null) {
											pstmtInsert_tDBOutput_4.setNull(31, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(31,
													copyOfarrivals.origin_departures_delay_avg);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(32,
												copyOfarrivals.origin_arrivals_today_pct_delayed);

										pstmtInsert_tDBOutput_4.setBigDecimal(33,
												copyOfarrivals.origin_departures_today_pct_delayed);

										pstmtInsert_tDBOutput_4.setBigDecimal(34,
												copyOfarrivals.origin_arrivals_today_pct_canceled);

										pstmtInsert_tDBOutput_4.setBigDecimal(35,
												copyOfarrivals.origin_departures_today_pct_canceled);

										if (copyOfarrivals.destination_iata == null) {
											pstmtInsert_tDBOutput_4.setNull(36, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(36, copyOfarrivals.destination_iata);
										}

										if (copyOfarrivals.destination_icao == null) {
											pstmtInsert_tDBOutput_4.setNull(37, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(37, copyOfarrivals.destination_icao);
										}

										if (copyOfarrivals.destination_name == null) {
											pstmtInsert_tDBOutput_4.setNull(38, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(38, copyOfarrivals.destination_name);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(39, copyOfarrivals.destination_latitude);

										pstmtInsert_tDBOutput_4.setBigDecimal(40, copyOfarrivals.destination_longitude);

										if (copyOfarrivals.destination_country == null) {
											pstmtInsert_tDBOutput_4.setNull(41, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(41, copyOfarrivals.destination_country);
										}

										if (copyOfarrivals.destination_country_code == null) {
											pstmtInsert_tDBOutput_4.setNull(42, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(42,
													copyOfarrivals.destination_country_code);
										}

										if (copyOfarrivals.destination_city == null) {
											pstmtInsert_tDBOutput_4.setNull(43, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(43, copyOfarrivals.destination_city);
										}

										if (copyOfarrivals.destination_timezone == null) {
											pstmtInsert_tDBOutput_4.setNull(44, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(44, copyOfarrivals.destination_timezone);
										}

										if (copyOfarrivals.destination_timezone_offset == null) {
											pstmtInsert_tDBOutput_4.setNull(45, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(45,
													copyOfarrivals.destination_timezone_offset);
										}

										if (copyOfarrivals.destination_visible == null) {
											pstmtInsert_tDBOutput_4.setNull(46, java.sql.Types.BOOLEAN);
										} else {
											pstmtInsert_tDBOutput_4.setBoolean(46, copyOfarrivals.destination_visible);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(47,
												copyOfarrivals.destination_avg_rating);

										if (copyOfarrivals.destination_total_ratings == null) {
											pstmtInsert_tDBOutput_4.setNull(48, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(48,
													copyOfarrivals.destination_total_ratings);
										}

										if (copyOfarrivals.destination_reviews_count == null) {
											pstmtInsert_tDBOutput_4.setNull(49, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(49,
													copyOfarrivals.destination_reviews_count);
										}

										if (copyOfarrivals.destination_evaluation_score == null) {
											pstmtInsert_tDBOutput_4.setNull(50, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(50,
													copyOfarrivals.destination_evaluation_score);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(51,
												copyOfarrivals.destination_arrivals_delay_index);

										if (copyOfarrivals.destination_arrivals_delay_avg == null) {
											pstmtInsert_tDBOutput_4.setNull(52, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(52,
													copyOfarrivals.destination_arrivals_delay_avg);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(53,
												copyOfarrivals.destination_departures_delay_index);

										if (copyOfarrivals.destination_departures_delay_avg == null) {
											pstmtInsert_tDBOutput_4.setNull(54, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setInt(54,
													copyOfarrivals.destination_departures_delay_avg);
										}

										pstmtInsert_tDBOutput_4.setBigDecimal(55,
												copyOfarrivals.destination_arrivals_today_pct_delayed);

										pstmtInsert_tDBOutput_4.setBigDecimal(56,
												copyOfarrivals.destination_departures_today_pct_delayed);

										pstmtInsert_tDBOutput_4.setBigDecimal(57,
												copyOfarrivals.destination_arrivals_today_pct_canceled);

										pstmtInsert_tDBOutput_4.setBigDecimal(58,
												copyOfarrivals.destination_departures_today_pct_canceled);

										if (copyOfarrivals.scheduled_departure == null) {
											pstmtInsert_tDBOutput_4.setNull(59, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setLong(59, copyOfarrivals.scheduled_departure);
										}

										if (copyOfarrivals.scheduled_arrival == null) {
											pstmtInsert_tDBOutput_4.setNull(60, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setLong(60, copyOfarrivals.scheduled_arrival);
										}

										if (copyOfarrivals.real_departure == null) {
											pstmtInsert_tDBOutput_4.setNull(61, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setLong(61, copyOfarrivals.real_departure);
										}

										if (copyOfarrivals.real_arrival == null) {
											pstmtInsert_tDBOutput_4.setNull(62, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setLong(62, copyOfarrivals.real_arrival);
										}

										if (copyOfarrivals.estimated_departure == null) {
											pstmtInsert_tDBOutput_4.setNull(63, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setLong(63, copyOfarrivals.estimated_departure);
										}

										if (copyOfarrivals.estimated_arrival == null) {
											pstmtInsert_tDBOutput_4.setNull(64, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_4.setLong(64, copyOfarrivals.estimated_arrival);
										}

										if (copyOfarrivals.type == null) {
											pstmtInsert_tDBOutput_4.setNull(65, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_4.setString(65, copyOfarrivals.type);
										}

										try {
											int processedCount_tDBOutput_4 = pstmtInsert_tDBOutput_4.executeUpdate();
											insertedCount_tDBOutput_4 += processedCount_tDBOutput_4;
											rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
											nb_line_tDBOutput_4++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_4_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_4 = true;
											nb_line_tDBOutput_4++;
											System.err.print(e.getMessage());
										}
									}
									if (!whetherReject_tDBOutput_4) {
									}
									commitCounter_tDBOutput_4++;

									if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

										if (rowsToCommitCount_tDBOutput_4 != 0) {
										}
										conn_tDBOutput_4.commit();
										if (rowsToCommitCount_tDBOutput_4 != 0) {
											rowsToCommitCount_tDBOutput_4 = 0;
										}
										commitCounter_tDBOutput_4 = 0;

									}

									tos_count_tDBOutput_4++;

									/**
									 * [tDBOutput_4 main ] stop
									 */

									/**
									 * [tDBOutput_4 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_4";

									/**
									 * [tDBOutput_4 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_4 process_data_end ] start
									 */

									currentComponent = "tDBOutput_4";

									/**
									 * [tDBOutput_4 process_data_end ] stop
									 */

								} // End of branch "copyOfarrivals"

								/**
								 * [tMap_6 process_data_end ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_end ] stop
								 */

							} // End of branch "row21"

							/**
							 * [tUniqRow_6 process_data_end ] start
							 */

							currentComponent = "tUniqRow_6";

							/**
							 * [tUniqRow_6 process_data_end ] stop
							 */

						} // End of branch "row20"

						// end for
					}

				} // C_01

				/**
				 * [tExtractJSONFields_6 process_data_end ] start
				 */

				currentComponent = "tExtractJSONFields_6";

				/**
				 * [tExtractJSONFields_6 process_data_end ] stop
				 */

				/**
				 * [tREST_4 process_data_end ] start
				 */

				currentComponent = "tREST_4";

				/**
				 * [tREST_4 process_data_end ] stop
				 */

				/**
				 * [tREST_4 end ] start
				 */

				currentComponent = "tREST_4";

				ok_Hash.put("tREST_4", true);
				end_Hash.put("tREST_4", System.currentTimeMillis());

				/**
				 * [tREST_4 end ] stop
				 */

				/**
				 * [tExtractJSONFields_6 end ] start
				 */

				currentComponent = "tExtractJSONFields_6";

				globalMap.put("tExtractJSONFields_2_NB_LINE", nb_line_tExtractJSONFields_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tExtractJSONFields_6", true);
				end_Hash.put("tExtractJSONFields_6", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_6 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES", nb_duplicates_tUniqRow_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				if (pstmtUpdate_tDBOutput_4 != null) {
					pstmtUpdate_tDBOutput_4.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_4");
				}
				if (pstmtInsert_tDBOutput_4 != null) {
					pstmtInsert_tDBOutput_4.close();
					resourceMap.remove("pstmtInsert_tDBOutput_4");
				}
				if (pstmt_tDBOutput_4 != null) {
					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				if (commitCounter_tDBOutput_4 > 0 && rowsToCommitCount_tDBOutput_4 != 0) {

				}
				conn_tDBOutput_4.commit();
				if (commitCounter_tDBOutput_4 > 0 && rowsToCommitCount_tDBOutput_4 != 0) {

					rowsToCommitCount_tDBOutput_4 = 0;
				}
				commitCounter_tDBOutput_4 = 0;

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfarrivals");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tREST_5Process(globalMap);

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_4 finally ] start
				 */

				currentComponent = "tREST_4";

				/**
				 * [tREST_4 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_6 finally ] start
				 */

				currentComponent = "tExtractJSONFields_6";

				/**
				 * [tExtractJSONFields_6 finally ] stop
				 */

				/**
				 * [tUniqRow_6 finally ] start
				 */

				currentComponent = "tUniqRow_6";

				/**
				 * [tUniqRow_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_4 = null;
						if ((pstmtUpdateToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_4")) != null) {
							pstmtUpdateToClose_tDBOutput_4.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_4 = null;
						if ((pstmtInsertToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_4")) != null) {
							pstmtInsertToClose_tDBOutput_4.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_4_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfdeparturesStruct
			implements routines.system.IPersistableRow<copyOfcopyOfdeparturesStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public BigDecimal origin_avg_rating;

		public BigDecimal getOrigin_avg_rating() {
			return this.origin_avg_rating;
		}

		public Integer origin_total_ratings;

		public Integer getOrigin_total_ratings() {
			return this.origin_total_ratings;
		}

		public Integer origin_reviews_count;

		public Integer getOrigin_reviews_count() {
			return this.origin_reviews_count;
		}

		public Integer origin_evaluation_score;

		public Integer getOrigin_evaluation_score() {
			return this.origin_evaluation_score;
		}

		public BigDecimal origin_arrivals_delay_index;

		public BigDecimal getOrigin_arrivals_delay_index() {
			return this.origin_arrivals_delay_index;
		}

		public Integer origin_arrivals_delay_avg;

		public Integer getOrigin_arrivals_delay_avg() {
			return this.origin_arrivals_delay_avg;
		}

		public BigDecimal origin_departures_delay_index;

		public BigDecimal getOrigin_departures_delay_index() {
			return this.origin_departures_delay_index;
		}

		public Integer origin_departures_delay_avg;

		public Integer getOrigin_departures_delay_avg() {
			return this.origin_departures_delay_avg;
		}

		public BigDecimal origin_arrivals_today_pct_delayed;

		public BigDecimal getOrigin_arrivals_today_pct_delayed() {
			return this.origin_arrivals_today_pct_delayed;
		}

		public BigDecimal origin_departures_today_pct_delayed;

		public BigDecimal getOrigin_departures_today_pct_delayed() {
			return this.origin_departures_today_pct_delayed;
		}

		public BigDecimal origin_arrivals_today_pct_canceled;

		public BigDecimal getOrigin_arrivals_today_pct_canceled() {
			return this.origin_arrivals_today_pct_canceled;
		}

		public BigDecimal origin_departures_today_pct_canceled;

		public BigDecimal getOrigin_departures_today_pct_canceled() {
			return this.origin_departures_today_pct_canceled;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		public BigDecimal destination_avg_rating;

		public BigDecimal getDestination_avg_rating() {
			return this.destination_avg_rating;
		}

		public Integer destination_total_ratings;

		public Integer getDestination_total_ratings() {
			return this.destination_total_ratings;
		}

		public Integer destination_reviews_count;

		public Integer getDestination_reviews_count() {
			return this.destination_reviews_count;
		}

		public Integer destination_evaluation_score;

		public Integer getDestination_evaluation_score() {
			return this.destination_evaluation_score;
		}

		public BigDecimal destination_arrivals_delay_index;

		public BigDecimal getDestination_arrivals_delay_index() {
			return this.destination_arrivals_delay_index;
		}

		public Integer destination_arrivals_delay_avg;

		public Integer getDestination_arrivals_delay_avg() {
			return this.destination_arrivals_delay_avg;
		}

		public BigDecimal destination_departures_delay_index;

		public BigDecimal getDestination_departures_delay_index() {
			return this.destination_departures_delay_index;
		}

		public Integer destination_departures_delay_avg;

		public Integer getDestination_departures_delay_avg() {
			return this.destination_departures_delay_avg;
		}

		public BigDecimal destination_arrivals_today_pct_delayed;

		public BigDecimal getDestination_arrivals_today_pct_delayed() {
			return this.destination_arrivals_today_pct_delayed;
		}

		public BigDecimal destination_departures_today_pct_delayed;

		public BigDecimal getDestination_departures_today_pct_delayed() {
			return this.destination_departures_today_pct_delayed;
		}

		public BigDecimal destination_arrivals_today_pct_canceled;

		public BigDecimal getDestination_arrivals_today_pct_canceled() {
			return this.destination_arrivals_today_pct_canceled;
		}

		public BigDecimal destination_departures_today_pct_canceled;

		public BigDecimal getDestination_departures_today_pct_canceled() {
			return this.destination_departures_today_pct_canceled;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfdeparturesStruct other = (copyOfcopyOfdeparturesStruct) obj;

			if (this.flight_number == null) {
				if (other.flight_number != null)
					return false;

			} else if (!this.flight_number.equals(other.flight_number))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfdeparturesStruct other) {

			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.origin_avg_rating = this.origin_avg_rating;
			other.origin_total_ratings = this.origin_total_ratings;
			other.origin_reviews_count = this.origin_reviews_count;
			other.origin_evaluation_score = this.origin_evaluation_score;
			other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
			other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
			other.origin_departures_delay_index = this.origin_departures_delay_index;
			other.origin_departures_delay_avg = this.origin_departures_delay_avg;
			other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
			other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
			other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
			other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.destination_visible = this.destination_visible;
			other.destination_avg_rating = this.destination_avg_rating;
			other.destination_total_ratings = this.destination_total_ratings;
			other.destination_reviews_count = this.destination_reviews_count;
			other.destination_evaluation_score = this.destination_evaluation_score;
			other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
			other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
			other.destination_departures_delay_index = this.destination_departures_delay_index;
			other.destination_departures_delay_avg = this.destination_departures_delay_avg;
			other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
			other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
			other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
			other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.type = this.type;

		}

		public void copyKeysDataTo(copyOfcopyOfdeparturesStruct other) {

			other.flight_number = this.flight_number;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",origin_avg_rating=" + String.valueOf(origin_avg_rating));
			sb.append(",origin_total_ratings=" + String.valueOf(origin_total_ratings));
			sb.append(",origin_reviews_count=" + String.valueOf(origin_reviews_count));
			sb.append(",origin_evaluation_score=" + String.valueOf(origin_evaluation_score));
			sb.append(",origin_arrivals_delay_index=" + String.valueOf(origin_arrivals_delay_index));
			sb.append(",origin_arrivals_delay_avg=" + String.valueOf(origin_arrivals_delay_avg));
			sb.append(",origin_departures_delay_index=" + String.valueOf(origin_departures_delay_index));
			sb.append(",origin_departures_delay_avg=" + String.valueOf(origin_departures_delay_avg));
			sb.append(",origin_arrivals_today_pct_delayed=" + String.valueOf(origin_arrivals_today_pct_delayed));
			sb.append(",origin_departures_today_pct_delayed=" + String.valueOf(origin_departures_today_pct_delayed));
			sb.append(",origin_arrivals_today_pct_canceled=" + String.valueOf(origin_arrivals_today_pct_canceled));
			sb.append(",origin_departures_today_pct_canceled=" + String.valueOf(origin_departures_today_pct_canceled));
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append(",destination_avg_rating=" + String.valueOf(destination_avg_rating));
			sb.append(",destination_total_ratings=" + String.valueOf(destination_total_ratings));
			sb.append(",destination_reviews_count=" + String.valueOf(destination_reviews_count));
			sb.append(",destination_evaluation_score=" + String.valueOf(destination_evaluation_score));
			sb.append(",destination_arrivals_delay_index=" + String.valueOf(destination_arrivals_delay_index));
			sb.append(",destination_arrivals_delay_avg=" + String.valueOf(destination_arrivals_delay_avg));
			sb.append(",destination_departures_delay_index=" + String.valueOf(destination_departures_delay_index));
			sb.append(",destination_departures_delay_avg=" + String.valueOf(destination_departures_delay_avg));
			sb.append(",destination_arrivals_today_pct_delayed="
					+ String.valueOf(destination_arrivals_today_pct_delayed));
			sb.append(",destination_departures_today_pct_delayed="
					+ String.valueOf(destination_departures_today_pct_delayed));
			sb.append(",destination_arrivals_today_pct_canceled="
					+ String.valueOf(destination_arrivals_today_pct_canceled));
			sb.append(",destination_departures_today_pct_canceled="
					+ String.valueOf(destination_departures_today_pct_canceled));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfdeparturesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.flight_row_id == null) {
				if (other.flight_row_id != null)
					return false;

			} else if (!this.flight_row_id.equals(other.flight_row_id))

				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.flight_row_id = this.flight_row_id;
			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.destination_visible = this.destination_visible;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.flight_row_id = this.flight_row_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_row_id, other.flight_row_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String airport_name;

		public String getAirport_name() {
			return this.airport_name;
		}

		public String iata_code;

		public String getIata_code() {
			return this.iata_code;
		}

		public String icao_code;

		public String getIcao_code() {
			return this.icao_code;
		}

		public BigDecimal latitude;

		public BigDecimal getLatitude() {
			return this.latitude;
		}

		public BigDecimal longitude;

		public BigDecimal getLongitude() {
			return this.longitude;
		}

		public Integer elevation;

		public Integer getElevation() {
			return this.elevation;
		}

		public String country_name;

		public String getCountry_name() {
			return this.country_name;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String timezone_name;

		public String getTimezone_name() {
			return this.timezone_name;
		}

		public Integer timezone_offset;

		public Integer getTimezone_offset() {
			return this.timezone_offset;
		}

		public String timezone_abbr;

		public String getTimezone_abbr() {
			return this.timezone_abbr;
		}

		public Boolean is_dst;

		public Boolean getIs_dst() {
			return this.is_dst;
		}

		public String homepage_url;

		public String getHomepage_url() {
			return this.homepage_url;
		}

		public String wikipedia_url;

		public String getWikipedia_url() {
			return this.wikipedia_url;
		}

		public Boolean is_visible;

		public Boolean getIs_visible() {
			return this.is_visible;
		}

		public String ratings_url;

		public String getRatings_url() {
			return this.ratings_url;
		}

		public BigDecimal avg_rating;

		public BigDecimal getAvg_rating() {
			return this.avg_rating;
		}

		public Integer total_ratings;

		public Integer getTotal_ratings() {
			return this.total_ratings;
		}

		public Integer reviews_count;

		public Integer getReviews_count() {
			return this.reviews_count;
		}

		public Integer evaluation_score;

		public Integer getEvaluation_score() {
			return this.evaluation_score;
		}

		public BigDecimal arrivals_delay_index;

		public BigDecimal getArrivals_delay_index() {
			return this.arrivals_delay_index;
		}

		public Integer arrivals_delay_avg;

		public Integer getArrivals_delay_avg() {
			return this.arrivals_delay_avg;
		}

		public BigDecimal departures_delay_index;

		public BigDecimal getDepartures_delay_index() {
			return this.departures_delay_index;
		}

		public Integer departures_delay_avg;

		public Integer getDepartures_delay_avg() {
			return this.departures_delay_avg;
		}

		public BigDecimal arrivals_today_pct_delayed;

		public BigDecimal getArrivals_today_pct_delayed() {
			return this.arrivals_today_pct_delayed;
		}

		public BigDecimal arrivals_today_pct_canceled;

		public BigDecimal getArrivals_today_pct_canceled() {
			return this.arrivals_today_pct_canceled;
		}

		public BigDecimal departures_today_pct_delayed;

		public BigDecimal getDepartures_today_pct_delayed() {
			return this.departures_today_pct_delayed;
		}

		public BigDecimal departures_today_pct_canceled;

		public BigDecimal getDepartures_today_pct_canceled() {
			return this.departures_today_pct_canceled;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

				result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.iata_code == null) {
				if (other.iata_code != null)
					return false;

			} else if (!this.iata_code.equals(other.iata_code))

				return false;

			if (this.icao_code == null) {
				if (other.icao_code != null)
					return false;

			} else if (!this.icao_code.equals(other.icao_code))

				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.airport_name = this.airport_name;
			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.elevation = this.elevation;
			other.country_name = this.country_name;
			other.country_code = this.country_code;
			other.country_id = this.country_id;
			other.city = this.city;
			other.timezone_name = this.timezone_name;
			other.timezone_offset = this.timezone_offset;
			other.timezone_abbr = this.timezone_abbr;
			other.is_dst = this.is_dst;
			other.homepage_url = this.homepage_url;
			other.wikipedia_url = this.wikipedia_url;
			other.is_visible = this.is_visible;
			other.ratings_url = this.ratings_url;
			other.avg_rating = this.avg_rating;
			other.total_ratings = this.total_ratings;
			other.reviews_count = this.reviews_count;
			other.evaluation_score = this.evaluation_score;
			other.arrivals_delay_index = this.arrivals_delay_index;
			other.arrivals_delay_avg = this.arrivals_delay_avg;
			other.departures_delay_index = this.departures_delay_index;
			other.departures_delay_avg = this.departures_delay_avg;
			other.arrivals_today_pct_delayed = this.arrivals_today_pct_delayed;
			other.arrivals_today_pct_canceled = this.arrivals_today_pct_canceled;
			other.departures_today_pct_delayed = this.departures_today_pct_delayed;
			other.departures_today_pct_canceled = this.departures_today_pct_canceled;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("airport_name=" + airport_name);
			sb.append(",iata_code=" + iata_code);
			sb.append(",icao_code=" + icao_code);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",elevation=" + String.valueOf(elevation));
			sb.append(",country_name=" + country_name);
			sb.append(",country_code=" + country_code);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",city=" + city);
			sb.append(",timezone_name=" + timezone_name);
			sb.append(",timezone_offset=" + String.valueOf(timezone_offset));
			sb.append(",timezone_abbr=" + timezone_abbr);
			sb.append(",is_dst=" + String.valueOf(is_dst));
			sb.append(",homepage_url=" + homepage_url);
			sb.append(",wikipedia_url=" + wikipedia_url);
			sb.append(",is_visible=" + String.valueOf(is_visible));
			sb.append(",ratings_url=" + ratings_url);
			sb.append(",avg_rating=" + String.valueOf(avg_rating));
			sb.append(",total_ratings=" + String.valueOf(total_ratings));
			sb.append(",reviews_count=" + String.valueOf(reviews_count));
			sb.append(",evaluation_score=" + String.valueOf(evaluation_score));
			sb.append(",arrivals_delay_index=" + String.valueOf(arrivals_delay_index));
			sb.append(",arrivals_delay_avg=" + String.valueOf(arrivals_delay_avg));
			sb.append(",departures_delay_index=" + String.valueOf(departures_delay_index));
			sb.append(",departures_delay_avg=" + String.valueOf(departures_delay_avg));
			sb.append(",arrivals_today_pct_delayed=" + String.valueOf(arrivals_today_pct_delayed));
			sb.append(",arrivals_today_pct_canceled=" + String.valueOf(arrivals_today_pct_canceled));
			sb.append(",departures_today_pct_delayed=" + String.valueOf(departures_today_pct_delayed));
			sb.append(",departures_today_pct_canceled=" + String.valueOf(departures_today_pct_canceled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iata_code, other.iata_code);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.icao_code, other.icao_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String airport_name;

		public String getAirport_name() {
			return this.airport_name;
		}

		public String iata_code;

		public String getIata_code() {
			return this.iata_code;
		}

		public String icao_code;

		public String getIcao_code() {
			return this.icao_code;
		}

		public BigDecimal latitude;

		public BigDecimal getLatitude() {
			return this.latitude;
		}

		public BigDecimal longitude;

		public BigDecimal getLongitude() {
			return this.longitude;
		}

		public Integer elevation;

		public Integer getElevation() {
			return this.elevation;
		}

		public String country_name;

		public String getCountry_name() {
			return this.country_name;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public Integer country_id;

		public Integer getCountry_id() {
			return this.country_id;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String timezone_name;

		public String getTimezone_name() {
			return this.timezone_name;
		}

		public Integer timezone_offset;

		public Integer getTimezone_offset() {
			return this.timezone_offset;
		}

		public String timezone_abbr;

		public String getTimezone_abbr() {
			return this.timezone_abbr;
		}

		public Boolean is_dst;

		public Boolean getIs_dst() {
			return this.is_dst;
		}

		public String homepage_url;

		public String getHomepage_url() {
			return this.homepage_url;
		}

		public String wikipedia_url;

		public String getWikipedia_url() {
			return this.wikipedia_url;
		}

		public Boolean is_visible;

		public Boolean getIs_visible() {
			return this.is_visible;
		}

		public String ratings_url;

		public String getRatings_url() {
			return this.ratings_url;
		}

		public BigDecimal avg_rating;

		public BigDecimal getAvg_rating() {
			return this.avg_rating;
		}

		public Integer total_ratings;

		public Integer getTotal_ratings() {
			return this.total_ratings;
		}

		public Integer reviews_count;

		public Integer getReviews_count() {
			return this.reviews_count;
		}

		public Integer evaluation_score;

		public Integer getEvaluation_score() {
			return this.evaluation_score;
		}

		public BigDecimal arrivals_delay_index;

		public BigDecimal getArrivals_delay_index() {
			return this.arrivals_delay_index;
		}

		public Integer arrivals_delay_avg;

		public Integer getArrivals_delay_avg() {
			return this.arrivals_delay_avg;
		}

		public BigDecimal departures_delay_index;

		public BigDecimal getDepartures_delay_index() {
			return this.departures_delay_index;
		}

		public Integer departures_delay_avg;

		public Integer getDepartures_delay_avg() {
			return this.departures_delay_avg;
		}

		public BigDecimal arrivals_today_pct_delayed;

		public BigDecimal getArrivals_today_pct_delayed() {
			return this.arrivals_today_pct_delayed;
		}

		public BigDecimal arrivals_today_pct_canceled;

		public BigDecimal getArrivals_today_pct_canceled() {
			return this.arrivals_today_pct_canceled;
		}

		public BigDecimal departures_today_pct_delayed;

		public BigDecimal getDepartures_today_pct_delayed() {
			return this.departures_today_pct_delayed;
		}

		public BigDecimal departures_today_pct_canceled;

		public BigDecimal getDepartures_today_pct_canceled() {
			return this.departures_today_pct_canceled;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

				result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row25Struct other = (row25Struct) obj;

			if (this.iata_code == null) {
				if (other.iata_code != null)
					return false;

			} else if (!this.iata_code.equals(other.iata_code))

				return false;

			if (this.icao_code == null) {
				if (other.icao_code != null)
					return false;

			} else if (!this.icao_code.equals(other.icao_code))

				return false;

			return true;
		}

		public void copyDataTo(row25Struct other) {

			other.airport_name = this.airport_name;
			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;
			other.latitude = this.latitude;
			other.longitude = this.longitude;
			other.elevation = this.elevation;
			other.country_name = this.country_name;
			other.country_code = this.country_code;
			other.country_id = this.country_id;
			other.city = this.city;
			other.timezone_name = this.timezone_name;
			other.timezone_offset = this.timezone_offset;
			other.timezone_abbr = this.timezone_abbr;
			other.is_dst = this.is_dst;
			other.homepage_url = this.homepage_url;
			other.wikipedia_url = this.wikipedia_url;
			other.is_visible = this.is_visible;
			other.ratings_url = this.ratings_url;
			other.avg_rating = this.avg_rating;
			other.total_ratings = this.total_ratings;
			other.reviews_count = this.reviews_count;
			other.evaluation_score = this.evaluation_score;
			other.arrivals_delay_index = this.arrivals_delay_index;
			other.arrivals_delay_avg = this.arrivals_delay_avg;
			other.departures_delay_index = this.departures_delay_index;
			other.departures_delay_avg = this.departures_delay_avg;
			other.arrivals_today_pct_delayed = this.arrivals_today_pct_delayed;
			other.arrivals_today_pct_canceled = this.arrivals_today_pct_canceled;
			other.departures_today_pct_delayed = this.departures_today_pct_delayed;
			other.departures_today_pct_canceled = this.departures_today_pct_canceled;

		}

		public void copyKeysDataTo(row25Struct other) {

			other.iata_code = this.iata_code;
			other.icao_code = this.icao_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.airport_name = readString(dis);

					this.iata_code = readString(dis);

					this.icao_code = readString(dis);

					this.latitude = (BigDecimal) dis.readObject();

					this.longitude = (BigDecimal) dis.readObject();

					this.elevation = readInteger(dis);

					this.country_name = readString(dis);

					this.country_code = readString(dis);

					this.country_id = readInteger(dis);

					this.city = readString(dis);

					this.timezone_name = readString(dis);

					this.timezone_offset = readInteger(dis);

					this.timezone_abbr = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_dst = null;
					} else {
						this.is_dst = dis.readBoolean();
					}

					this.homepage_url = readString(dis);

					this.wikipedia_url = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_visible = null;
					} else {
						this.is_visible = dis.readBoolean();
					}

					this.ratings_url = readString(dis);

					this.avg_rating = (BigDecimal) dis.readObject();

					this.total_ratings = readInteger(dis);

					this.reviews_count = readInteger(dis);

					this.evaluation_score = readInteger(dis);

					this.arrivals_delay_index = (BigDecimal) dis.readObject();

					this.arrivals_delay_avg = readInteger(dis);

					this.departures_delay_index = (BigDecimal) dis.readObject();

					this.departures_delay_avg = readInteger(dis);

					this.arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.departures_today_pct_canceled = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.airport_name, dos);

				// String

				writeString(this.iata_code, dos);

				// String

				writeString(this.icao_code, dos);

				// BigDecimal

				dos.writeObject(this.latitude);

				// BigDecimal

				dos.writeObject(this.longitude);

				// Integer

				writeInteger(this.elevation, dos);

				// String

				writeString(this.country_name, dos);

				// String

				writeString(this.country_code, dos);

				// Integer

				writeInteger(this.country_id, dos);

				// String

				writeString(this.city, dos);

				// String

				writeString(this.timezone_name, dos);

				// Integer

				writeInteger(this.timezone_offset, dos);

				// String

				writeString(this.timezone_abbr, dos);

				// Boolean

				if (this.is_dst == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_dst);
				}

				// String

				writeString(this.homepage_url, dos);

				// String

				writeString(this.wikipedia_url, dos);

				// Boolean

				if (this.is_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.is_visible);
				}

				// String

				writeString(this.ratings_url, dos);

				// BigDecimal

				dos.writeObject(this.avg_rating);

				// Integer

				writeInteger(this.total_ratings, dos);

				// Integer

				writeInteger(this.reviews_count, dos);

				// Integer

				writeInteger(this.evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_delay_index);

				// Integer

				writeInteger(this.arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.departures_delay_index);

				// Integer

				writeInteger(this.departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.departures_today_pct_canceled);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("airport_name=" + airport_name);
			sb.append(",iata_code=" + iata_code);
			sb.append(",icao_code=" + icao_code);
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",elevation=" + String.valueOf(elevation));
			sb.append(",country_name=" + country_name);
			sb.append(",country_code=" + country_code);
			sb.append(",country_id=" + String.valueOf(country_id));
			sb.append(",city=" + city);
			sb.append(",timezone_name=" + timezone_name);
			sb.append(",timezone_offset=" + String.valueOf(timezone_offset));
			sb.append(",timezone_abbr=" + timezone_abbr);
			sb.append(",is_dst=" + String.valueOf(is_dst));
			sb.append(",homepage_url=" + homepage_url);
			sb.append(",wikipedia_url=" + wikipedia_url);
			sb.append(",is_visible=" + String.valueOf(is_visible));
			sb.append(",ratings_url=" + ratings_url);
			sb.append(",avg_rating=" + String.valueOf(avg_rating));
			sb.append(",total_ratings=" + String.valueOf(total_ratings));
			sb.append(",reviews_count=" + String.valueOf(reviews_count));
			sb.append(",evaluation_score=" + String.valueOf(evaluation_score));
			sb.append(",arrivals_delay_index=" + String.valueOf(arrivals_delay_index));
			sb.append(",arrivals_delay_avg=" + String.valueOf(arrivals_delay_avg));
			sb.append(",departures_delay_index=" + String.valueOf(departures_delay_index));
			sb.append(",departures_delay_avg=" + String.valueOf(departures_delay_avg));
			sb.append(",arrivals_today_pct_delayed=" + String.valueOf(arrivals_today_pct_delayed));
			sb.append(",arrivals_today_pct_canceled=" + String.valueOf(arrivals_today_pct_canceled));
			sb.append(",departures_today_pct_delayed=" + String.valueOf(departures_today_pct_delayed));
			sb.append(",departures_today_pct_canceled=" + String.valueOf(departures_today_pct_canceled));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.iata_code, other.iata_code);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.icao_code, other.icao_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfAirport_detailsStruct
			implements routines.system.IPersistableRow<copyOfcopyOfAirport_detailsStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfAirport_detailsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfFlight_departuresStruct
			implements routines.system.IPersistableRow<copyOfcopyOfFlight_departuresStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfFlight_departuresStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tREST_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				copyOfcopyOfAirport_detailsStruct copyOfcopyOfAirport_details = new copyOfcopyOfAirport_detailsStruct();
				row25Struct row25 = new row25Struct();
				row27Struct row27 = new row27Struct();
				copyOfcopyOfFlight_departuresStruct copyOfcopyOfFlight_departures = new copyOfcopyOfFlight_departuresStruct();
				copyOfcopyOfFlight_departuresStruct row24 = copyOfcopyOfFlight_departures;
				row26Struct row26 = new row26Struct();
				row28Struct row28 = new row28Struct();
				copyOfcopyOfdeparturesStruct copyOfcopyOfdepartures = new copyOfcopyOfdeparturesStruct();

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tUniqRow_7 begin ] start
				 */

				ok_Hash.put("tUniqRow_7", false);
				start_Hash.put("tUniqRow_7", System.currentTimeMillis());

				currentComponent = "tUniqRow_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tUniqRow_7 = 0;

				class KeyStruct_tUniqRow_7 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String iata_code;
					String icao_code;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.iata_code == null) ? 0 : this.iata_code.hashCode());

							result = prime * result + ((this.icao_code == null) ? 0 : this.icao_code.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;

						if (this.iata_code == null) {
							if (other.iata_code != null)
								return false;

						} else if (!this.iata_code.equals(other.iata_code))

							return false;

						if (this.icao_code == null) {
							if (other.icao_code != null)
								return false;

						} else if (!this.icao_code.equals(other.icao_code))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_7 = 0;
				int nb_duplicates_tUniqRow_7 = 0;
				KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
				java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>();

				/**
				 * [tUniqRow_7 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_7 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_7", false);
				start_Hash.put("tExtractJSONFields_7", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfAirport_details");
				}

				int tos_count_tExtractJSONFields_7 = 0;

				int nb_line_tExtractJSONFields_7 = 0;
				String jsonStr_tExtractJSONFields_7 = "";

				class JsonPathCache_tExtractJSONFields_7 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_7 jsonPathCache_tExtractJSONFields_7 = new JsonPathCache_tExtractJSONFields_7();

				/**
				 * [tExtractJSONFields_7 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfdepartures");
				}

				int tos_count_tDBOutput_5 = 0;

				int updateKeyCount_tDBOutput_5 = 1;
				if (updateKeyCount_tDBOutput_5 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_5 == 65 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rowsToCommitCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "Raw_Flights";
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
				calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
				calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime().getTime();
				long date_tDBOutput_5;

				java.sql.Connection conn_tDBOutput_5 = null;

				String properties_tDBOutput_5 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBOutput_5 == null || properties_tDBOutput_5.trim().length() == 0) {
					properties_tDBOutput_5 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_5.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_5.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_5 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?"
						+ properties_tDBOutput_5;

				String driverClass_tDBOutput_5 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_5 = "root";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:9o72kPABRzROzkBYKtCqKM4+lUeS7i/dKtyJXhll6go=");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				java.lang.Class.forName(driverClass_tDBOutput_5);

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5,
						dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5.getTables("airportdata", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_5 = false;
				while (rsTable_tDBOutput_5.next()) {
					String table_tDBOutput_5 = rsTable_tDBOutput_5.getString("TABLE_NAME");
					if (table_tDBOutput_5.equalsIgnoreCase("Raw_Flights")) {
						whetherExist_tDBOutput_5 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_5) {
					try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5.createStatement()) {
						stmtCreate_tDBOutput_5.execute("CREATE TABLE `" + tableName_tDBOutput_5
								+ "`(`flight_number` VARCHAR(20)  ,`flight_alternative` VARCHAR(20)  ,`status_text` VARCHAR(50)  ,`status_live` BIT(10)  ,`status_color` VARCHAR(20)  ,`aircraft_code` VARCHAR(10)  ,`aircraft_text` VARCHAR(100)  ,`aircraft_hex` VARCHAR(10)  ,`aircraft_registration` VARCHAR(20)  ,`airline_name` VARCHAR(100)  ,`airline_iata` VARCHAR(2)  ,`airline_icao` VARCHAR(3)  ,`airline_short` VARCHAR(50)  ,`origin_iata` VARCHAR(3)  ,`origin_icao` VARCHAR(4)  ,`origin_name` VARCHAR(200)  ,`origin_latitude` DECIMAL(10,7)  ,`origin_longitude` DECIMAL(10,7)  ,`origin_country` VARCHAR(100)  ,`origin_country_code` VARCHAR(2)  ,`origin_city` VARCHAR(100)  ,`origin_timezone` VARCHAR(50)  ,`origin_timezone_offset` INT(10)  ,`origin_avg_rating` DECIMAL(10,0)  ,`origin_total_ratings` INT(10)  ,`origin_reviews_count` INT(10)  ,`origin_evaluation_score` INT(10)  ,`origin_arrivals_delay_index` DECIMAL(5,2)  ,`origin_arrivals_delay_avg` INT(10)  ,`origin_departures_delay_index` DECIMAL(5,2)  ,`origin_departures_delay_avg` INT(10)  ,`origin_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`origin_departures_today_pct_delayed` DECIMAL(3,2)  ,`origin_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`origin_departures_today_pct_canceled` DECIMAL(3,2)  ,`destination_iata` VARCHAR(3)  ,`destination_icao` VARCHAR(4)  ,`destination_name` VARCHAR(200)  ,`destination_latitude` DECIMAL(10,7)  ,`destination_longitude` DECIMAL(10,7)  ,`destination_country` VARCHAR(100)  ,`destination_country_code` VARCHAR(2)  ,`destination_city` VARCHAR(100)  ,`destination_timezone` VARCHAR(50)  ,`destination_timezone_offset` INT(10)  ,`destination_visible` BIT(10)  ,`destination_avg_rating` DECIMAL(10,0)  ,`destination_total_ratings` INT(10)  ,`destination_reviews_count` INT(10)  ,`destination_evaluation_score` INT(10)  ,`destination_arrivals_delay_index` DECIMAL(5,2)  ,`destination_arrivals_delay_avg` INT(10)  ,`destination_departures_delay_index` DECIMAL(5,2)  ,`destination_departures_delay_avg` INT(10)  ,`destination_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`destination_departures_today_pct_delayed` DECIMAL(3,2)  ,`destination_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`destination_departures_today_pct_canceled` DECIMAL(3,2)  ,`scheduled_departure` BIGINT(20)  ,`scheduled_arrival` BIGINT(20)  ,`real_departure` BIGINT(20)  ,`real_arrival` BIGINT(20)  ,`estimated_departure` BIGINT(20)  ,`estimated_arrival` BIGINT(20)  ,`type` VARCHAR(10)  ,primary key(`flight_number`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement("SELECT COUNT(1) FROM `" + "Raw_Flights" + "` WHERE `flight_number` = ?");
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
				String insert_tDBOutput_5 = "INSERT INTO `" + "Raw_Flights"
						+ "` (`flight_number`,`flight_alternative`,`status_text`,`status_live`,`status_color`,`aircraft_code`,`aircraft_text`,`aircraft_hex`,`aircraft_registration`,`airline_name`,`airline_iata`,`airline_icao`,`airline_short`,`origin_iata`,`origin_icao`,`origin_name`,`origin_latitude`,`origin_longitude`,`origin_country`,`origin_country_code`,`origin_city`,`origin_timezone`,`origin_timezone_offset`,`origin_avg_rating`,`origin_total_ratings`,`origin_reviews_count`,`origin_evaluation_score`,`origin_arrivals_delay_index`,`origin_arrivals_delay_avg`,`origin_departures_delay_index`,`origin_departures_delay_avg`,`origin_arrivals_today_pct_delayed`,`origin_departures_today_pct_delayed`,`origin_arrivals_today_pct_canceled`,`origin_departures_today_pct_canceled`,`destination_iata`,`destination_icao`,`destination_name`,`destination_latitude`,`destination_longitude`,`destination_country`,`destination_country_code`,`destination_city`,`destination_timezone`,`destination_timezone_offset`,`destination_visible`,`destination_avg_rating`,`destination_total_ratings`,`destination_reviews_count`,`destination_evaluation_score`,`destination_arrivals_delay_index`,`destination_arrivals_delay_avg`,`destination_departures_delay_index`,`destination_departures_delay_avg`,`destination_arrivals_today_pct_delayed`,`destination_departures_today_pct_delayed`,`destination_arrivals_today_pct_canceled`,`destination_departures_today_pct_canceled`,`scheduled_departure`,`scheduled_arrival`,`real_departure`,`real_arrival`,`estimated_departure`,`estimated_arrival`,`type`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
				String update_tDBOutput_5 = "UPDATE `" + "Raw_Flights"
						+ "` SET `flight_alternative` = ?,`status_text` = ?,`status_live` = ?,`status_color` = ?,`aircraft_code` = ?,`aircraft_text` = ?,`aircraft_hex` = ?,`aircraft_registration` = ?,`airline_name` = ?,`airline_iata` = ?,`airline_icao` = ?,`airline_short` = ?,`origin_iata` = ?,`origin_icao` = ?,`origin_name` = ?,`origin_latitude` = ?,`origin_longitude` = ?,`origin_country` = ?,`origin_country_code` = ?,`origin_city` = ?,`origin_timezone` = ?,`origin_timezone_offset` = ?,`origin_avg_rating` = ?,`origin_total_ratings` = ?,`origin_reviews_count` = ?,`origin_evaluation_score` = ?,`origin_arrivals_delay_index` = ?,`origin_arrivals_delay_avg` = ?,`origin_departures_delay_index` = ?,`origin_departures_delay_avg` = ?,`origin_arrivals_today_pct_delayed` = ?,`origin_departures_today_pct_delayed` = ?,`origin_arrivals_today_pct_canceled` = ?,`origin_departures_today_pct_canceled` = ?,`destination_iata` = ?,`destination_icao` = ?,`destination_name` = ?,`destination_latitude` = ?,`destination_longitude` = ?,`destination_country` = ?,`destination_country_code` = ?,`destination_city` = ?,`destination_timezone` = ?,`destination_timezone_offset` = ?,`destination_visible` = ?,`destination_avg_rating` = ?,`destination_total_ratings` = ?,`destination_reviews_count` = ?,`destination_evaluation_score` = ?,`destination_arrivals_delay_index` = ?,`destination_arrivals_delay_avg` = ?,`destination_departures_delay_index` = ?,`destination_departures_delay_avg` = ?,`destination_arrivals_today_pct_delayed` = ?,`destination_departures_today_pct_delayed` = ?,`destination_arrivals_today_pct_canceled` = ?,`destination_departures_today_pct_canceled` = ?,`scheduled_departure` = ?,`scheduled_arrival` = ?,`real_departure` = ?,`real_arrival` = ?,`estimated_departure` = ?,`estimated_arrival` = ?,`type` = ? WHERE `flight_number` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(update_tDBOutput_5);
				resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfdeparturesStruct copyOfcopyOfdepartures_tmp = new copyOfcopyOfdeparturesStruct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tUniqRow_8 begin ] start
				 */

				ok_Hash.put("tUniqRow_8", false);
				start_Hash.put("tUniqRow_8", System.currentTimeMillis());

				currentComponent = "tUniqRow_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tUniqRow_8 = 0;

				class KeyStruct_tUniqRow_8 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Long flight_row_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;

						if (this.flight_row_id == null) {
							if (other.flight_row_id != null)
								return false;

						} else if (!this.flight_row_id.equals(other.flight_row_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_8 = 0;
				int nb_duplicates_tUniqRow_8 = 0;
				KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
				java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>();

				/**
				 * [tUniqRow_8 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_8 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_8", false);
				start_Hash.put("tExtractJSONFields_8", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tExtractJSONFields_8 = 0;

				int nb_line_tExtractJSONFields_8 = 0;
				String jsonStr_tExtractJSONFields_8 = "";

				class JsonPathCache_tExtractJSONFields_8 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_8 jsonPathCache_tExtractJSONFields_8 = new JsonPathCache_tExtractJSONFields_8();

				/**
				 * [tExtractJSONFields_8 begin ] stop
				 */

				/**
				 * [tSleep_3 begin ] start
				 */

				ok_Hash.put("tSleep_3", false);
				start_Hash.put("tSleep_3", System.currentTimeMillis());

				currentComponent = "tSleep_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfFlight_departures");
				}

				int tos_count_tSleep_3 = 0;

				/**
				 * [tSleep_3 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfAirport_detailsStruct copyOfcopyOfAirport_details_tmp = new copyOfcopyOfAirport_detailsStruct();
				copyOfcopyOfFlight_departuresStruct copyOfcopyOfFlight_departures_tmp = new copyOfcopyOfFlight_departuresStruct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tREST_5 begin ] start
				 */

				ok_Hash.put("tREST_5", false);
				start_Hash.put("tREST_5", System.currentTimeMillis());

				currentComponent = "tREST_5";

				int tos_count_tREST_5 = 0;

				String endpoint_tREST_5 = "https://api.flightapi.io/schedule/" + context.apikey
						+ "?mode=departures&iata=DJE&day=1";

				String trustStoreFile_tREST_5 = System.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_5 = System.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_5 = System.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_5 = System.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_5 = System.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_5 = System.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_5 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_5 = javax.net.ssl.SSLContext.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_5 = null;
				if (trustStoreFile_tREST_5 != null && trustStoreType_tREST_5 != null) {
					char[] password_tREST_5 = null;
					if (trustStorePWD_tREST_5 != null)
						password_tREST_5 = trustStorePWD_tREST_5.toCharArray();
					java.security.KeyStore trustStore_tREST_5 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_5);
					trustStore_tREST_5.load(new java.io.FileInputStream(trustStoreFile_tREST_5), password_tREST_5);

					javax.net.ssl.TrustManagerFactory tmf_tREST_5 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					tmf_tREST_5.init(trustStore_tREST_5);
					tms_tREST_5 = tmf_tREST_5.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_5 = null;
				if (keyStoreFile_tREST_5 != null && keyStoreType_tREST_5 != null) {
					char[] password_tREST_5 = null;
					if (keyStorePWD_tREST_5 != null)
						password_tREST_5 = keyStorePWD_tREST_5.toCharArray();
					java.security.KeyStore keyStore_tREST_5 = java.security.KeyStore.getInstance(keyStoreType_tREST_5);
					keyStore_tREST_5.load(new java.io.FileInputStream(keyStoreFile_tREST_5), password_tREST_5);

					javax.net.ssl.KeyManagerFactory kmf_tREST_5 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					kmf_tREST_5.init(keyStore_tREST_5, password_tREST_5);
					kms_tREST_5 = kmf_tREST_5.getKeyManagers();
				}

				ctx_tREST_5.init(kms_tREST_5, tms_tREST_5, null);
				config_tREST_5.getProperties().put(
						com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
						new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

							public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
								return true;
							}
						}, ctx_tREST_5));

				com.sun.jersey.api.client.Client restClient_tREST_5 = com.sun.jersey.api.client.Client
						.create(config_tREST_5);

				java.util.Map<String, Object> headers_tREST_5 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_5 = headers_tREST_5.get("Transfer-Encoding");
				if (transfer_encoding_tREST_5 != null && "chunked".equals(transfer_encoding_tREST_5)) {
					restClient_tREST_5.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_5;
				if (endpoint_tREST_5 != null && !("").equals(endpoint_tREST_5)) {
					restResource_tREST_5 = restClient_tREST_5.resource(endpoint_tREST_5);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_5 = null;
				String restResponse_tREST_5 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_5 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_5 : headers_tREST_5.entrySet()) {
						if (builder_tREST_5 == null) {
							builder_tREST_5 = restResource_tREST_5.header(header_tREST_5.getKey(),
									header_tREST_5.getValue());
						} else {
							builder_tREST_5.header(header_tREST_5.getKey(), header_tREST_5.getValue());
						}
					}

					if (builder_tREST_5 != null) {
						restResponse_tREST_5 = builder_tREST_5.get(String.class);
					} else {
						restResponse_tREST_5 = restResource_tREST_5.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					globalMap.put("tREST_5_ERROR_MESSAGE", ue.getMessage());
					errorResponse_tREST_5 = ue.getResponse();
				}

				// for output

				row23 = new row23Struct();
				if (errorResponse_tREST_5 != null) {
					row23.ERROR_CODE = errorResponse_tREST_5.getStatus();
					if (row23.ERROR_CODE != 204) {
						row23.Body = errorResponse_tREST_5.getEntity(String.class);
					}
				} else {
					row23.Body = restResponse_tREST_5;
				}

				/**
				 * [tREST_5 begin ] stop
				 */

				/**
				 * [tREST_5 main ] start
				 */

				currentComponent = "tREST_5";

				tos_count_tREST_5++;

				/**
				 * [tREST_5 main ] stop
				 */

				/**
				 * [tREST_5 process_data_begin ] start
				 */

				currentComponent = "tREST_5";

				/**
				 * [tREST_5 process_data_begin ] stop
				 */

				/**
				 * [tMap_7 main ] start
				 */

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1

							, "row23"

					);
				}

				boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_7 = false;
				boolean mainRowRejected_tMap_7 = false;

				// ###############################
				{ // start of Var scope

					// ###############################
					// # Vars tables

					Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
					// ###############################
					// # Output tables

					copyOfcopyOfAirport_details = null;
					copyOfcopyOfFlight_departures = null;

// # Output table : 'copyOfcopyOfAirport_details'
					copyOfcopyOfAirport_details_tmp.Body = row23.Body;
					copyOfcopyOfAirport_details_tmp.ERROR_CODE = row23.ERROR_CODE;
					copyOfcopyOfAirport_details = copyOfcopyOfAirport_details_tmp;

// # Output table : 'copyOfcopyOfFlight_departures'
					copyOfcopyOfFlight_departures_tmp.Body = row23.Body;
					copyOfcopyOfFlight_departures_tmp.ERROR_CODE = row23.ERROR_CODE;
					copyOfcopyOfFlight_departures = copyOfcopyOfFlight_departures_tmp;
// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_7 = false;

				tos_count_tMap_7++;

				/**
				 * [tMap_7 main ] stop
				 */

				/**
				 * [tMap_7 process_data_begin ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 process_data_begin ] stop
				 */
// Start of branch "copyOfcopyOfAirport_details"
				if (copyOfcopyOfAirport_details != null) {

					/**
					 * [tExtractJSONFields_7 main ] start
					 */

					currentComponent = "tExtractJSONFields_7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "copyOfcopyOfAirport_details"

						);
					}

					if (copyOfcopyOfAirport_details.Body != null) {// C_01
						jsonStr_tExtractJSONFields_7 = copyOfcopyOfAirport_details.Body.toString();

						row25 = null;

						String loopPath_tExtractJSONFields_7 = "$.airport.pluginData";
						java.util.List<Object> resultset_tExtractJSONFields_7 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_7 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_7 = null;
						try {
							document_tExtractJSONFields_7 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_7);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
									.getCompiledJsonPath(loopPath_tExtractJSONFields_7);
							Object result_tExtractJSONFields_7 = document_tExtractJSONFields_7
									.read(compiledLoopPath_tExtractJSONFields_7, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_7 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_7 = (net.minidev.json.JSONArray) result_tExtractJSONFields_7;
							} else {
								resultset_tExtractJSONFields_7.add(result_tExtractJSONFields_7);
							}

							isStructError_tExtractJSONFields_7 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_7) {
							globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE", ex_tExtractJSONFields_7.getMessage());
							throw (ex_tExtractJSONFields_7);
						}

						String jsonPath_tExtractJSONFields_7 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_7 = null;

						Object value_tExtractJSONFields_7 = null;

						Object root_tExtractJSONFields_7 = null;
						for (int i_tExtractJSONFields_7 = 0; isStructError_tExtractJSONFields_7
								|| (i_tExtractJSONFields_7 < resultset_tExtractJSONFields_7
										.size()); i_tExtractJSONFields_7++) {
							if (!isStructError_tExtractJSONFields_7) {
								Object row_tExtractJSONFields_7 = resultset_tExtractJSONFields_7
										.get(i_tExtractJSONFields_7);
								row25 = null;
								row25 = new row25Struct();
								nb_line_tExtractJSONFields_7++;
								try {
									jsonPath_tExtractJSONFields_7 = "$.details.name";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.airport_name = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.airport_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.code.iata";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.iata_code = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.iata_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.code.icao";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.icao_code = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.icao_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.position.latitude";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.latitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.latitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.latitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.position.longitude";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.longitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.longitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.longitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.position.elevation";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.elevation = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_7.toString());
										} else {
											row25.elevation =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.elevation =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.position.country.name";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.country_name = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.country_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.position.country.code";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.country_code = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.country_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.position.country.id";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.country_id = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_7.toString());
										} else {
											row25.country_id =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.country_id =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.position.region.city";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.city = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.city =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.timezone.name";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.timezone_name = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.timezone_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.timezone.offset";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.timezone_offset = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_7.toString());
										} else {
											row25.timezone_offset =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.timezone_offset =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.timezone.abbr";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.timezone_abbr = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.timezone_abbr =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.timezone.isDst";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.is_dst = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_7.toString());
										} else {
											row25.is_dst =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.is_dst =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.url.homepage";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.homepage_url = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.homepage_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.url.wikipedia";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.wikipedia_url = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.wikipedia_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.visible";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.is_visible = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_7.toString());
										} else {
											row25.is_visible =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.is_visible =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.flightdiary.url";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										row25.ratings_url = value_tExtractJSONFields_7 == null ?

												null

												: value_tExtractJSONFields_7.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.ratings_url =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.flightdiary.ratings.avg";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.avg_rating = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.avg_rating =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.avg_rating =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.flightdiary.ratings.total";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.total_ratings = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_7.toString());
										} else {
											row25.total_ratings =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.total_ratings =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.flightdiary.reviews";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.reviews_count = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_7.toString());
										} else {
											row25.reviews_count =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.reviews_count =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.flightdiary.evaluation";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.evaluation_score = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_7.toString());
										} else {
											row25.evaluation_score =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.evaluation_score =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.stats.arrivals.delayIndex";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.arrivals_delay_index = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.arrivals_delay_index =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.arrivals_delay_index =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.stats.arrivals.delayAvg";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.arrivals_delay_avg = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_7.toString());
										} else {
											row25.arrivals_delay_avg =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.arrivals_delay_avg =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.stats.departures.delayIndex";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.departures_delay_index = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.departures_delay_index =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.departures_delay_index =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.stats.departures.delayAvg";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.departures_delay_avg = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_7.toString());
										} else {
											row25.departures_delay_avg =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.departures_delay_avg =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.stats.arrivals.today.percentage.delayed";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.arrivals_today_pct_delayed = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.arrivals_today_pct_delayed =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.arrivals_today_pct_delayed =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.stats.arrivals.today.percentage.canceled";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.arrivals_today_pct_canceled = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.arrivals_today_pct_canceled =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.arrivals_today_pct_canceled =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.stats.departures.today.percentage.delayed";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.departures_today_pct_delayed = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.departures_today_pct_delayed =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.departures_today_pct_delayed =

												null

										;
									}
									jsonPath_tExtractJSONFields_7 = "$.details.stats.departures.today.percentage.canceled";
									compiledJsonPath_tExtractJSONFields_7 = jsonPathCache_tExtractJSONFields_7
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_7);

									try {

										value_tExtractJSONFields_7 = compiledJsonPath_tExtractJSONFields_7
												.read(row_tExtractJSONFields_7);

										if (value_tExtractJSONFields_7 != null
												&& !value_tExtractJSONFields_7.toString().isEmpty()) {
											row25.departures_today_pct_canceled = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_7.toString());
										} else {
											row25.departures_today_pct_canceled =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_7) {
										globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
												e_tExtractJSONFields_7.getMessage());
										row25.departures_today_pct_canceled =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_7) {
									globalMap.put("tExtractJSONFields_7_ERROR_MESSAGE",
											ex_tExtractJSONFields_7.getMessage());
									throw (ex_tExtractJSONFields_7);
								}

							}

							isStructError_tExtractJSONFields_7 = false;

//}

							tos_count_tExtractJSONFields_7++;

							/**
							 * [tExtractJSONFields_7 main ] stop
							 */

							/**
							 * [tExtractJSONFields_7 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_7";

							/**
							 * [tExtractJSONFields_7 process_data_begin ] stop
							 */
// Start of branch "row25"
							if (row25 != null) {

								/**
								 * [tUniqRow_7 main ] start
								 */

								currentComponent = "tUniqRow_7";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row25"

									);
								}

								row27 = null;
								if (row25.iata_code == null) {
									finder_tUniqRow_7.iata_code = null;
								} else {
									finder_tUniqRow_7.iata_code = row25.iata_code.toLowerCase();
								}
								if (row25.icao_code == null) {
									finder_tUniqRow_7.icao_code = null;
								} else {
									finder_tUniqRow_7.icao_code = row25.icao_code.toLowerCase();
								}
								finder_tUniqRow_7.hashCodeDirty = true;
								if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
									KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

									if (row25.iata_code == null) {
										new_tUniqRow_7.iata_code = null;
									} else {
										new_tUniqRow_7.iata_code = row25.iata_code.toLowerCase();
									}
									if (row25.icao_code == null) {
										new_tUniqRow_7.icao_code = null;
									} else {
										new_tUniqRow_7.icao_code = row25.icao_code.toLowerCase();
									}

									keystUniqRow_7.add(new_tUniqRow_7);
									if (row27 == null) {

										row27 = new row27Struct();
									}
									row27.airport_name = row25.airport_name;
									row27.iata_code = row25.iata_code;
									row27.icao_code = row25.icao_code;
									row27.latitude = row25.latitude;
									row27.longitude = row25.longitude;
									row27.elevation = row25.elevation;
									row27.country_name = row25.country_name;
									row27.country_code = row25.country_code;
									row27.country_id = row25.country_id;
									row27.city = row25.city;
									row27.timezone_name = row25.timezone_name;
									row27.timezone_offset = row25.timezone_offset;
									row27.timezone_abbr = row25.timezone_abbr;
									row27.is_dst = row25.is_dst;
									row27.homepage_url = row25.homepage_url;
									row27.wikipedia_url = row25.wikipedia_url;
									row27.is_visible = row25.is_visible;
									row27.ratings_url = row25.ratings_url;
									row27.avg_rating = row25.avg_rating;
									row27.total_ratings = row25.total_ratings;
									row27.reviews_count = row25.reviews_count;
									row27.evaluation_score = row25.evaluation_score;
									row27.arrivals_delay_index = row25.arrivals_delay_index;
									row27.arrivals_delay_avg = row25.arrivals_delay_avg;
									row27.departures_delay_index = row25.departures_delay_index;
									row27.departures_delay_avg = row25.departures_delay_avg;
									row27.arrivals_today_pct_delayed = row25.arrivals_today_pct_delayed;
									row27.arrivals_today_pct_canceled = row25.arrivals_today_pct_canceled;
									row27.departures_today_pct_delayed = row25.departures_today_pct_delayed;
									row27.departures_today_pct_canceled = row25.departures_today_pct_canceled;
									nb_uniques_tUniqRow_7++;
								} else {
									nb_duplicates_tUniqRow_7++;
								}

								tos_count_tUniqRow_7++;

								/**
								 * [tUniqRow_7 main ] stop
								 */

								/**
								 * [tUniqRow_7 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_7";

								/**
								 * [tUniqRow_7 process_data_begin ] stop
								 */
// Start of branch "row27"
								if (row27 != null) {

									/**
									 * [tJavaRow_3 main ] start
									 */

									currentComponent = "tJavaRow_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row27"

										);
									}

// Airport info
									globalMap.put("airport_name", row27.airport_name);
									System.out.println("airport_name = " + row27.airport_name);
									globalMap.put("iata_code", row27.iata_code);
									System.out.println("iata_code = " + row27.iata_code);
									globalMap.put("icao_code", row27.icao_code);
									System.out.println("icao_code = " + row27.icao_code);
									globalMap.put("latitude", row27.latitude);
									System.out.println("latitude = " + row27.latitude);
									globalMap.put("longitude", row27.longitude);
									System.out.println("longitude = " + row27.longitude);
									globalMap.put("elevation", row27.elevation);
									System.out.println("elevation = " + row27.elevation);
									globalMap.put("country_name", row27.country_name);
									System.out.println("country_name = " + row27.country_name);
									globalMap.put("country_code", row27.country_code);
									System.out.println("country_code = " + row27.country_code);
									globalMap.put("country_id", row27.country_id);
									System.out.println("country_id = " + row27.country_id);
									globalMap.put("city", row27.city);
									System.out.println("city = " + row27.city);

// Timezone info
									globalMap.put("timezone_name", row27.timezone_name);
									System.out.println("timezone_name = " + row27.timezone_name);
									globalMap.put("timezone_offset", row27.timezone_offset);
									System.out.println("timezone_offset = " + row27.timezone_offset);
									globalMap.put("timezone_abbr", row27.timezone_abbr);
									System.out.println("timezone_abbr = " + row27.timezone_abbr);
									globalMap.put("is_dst", row27.is_dst);
									System.out.println("is_dst = " + row27.is_dst);

// URLs
									globalMap.put("homepage_url", row27.homepage_url);
									System.out.println("homepage_url = " + row27.homepage_url);
									globalMap.put("wikipedia_url", row27.wikipedia_url);
									System.out.println("wikipedia_url = " + row27.wikipedia_url);
									globalMap.put("is_visible", row27.is_visible);
									System.out.println("is_visible = " + row27.is_visible);
									globalMap.put("ratings_url", row27.ratings_url);
									System.out.println("ratings_url = " + row27.ratings_url);

// Ratings
									globalMap.put("avg_rating", row27.avg_rating);
									System.out.println("avg_rating = " + row27.avg_rating);
									globalMap.put("total_ratings", row27.total_ratings);
									System.out.println("total_ratings = " + row27.total_ratings);
									globalMap.put("reviews_count", row27.reviews_count);
									System.out.println("reviews_count = " + row27.reviews_count);
									globalMap.put("evaluation_score", row27.evaluation_score);
									System.out.println("evaluation_score = " + row27.evaluation_score);

// Delay indexes
									globalMap.put("copyOfcopyOfarrivals_delay_index", row27.arrivals_delay_index);
									System.out.println("arrivals_delay_index = " + row27.arrivals_delay_index);
									globalMap.put("copyOfcopyOfarrivals_delay_avg", row27.arrivals_delay_avg);
									System.out.println("arrivals_delay_avg = " + row27.arrivals_delay_avg);
									globalMap.put("copyOfcopyOfdepartures_delay_index", row27.departures_delay_index);
									System.out.println("departures_delay_index = " + row27.departures_delay_index);
									globalMap.put("copyOfcopyOfdepartures_delay_avg", row27.departures_delay_avg);
									System.out.println("departures_delay_avg = " + row27.departures_delay_avg);

// Today's delays
									globalMap.put("copyOfcopyOfarrivals_today_pct_delayed",
											row27.arrivals_today_pct_delayed);
									System.out.println(
											"arrivals_today_pct_delayed = " + row27.arrivals_today_pct_delayed);
									globalMap.put("copyOfcopyOfdepartures_today_pct_delayed",
											row27.departures_today_pct_delayed);
									System.out.println(
											"departures_today_pct_delayed = " + row27.departures_today_pct_delayed);
									globalMap.put("copyOfcopyOfarrivals_today_pct_canceled",
											row27.arrivals_today_pct_canceled);
									System.out.println(
											"arrivals_today_pct_canceled = " + row27.arrivals_today_pct_canceled);
									globalMap.put("copyOfcopyOfdepartures_today_pct_canceled",
											row27.departures_today_pct_canceled);
									System.out.println(
											"departures_today_pct_canceled = " + row27.departures_today_pct_canceled);

									nb_line_tJavaRow_3++;

									tos_count_tJavaRow_3++;

									/**
									 * [tJavaRow_3 main ] stop
									 */

									/**
									 * [tJavaRow_3 process_data_begin ] start
									 */

									currentComponent = "tJavaRow_3";

									/**
									 * [tJavaRow_3 process_data_begin ] stop
									 */

									/**
									 * [tJavaRow_3 process_data_end ] start
									 */

									currentComponent = "tJavaRow_3";

									/**
									 * [tJavaRow_3 process_data_end ] stop
									 */

								} // End of branch "row27"

								/**
								 * [tUniqRow_7 process_data_end ] start
								 */

								currentComponent = "tUniqRow_7";

								/**
								 * [tUniqRow_7 process_data_end ] stop
								 */

							} // End of branch "row25"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_7 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_7";

					/**
					 * [tExtractJSONFields_7 process_data_end ] stop
					 */

				} // End of branch "copyOfcopyOfAirport_details"

// Start of branch "copyOfcopyOfFlight_departures"
				if (copyOfcopyOfFlight_departures != null) {

					/**
					 * [tSleep_3 main ] start
					 */

					currentComponent = "tSleep_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "copyOfcopyOfFlight_departures"

						);
					}

					Thread.sleep((2) * 1000);

					row24 = copyOfcopyOfFlight_departures;

					tos_count_tSleep_3++;

					/**
					 * [tSleep_3 main ] stop
					 */

					/**
					 * [tSleep_3 process_data_begin ] start
					 */

					currentComponent = "tSleep_3";

					/**
					 * [tSleep_3 process_data_begin ] stop
					 */

					/**
					 * [tExtractJSONFields_8 main ] start
					 */

					currentComponent = "tExtractJSONFields_8";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row24"

						);
					}

					if (row24.Body != null) {// C_01
						jsonStr_tExtractJSONFields_8 = row24.Body.toString();

						row26 = null;

						String loopPath_tExtractJSONFields_8 = "$.airport.pluginData.schedule.departures.data[*]";
						java.util.List<Object> resultset_tExtractJSONFields_8 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_8 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_8 = null;
						try {
							document_tExtractJSONFields_8 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_8);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
									.getCompiledJsonPath(loopPath_tExtractJSONFields_8);
							Object result_tExtractJSONFields_8 = document_tExtractJSONFields_8
									.read(compiledLoopPath_tExtractJSONFields_8, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_8 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_8 = (net.minidev.json.JSONArray) result_tExtractJSONFields_8;
							} else {
								resultset_tExtractJSONFields_8.add(result_tExtractJSONFields_8);
							}

							isStructError_tExtractJSONFields_8 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_8) {
							globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE", ex_tExtractJSONFields_8.getMessage());
							System.err.println(ex_tExtractJSONFields_8.getMessage());
						}

						String jsonPath_tExtractJSONFields_8 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_8 = null;

						Object value_tExtractJSONFields_8 = null;

						Object root_tExtractJSONFields_8 = null;
						for (int i_tExtractJSONFields_8 = 0; isStructError_tExtractJSONFields_8
								|| (i_tExtractJSONFields_8 < resultset_tExtractJSONFields_8
										.size()); i_tExtractJSONFields_8++) {
							if (!isStructError_tExtractJSONFields_8) {
								Object row_tExtractJSONFields_8 = resultset_tExtractJSONFields_8
										.get(i_tExtractJSONFields_8);
								row26 = null;
								row26 = new row26Struct();
								nb_line_tExtractJSONFields_8++;
								try {
									jsonPath_tExtractJSONFields_8 = "$.flight.identification.row";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.flight_row_id = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_8.toString());
										} else {
											row26.flight_row_id =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.flight_row_id =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.identification.number.default";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.flight_number = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.flight_number =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.identification.number.alternative";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.flight_alternative = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.flight_alternative =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.status.text";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.status_text = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.status_text =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.status.live";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.status_live = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_8.toString());
										} else {
											row26.status_live =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.status_live =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.status.generic.status.color";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.status_color = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.status_color =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.aircraft.model.code";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.aircraft_code = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.aircraft_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.aircraft.model.text";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.aircraft_text = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.aircraft_text =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.aircraft.hex";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.aircraft_hex = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.aircraft_hex =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.aircraft.registration";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.aircraft_registration = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.aircraft_registration =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airline.name";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.airline_name = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.airline_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airline.code.iata";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.airline_iata = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.airline_iata =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airline.code.icao";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.airline_icao = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.airline_icao =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airline.short";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.airline_short = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.airline_short =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.code.iata";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.destination_iata = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_iata =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.code.icao";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.destination_icao = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_icao =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.name";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.destination_name = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_name =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.position.latitude";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.destination_latitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_8.toString());
										} else {
											row26.destination_latitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_latitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.position.longitude";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.destination_longitude = ParserUtils
													.parseTo_BigDecimal(value_tExtractJSONFields_8.toString());
										} else {
											row26.destination_longitude =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_longitude =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.position.country.name";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.destination_country = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_country =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.position.country.code";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.destination_country_code = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_country_code =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.position.region.city";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.destination_city = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_city =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.timezone.name";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										row26.destination_timezone = value_tExtractJSONFields_8 == null ?

												null

												: value_tExtractJSONFields_8.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_timezone =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.timezone.offset";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.destination_timezone_offset = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_8.toString());
										} else {
											row26.destination_timezone_offset =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_timezone_offset =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.time.scheduled.departure";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.scheduled_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_8.toString());
										} else {
											row26.scheduled_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.scheduled_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.time.scheduled.arrival";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.scheduled_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_8.toString());
										} else {
											row26.scheduled_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.scheduled_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.time.real.departure";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.real_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_8.toString());
										} else {
											row26.real_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.real_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.time.real.arrival";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.real_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_8.toString());
										} else {
											row26.real_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.real_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.time.estimated.departure";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.estimated_departure = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_8.toString());
										} else {
											row26.estimated_departure =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.estimated_departure =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.time.estimated.arrival";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.estimated_arrival = ParserUtils
													.parseTo_Long(value_tExtractJSONFields_8.toString());
										} else {
											row26.estimated_arrival =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.estimated_arrival =

												null

										;
									}
									jsonPath_tExtractJSONFields_8 = "$.flight.airport.destination.visible";
									compiledJsonPath_tExtractJSONFields_8 = jsonPathCache_tExtractJSONFields_8
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_8);

									try {

										value_tExtractJSONFields_8 = compiledJsonPath_tExtractJSONFields_8
												.read(row_tExtractJSONFields_8);

										if (value_tExtractJSONFields_8 != null
												&& !value_tExtractJSONFields_8.toString().isEmpty()) {
											row26.destination_visible = ParserUtils
													.parseTo_Boolean(value_tExtractJSONFields_8.toString());
										} else {
											row26.destination_visible =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_8) {
										globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
												e_tExtractJSONFields_8.getMessage());
										row26.destination_visible =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_8) {
									globalMap.put("tExtractJSONFields_8_ERROR_MESSAGE",
											ex_tExtractJSONFields_8.getMessage());
									System.err.println(ex_tExtractJSONFields_8.getMessage());
									row26 = null;
								}

							}

							isStructError_tExtractJSONFields_8 = false;

//}

							tos_count_tExtractJSONFields_8++;

							/**
							 * [tExtractJSONFields_8 main ] stop
							 */

							/**
							 * [tExtractJSONFields_8 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_8";

							/**
							 * [tExtractJSONFields_8 process_data_begin ] stop
							 */
// Start of branch "row26"
							if (row26 != null) {

								/**
								 * [tUniqRow_8 main ] start
								 */

								currentComponent = "tUniqRow_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row26"

									);
								}

								row28 = null;
								finder_tUniqRow_8.flight_row_id = row26.flight_row_id;
								finder_tUniqRow_8.hashCodeDirty = true;
								if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
									KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

									new_tUniqRow_8.flight_row_id = row26.flight_row_id;

									keystUniqRow_8.add(new_tUniqRow_8);
									if (row28 == null) {

										row28 = new row28Struct();
									}
									row28.flight_row_id = row26.flight_row_id;
									row28.flight_number = row26.flight_number;
									row28.flight_alternative = row26.flight_alternative;
									row28.status_text = row26.status_text;
									row28.status_live = row26.status_live;
									row28.status_color = row26.status_color;
									row28.aircraft_code = row26.aircraft_code;
									row28.aircraft_text = row26.aircraft_text;
									row28.aircraft_hex = row26.aircraft_hex;
									row28.aircraft_registration = row26.aircraft_registration;
									row28.airline_name = row26.airline_name;
									row28.airline_iata = row26.airline_iata;
									row28.airline_icao = row26.airline_icao;
									row28.airline_short = row26.airline_short;
									row28.destination_iata = row26.destination_iata;
									row28.destination_icao = row26.destination_icao;
									row28.destination_name = row26.destination_name;
									row28.destination_latitude = row26.destination_latitude;
									row28.destination_longitude = row26.destination_longitude;
									row28.destination_country = row26.destination_country;
									row28.destination_country_code = row26.destination_country_code;
									row28.destination_city = row26.destination_city;
									row28.destination_timezone = row26.destination_timezone;
									row28.destination_timezone_offset = row26.destination_timezone_offset;
									row28.scheduled_departure = row26.scheduled_departure;
									row28.scheduled_arrival = row26.scheduled_arrival;
									row28.real_departure = row26.real_departure;
									row28.real_arrival = row26.real_arrival;
									row28.estimated_departure = row26.estimated_departure;
									row28.estimated_arrival = row26.estimated_arrival;
									row28.destination_visible = row26.destination_visible;
									nb_uniques_tUniqRow_8++;
								} else {
									nb_duplicates_tUniqRow_8++;
								}

								tos_count_tUniqRow_8++;

								/**
								 * [tUniqRow_8 main ] stop
								 */

								/**
								 * [tUniqRow_8 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_8";

								/**
								 * [tUniqRow_8 process_data_begin ] stop
								 */
// Start of branch "row28"
								if (row28 != null) {

									/**
									 * [tMap_8 main ] start
									 */

									currentComponent = "tMap_8";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row28"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_8 = false;
									boolean mainRowRejected_tMap_8 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
										// ###############################
										// # Output tables

										copyOfcopyOfdepartures = null;

// # Output table : 'copyOfcopyOfdepartures'
										copyOfcopyOfdepartures_tmp.flight_number = row28.flight_number;
										copyOfcopyOfdepartures_tmp.flight_alternative = row28.flight_alternative;
										copyOfcopyOfdepartures_tmp.status_text = row28.status_text;
										copyOfcopyOfdepartures_tmp.status_live = row28.status_live;
										copyOfcopyOfdepartures_tmp.status_color = row28.status_color;
										copyOfcopyOfdepartures_tmp.aircraft_code = row28.aircraft_code;
										copyOfcopyOfdepartures_tmp.aircraft_text = row28.aircraft_text;
										copyOfcopyOfdepartures_tmp.aircraft_hex = row28.aircraft_hex;
										copyOfcopyOfdepartures_tmp.aircraft_registration = row28.aircraft_registration;
										copyOfcopyOfdepartures_tmp.airline_name = row28.airline_name;
										copyOfcopyOfdepartures_tmp.airline_iata = row28.airline_iata;
										copyOfcopyOfdepartures_tmp.airline_icao = row28.airline_icao;
										copyOfcopyOfdepartures_tmp.airline_short = row28.airline_short;
										copyOfcopyOfdepartures_tmp.origin_iata = (String) globalMap.get("iata_code");
										copyOfcopyOfdepartures_tmp.origin_icao = (String) globalMap.get("icao_code");
										copyOfcopyOfdepartures_tmp.origin_name = (String) globalMap.get("airport_name");
										copyOfcopyOfdepartures_tmp.origin_latitude = (BigDecimal) globalMap
												.get("latitude");
										copyOfcopyOfdepartures_tmp.origin_longitude = (BigDecimal) globalMap
												.get("longitude");
										copyOfcopyOfdepartures_tmp.origin_country = (String) globalMap
												.get("country_name");
										copyOfcopyOfdepartures_tmp.origin_country_code = (String) globalMap
												.get("country_code");
										copyOfcopyOfdepartures_tmp.origin_city = (String) globalMap.get("city");
										copyOfcopyOfdepartures_tmp.origin_timezone = (String) globalMap
												.get("timezone_name");
										copyOfcopyOfdepartures_tmp.origin_timezone_offset = (Integer) globalMap
												.get("timezone_offset");
										copyOfcopyOfdepartures_tmp.origin_avg_rating = (BigDecimal) globalMap
												.get("avg_rating");
										copyOfcopyOfdepartures_tmp.origin_total_ratings = (Integer) globalMap
												.get("total_ratings");
										copyOfcopyOfdepartures_tmp.origin_reviews_count = (Integer) globalMap
												.get("reviews_count");
										copyOfcopyOfdepartures_tmp.origin_evaluation_score = (Integer) globalMap
												.get("evaluation_score");
										copyOfcopyOfdepartures_tmp.origin_arrivals_delay_index = (BigDecimal) globalMap
												.get("arrivals_delay_index");
										copyOfcopyOfdepartures_tmp.origin_arrivals_delay_avg = (Integer) globalMap
												.get("arrivals_delay_avg");
										copyOfcopyOfdepartures_tmp.origin_departures_delay_index = (BigDecimal) globalMap
												.get("departures_delay_index");
										copyOfcopyOfdepartures_tmp.origin_departures_delay_avg = (Integer) globalMap
												.get("departures_delay_avg");
										copyOfcopyOfdepartures_tmp.origin_arrivals_today_pct_delayed = (BigDecimal) globalMap
												.get("arrivals_today_pct_delayed");
										copyOfcopyOfdepartures_tmp.origin_departures_today_pct_delayed = (BigDecimal) globalMap
												.get("departures_today_pct_delayed");
										copyOfcopyOfdepartures_tmp.origin_arrivals_today_pct_canceled = (BigDecimal) globalMap
												.get("arrivals_today_pct_canceled");
										copyOfcopyOfdepartures_tmp.origin_departures_today_pct_canceled = (BigDecimal) globalMap
												.get("departures_today_pct_canceled");
										copyOfcopyOfdepartures_tmp.destination_iata = row28.destination_iata;
										copyOfcopyOfdepartures_tmp.destination_icao = row28.destination_icao;
										copyOfcopyOfdepartures_tmp.destination_name = row28.destination_name;
										copyOfcopyOfdepartures_tmp.destination_latitude = row28.destination_latitude;
										copyOfcopyOfdepartures_tmp.destination_longitude = row28.destination_longitude;
										copyOfcopyOfdepartures_tmp.destination_country = row28.destination_country;
										copyOfcopyOfdepartures_tmp.destination_country_code = row28.destination_country_code;
										copyOfcopyOfdepartures_tmp.destination_city = row28.destination_city;
										copyOfcopyOfdepartures_tmp.destination_timezone = row28.destination_timezone;
										copyOfcopyOfdepartures_tmp.destination_timezone_offset = row28.destination_timezone_offset;
										copyOfcopyOfdepartures_tmp.destination_visible = null;
										copyOfcopyOfdepartures_tmp.destination_avg_rating = null;
										copyOfcopyOfdepartures_tmp.destination_total_ratings = null;
										copyOfcopyOfdepartures_tmp.destination_reviews_count = null;
										copyOfcopyOfdepartures_tmp.destination_evaluation_score = null;
										copyOfcopyOfdepartures_tmp.destination_arrivals_delay_index = null;
										copyOfcopyOfdepartures_tmp.destination_arrivals_delay_avg = null;
										copyOfcopyOfdepartures_tmp.destination_departures_delay_index = null;
										copyOfcopyOfdepartures_tmp.destination_departures_delay_avg = null;
										copyOfcopyOfdepartures_tmp.destination_arrivals_today_pct_delayed = null;
										copyOfcopyOfdepartures_tmp.destination_departures_today_pct_delayed = null;
										copyOfcopyOfdepartures_tmp.destination_arrivals_today_pct_canceled = null;
										copyOfcopyOfdepartures_tmp.destination_departures_today_pct_canceled = null;
										copyOfcopyOfdepartures_tmp.scheduled_departure = row28.scheduled_departure;
										copyOfcopyOfdepartures_tmp.scheduled_arrival = row28.scheduled_arrival;
										copyOfcopyOfdepartures_tmp.real_departure = row28.real_departure;
										copyOfcopyOfdepartures_tmp.real_arrival = row28.real_arrival;
										copyOfcopyOfdepartures_tmp.estimated_departure = row28.estimated_departure;
										copyOfcopyOfdepartures_tmp.estimated_arrival = row28.estimated_arrival;
										copyOfcopyOfdepartures_tmp.type = "Departure";
										copyOfcopyOfdepartures = copyOfcopyOfdepartures_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_8 = false;

									tos_count_tMap_8++;

									/**
									 * [tMap_8 main ] stop
									 */

									/**
									 * [tMap_8 process_data_begin ] start
									 */

									currentComponent = "tMap_8";

									/**
									 * [tMap_8 process_data_begin ] stop
									 */
// Start of branch "copyOfcopyOfdepartures"
									if (copyOfcopyOfdepartures != null) {

										/**
										 * [tDBOutput_5 main ] start
										 */

										currentComponent = "tDBOutput_5";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "copyOfcopyOfdepartures"

											);
										}

										whetherReject_tDBOutput_5 = false;
										if (copyOfcopyOfdepartures.flight_number == null) {
											pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_5.setString(1, copyOfcopyOfdepartures.flight_number);
										}

										int checkCount_tDBOutput_5 = -1;
										try (java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery()) {
											while (rs_tDBOutput_5.next()) {
												checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
											}
										}
										if (checkCount_tDBOutput_5 > 0) {
											if (copyOfcopyOfdepartures.flight_alternative == null) {
												pstmtUpdate_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(1,
														copyOfcopyOfdepartures.flight_alternative);
											}

											if (copyOfcopyOfdepartures.status_text == null) {
												pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(2,
														copyOfcopyOfdepartures.status_text);
											}

											if (copyOfcopyOfdepartures.status_live == null) {
												pstmtUpdate_tDBOutput_5.setNull(3, java.sql.Types.BOOLEAN);
											} else {
												pstmtUpdate_tDBOutput_5.setBoolean(3,
														copyOfcopyOfdepartures.status_live);
											}

											if (copyOfcopyOfdepartures.status_color == null) {
												pstmtUpdate_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(4,
														copyOfcopyOfdepartures.status_color);
											}

											if (copyOfcopyOfdepartures.aircraft_code == null) {
												pstmtUpdate_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(5,
														copyOfcopyOfdepartures.aircraft_code);
											}

											if (copyOfcopyOfdepartures.aircraft_text == null) {
												pstmtUpdate_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(6,
														copyOfcopyOfdepartures.aircraft_text);
											}

											if (copyOfcopyOfdepartures.aircraft_hex == null) {
												pstmtUpdate_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(7,
														copyOfcopyOfdepartures.aircraft_hex);
											}

											if (copyOfcopyOfdepartures.aircraft_registration == null) {
												pstmtUpdate_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(8,
														copyOfcopyOfdepartures.aircraft_registration);
											}

											if (copyOfcopyOfdepartures.airline_name == null) {
												pstmtUpdate_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(9,
														copyOfcopyOfdepartures.airline_name);
											}

											if (copyOfcopyOfdepartures.airline_iata == null) {
												pstmtUpdate_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(10,
														copyOfcopyOfdepartures.airline_iata);
											}

											if (copyOfcopyOfdepartures.airline_icao == null) {
												pstmtUpdate_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(11,
														copyOfcopyOfdepartures.airline_icao);
											}

											if (copyOfcopyOfdepartures.airline_short == null) {
												pstmtUpdate_tDBOutput_5.setNull(12, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(12,
														copyOfcopyOfdepartures.airline_short);
											}

											if (copyOfcopyOfdepartures.origin_iata == null) {
												pstmtUpdate_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(13,
														copyOfcopyOfdepartures.origin_iata);
											}

											if (copyOfcopyOfdepartures.origin_icao == null) {
												pstmtUpdate_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(14,
														copyOfcopyOfdepartures.origin_icao);
											}

											if (copyOfcopyOfdepartures.origin_name == null) {
												pstmtUpdate_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(15,
														copyOfcopyOfdepartures.origin_name);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(16,
													copyOfcopyOfdepartures.origin_latitude);

											pstmtUpdate_tDBOutput_5.setBigDecimal(17,
													copyOfcopyOfdepartures.origin_longitude);

											if (copyOfcopyOfdepartures.origin_country == null) {
												pstmtUpdate_tDBOutput_5.setNull(18, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(18,
														copyOfcopyOfdepartures.origin_country);
											}

											if (copyOfcopyOfdepartures.origin_country_code == null) {
												pstmtUpdate_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(19,
														copyOfcopyOfdepartures.origin_country_code);
											}

											if (copyOfcopyOfdepartures.origin_city == null) {
												pstmtUpdate_tDBOutput_5.setNull(20, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(20,
														copyOfcopyOfdepartures.origin_city);
											}

											if (copyOfcopyOfdepartures.origin_timezone == null) {
												pstmtUpdate_tDBOutput_5.setNull(21, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(21,
														copyOfcopyOfdepartures.origin_timezone);
											}

											if (copyOfcopyOfdepartures.origin_timezone_offset == null) {
												pstmtUpdate_tDBOutput_5.setNull(22, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(22,
														copyOfcopyOfdepartures.origin_timezone_offset);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(23,
													copyOfcopyOfdepartures.origin_avg_rating);

											if (copyOfcopyOfdepartures.origin_total_ratings == null) {
												pstmtUpdate_tDBOutput_5.setNull(24, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(24,
														copyOfcopyOfdepartures.origin_total_ratings);
											}

											if (copyOfcopyOfdepartures.origin_reviews_count == null) {
												pstmtUpdate_tDBOutput_5.setNull(25, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(25,
														copyOfcopyOfdepartures.origin_reviews_count);
											}

											if (copyOfcopyOfdepartures.origin_evaluation_score == null) {
												pstmtUpdate_tDBOutput_5.setNull(26, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(26,
														copyOfcopyOfdepartures.origin_evaluation_score);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(27,
													copyOfcopyOfdepartures.origin_arrivals_delay_index);

											if (copyOfcopyOfdepartures.origin_arrivals_delay_avg == null) {
												pstmtUpdate_tDBOutput_5.setNull(28, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(28,
														copyOfcopyOfdepartures.origin_arrivals_delay_avg);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(29,
													copyOfcopyOfdepartures.origin_departures_delay_index);

											if (copyOfcopyOfdepartures.origin_departures_delay_avg == null) {
												pstmtUpdate_tDBOutput_5.setNull(30, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(30,
														copyOfcopyOfdepartures.origin_departures_delay_avg);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(31,
													copyOfcopyOfdepartures.origin_arrivals_today_pct_delayed);

											pstmtUpdate_tDBOutput_5.setBigDecimal(32,
													copyOfcopyOfdepartures.origin_departures_today_pct_delayed);

											pstmtUpdate_tDBOutput_5.setBigDecimal(33,
													copyOfcopyOfdepartures.origin_arrivals_today_pct_canceled);

											pstmtUpdate_tDBOutput_5.setBigDecimal(34,
													copyOfcopyOfdepartures.origin_departures_today_pct_canceled);

											if (copyOfcopyOfdepartures.destination_iata == null) {
												pstmtUpdate_tDBOutput_5.setNull(35, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(35,
														copyOfcopyOfdepartures.destination_iata);
											}

											if (copyOfcopyOfdepartures.destination_icao == null) {
												pstmtUpdate_tDBOutput_5.setNull(36, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(36,
														copyOfcopyOfdepartures.destination_icao);
											}

											if (copyOfcopyOfdepartures.destination_name == null) {
												pstmtUpdate_tDBOutput_5.setNull(37, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(37,
														copyOfcopyOfdepartures.destination_name);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(38,
													copyOfcopyOfdepartures.destination_latitude);

											pstmtUpdate_tDBOutput_5.setBigDecimal(39,
													copyOfcopyOfdepartures.destination_longitude);

											if (copyOfcopyOfdepartures.destination_country == null) {
												pstmtUpdate_tDBOutput_5.setNull(40, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(40,
														copyOfcopyOfdepartures.destination_country);
											}

											if (copyOfcopyOfdepartures.destination_country_code == null) {
												pstmtUpdate_tDBOutput_5.setNull(41, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(41,
														copyOfcopyOfdepartures.destination_country_code);
											}

											if (copyOfcopyOfdepartures.destination_city == null) {
												pstmtUpdate_tDBOutput_5.setNull(42, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(42,
														copyOfcopyOfdepartures.destination_city);
											}

											if (copyOfcopyOfdepartures.destination_timezone == null) {
												pstmtUpdate_tDBOutput_5.setNull(43, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(43,
														copyOfcopyOfdepartures.destination_timezone);
											}

											if (copyOfcopyOfdepartures.destination_timezone_offset == null) {
												pstmtUpdate_tDBOutput_5.setNull(44, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(44,
														copyOfcopyOfdepartures.destination_timezone_offset);
											}

											if (copyOfcopyOfdepartures.destination_visible == null) {
												pstmtUpdate_tDBOutput_5.setNull(45, java.sql.Types.BOOLEAN);
											} else {
												pstmtUpdate_tDBOutput_5.setBoolean(45,
														copyOfcopyOfdepartures.destination_visible);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(46,
													copyOfcopyOfdepartures.destination_avg_rating);

											if (copyOfcopyOfdepartures.destination_total_ratings == null) {
												pstmtUpdate_tDBOutput_5.setNull(47, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(47,
														copyOfcopyOfdepartures.destination_total_ratings);
											}

											if (copyOfcopyOfdepartures.destination_reviews_count == null) {
												pstmtUpdate_tDBOutput_5.setNull(48, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(48,
														copyOfcopyOfdepartures.destination_reviews_count);
											}

											if (copyOfcopyOfdepartures.destination_evaluation_score == null) {
												pstmtUpdate_tDBOutput_5.setNull(49, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(49,
														copyOfcopyOfdepartures.destination_evaluation_score);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(50,
													copyOfcopyOfdepartures.destination_arrivals_delay_index);

											if (copyOfcopyOfdepartures.destination_arrivals_delay_avg == null) {
												pstmtUpdate_tDBOutput_5.setNull(51, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(51,
														copyOfcopyOfdepartures.destination_arrivals_delay_avg);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(52,
													copyOfcopyOfdepartures.destination_departures_delay_index);

											if (copyOfcopyOfdepartures.destination_departures_delay_avg == null) {
												pstmtUpdate_tDBOutput_5.setNull(53, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setInt(53,
														copyOfcopyOfdepartures.destination_departures_delay_avg);
											}

											pstmtUpdate_tDBOutput_5.setBigDecimal(54,
													copyOfcopyOfdepartures.destination_arrivals_today_pct_delayed);

											pstmtUpdate_tDBOutput_5.setBigDecimal(55,
													copyOfcopyOfdepartures.destination_departures_today_pct_delayed);

											pstmtUpdate_tDBOutput_5.setBigDecimal(56,
													copyOfcopyOfdepartures.destination_arrivals_today_pct_canceled);

											pstmtUpdate_tDBOutput_5.setBigDecimal(57,
													copyOfcopyOfdepartures.destination_departures_today_pct_canceled);

											if (copyOfcopyOfdepartures.scheduled_departure == null) {
												pstmtUpdate_tDBOutput_5.setNull(58, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setLong(58,
														copyOfcopyOfdepartures.scheduled_departure);
											}

											if (copyOfcopyOfdepartures.scheduled_arrival == null) {
												pstmtUpdate_tDBOutput_5.setNull(59, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setLong(59,
														copyOfcopyOfdepartures.scheduled_arrival);
											}

											if (copyOfcopyOfdepartures.real_departure == null) {
												pstmtUpdate_tDBOutput_5.setNull(60, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setLong(60,
														copyOfcopyOfdepartures.real_departure);
											}

											if (copyOfcopyOfdepartures.real_arrival == null) {
												pstmtUpdate_tDBOutput_5.setNull(61, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setLong(61,
														copyOfcopyOfdepartures.real_arrival);
											}

											if (copyOfcopyOfdepartures.estimated_departure == null) {
												pstmtUpdate_tDBOutput_5.setNull(62, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setLong(62,
														copyOfcopyOfdepartures.estimated_departure);
											}

											if (copyOfcopyOfdepartures.estimated_arrival == null) {
												pstmtUpdate_tDBOutput_5.setNull(63, java.sql.Types.INTEGER);
											} else {
												pstmtUpdate_tDBOutput_5.setLong(63,
														copyOfcopyOfdepartures.estimated_arrival);
											}

											if (copyOfcopyOfdepartures.type == null) {
												pstmtUpdate_tDBOutput_5.setNull(64, java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(64, copyOfcopyOfdepartures.type);
											}

											if (copyOfcopyOfdepartures.flight_number == null) {
												pstmtUpdate_tDBOutput_5.setNull(65 + count_tDBOutput_5,
														java.sql.Types.VARCHAR);
											} else {
												pstmtUpdate_tDBOutput_5.setString(65 + count_tDBOutput_5,
														copyOfcopyOfdepartures.flight_number);
											}

											try {
												int processedCount_tDBOutput_5 = pstmtUpdate_tDBOutput_5
														.executeUpdate();
												updatedCount_tDBOutput_5 += processedCount_tDBOutput_5;
												rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
												nb_line_tDBOutput_5++;
											} catch (java.lang.Exception e) {
												globalMap.put("tDBOutput_5_ERROR_MESSAGE", e.getMessage());
												whetherReject_tDBOutput_5 = true;
												nb_line_tDBOutput_5++;
												System.err.print(e.getMessage());
											}
										} else {
											if (copyOfcopyOfdepartures.flight_number == null) {
												pstmtInsert_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(1,
														copyOfcopyOfdepartures.flight_number);
											}

											if (copyOfcopyOfdepartures.flight_alternative == null) {
												pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(2,
														copyOfcopyOfdepartures.flight_alternative);
											}

											if (copyOfcopyOfdepartures.status_text == null) {
												pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(3,
														copyOfcopyOfdepartures.status_text);
											}

											if (copyOfcopyOfdepartures.status_live == null) {
												pstmtInsert_tDBOutput_5.setNull(4, java.sql.Types.BOOLEAN);
											} else {
												pstmtInsert_tDBOutput_5.setBoolean(4,
														copyOfcopyOfdepartures.status_live);
											}

											if (copyOfcopyOfdepartures.status_color == null) {
												pstmtInsert_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(5,
														copyOfcopyOfdepartures.status_color);
											}

											if (copyOfcopyOfdepartures.aircraft_code == null) {
												pstmtInsert_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(6,
														copyOfcopyOfdepartures.aircraft_code);
											}

											if (copyOfcopyOfdepartures.aircraft_text == null) {
												pstmtInsert_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(7,
														copyOfcopyOfdepartures.aircraft_text);
											}

											if (copyOfcopyOfdepartures.aircraft_hex == null) {
												pstmtInsert_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(8,
														copyOfcopyOfdepartures.aircraft_hex);
											}

											if (copyOfcopyOfdepartures.aircraft_registration == null) {
												pstmtInsert_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(9,
														copyOfcopyOfdepartures.aircraft_registration);
											}

											if (copyOfcopyOfdepartures.airline_name == null) {
												pstmtInsert_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(10,
														copyOfcopyOfdepartures.airline_name);
											}

											if (copyOfcopyOfdepartures.airline_iata == null) {
												pstmtInsert_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(11,
														copyOfcopyOfdepartures.airline_iata);
											}

											if (copyOfcopyOfdepartures.airline_icao == null) {
												pstmtInsert_tDBOutput_5.setNull(12, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(12,
														copyOfcopyOfdepartures.airline_icao);
											}

											if (copyOfcopyOfdepartures.airline_short == null) {
												pstmtInsert_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(13,
														copyOfcopyOfdepartures.airline_short);
											}

											if (copyOfcopyOfdepartures.origin_iata == null) {
												pstmtInsert_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(14,
														copyOfcopyOfdepartures.origin_iata);
											}

											if (copyOfcopyOfdepartures.origin_icao == null) {
												pstmtInsert_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(15,
														copyOfcopyOfdepartures.origin_icao);
											}

											if (copyOfcopyOfdepartures.origin_name == null) {
												pstmtInsert_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(16,
														copyOfcopyOfdepartures.origin_name);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(17,
													copyOfcopyOfdepartures.origin_latitude);

											pstmtInsert_tDBOutput_5.setBigDecimal(18,
													copyOfcopyOfdepartures.origin_longitude);

											if (copyOfcopyOfdepartures.origin_country == null) {
												pstmtInsert_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(19,
														copyOfcopyOfdepartures.origin_country);
											}

											if (copyOfcopyOfdepartures.origin_country_code == null) {
												pstmtInsert_tDBOutput_5.setNull(20, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(20,
														copyOfcopyOfdepartures.origin_country_code);
											}

											if (copyOfcopyOfdepartures.origin_city == null) {
												pstmtInsert_tDBOutput_5.setNull(21, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(21,
														copyOfcopyOfdepartures.origin_city);
											}

											if (copyOfcopyOfdepartures.origin_timezone == null) {
												pstmtInsert_tDBOutput_5.setNull(22, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(22,
														copyOfcopyOfdepartures.origin_timezone);
											}

											if (copyOfcopyOfdepartures.origin_timezone_offset == null) {
												pstmtInsert_tDBOutput_5.setNull(23, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(23,
														copyOfcopyOfdepartures.origin_timezone_offset);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(24,
													copyOfcopyOfdepartures.origin_avg_rating);

											if (copyOfcopyOfdepartures.origin_total_ratings == null) {
												pstmtInsert_tDBOutput_5.setNull(25, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(25,
														copyOfcopyOfdepartures.origin_total_ratings);
											}

											if (copyOfcopyOfdepartures.origin_reviews_count == null) {
												pstmtInsert_tDBOutput_5.setNull(26, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(26,
														copyOfcopyOfdepartures.origin_reviews_count);
											}

											if (copyOfcopyOfdepartures.origin_evaluation_score == null) {
												pstmtInsert_tDBOutput_5.setNull(27, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(27,
														copyOfcopyOfdepartures.origin_evaluation_score);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(28,
													copyOfcopyOfdepartures.origin_arrivals_delay_index);

											if (copyOfcopyOfdepartures.origin_arrivals_delay_avg == null) {
												pstmtInsert_tDBOutput_5.setNull(29, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(29,
														copyOfcopyOfdepartures.origin_arrivals_delay_avg);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(30,
													copyOfcopyOfdepartures.origin_departures_delay_index);

											if (copyOfcopyOfdepartures.origin_departures_delay_avg == null) {
												pstmtInsert_tDBOutput_5.setNull(31, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(31,
														copyOfcopyOfdepartures.origin_departures_delay_avg);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(32,
													copyOfcopyOfdepartures.origin_arrivals_today_pct_delayed);

											pstmtInsert_tDBOutput_5.setBigDecimal(33,
													copyOfcopyOfdepartures.origin_departures_today_pct_delayed);

											pstmtInsert_tDBOutput_5.setBigDecimal(34,
													copyOfcopyOfdepartures.origin_arrivals_today_pct_canceled);

											pstmtInsert_tDBOutput_5.setBigDecimal(35,
													copyOfcopyOfdepartures.origin_departures_today_pct_canceled);

											if (copyOfcopyOfdepartures.destination_iata == null) {
												pstmtInsert_tDBOutput_5.setNull(36, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(36,
														copyOfcopyOfdepartures.destination_iata);
											}

											if (copyOfcopyOfdepartures.destination_icao == null) {
												pstmtInsert_tDBOutput_5.setNull(37, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(37,
														copyOfcopyOfdepartures.destination_icao);
											}

											if (copyOfcopyOfdepartures.destination_name == null) {
												pstmtInsert_tDBOutput_5.setNull(38, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(38,
														copyOfcopyOfdepartures.destination_name);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(39,
													copyOfcopyOfdepartures.destination_latitude);

											pstmtInsert_tDBOutput_5.setBigDecimal(40,
													copyOfcopyOfdepartures.destination_longitude);

											if (copyOfcopyOfdepartures.destination_country == null) {
												pstmtInsert_tDBOutput_5.setNull(41, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(41,
														copyOfcopyOfdepartures.destination_country);
											}

											if (copyOfcopyOfdepartures.destination_country_code == null) {
												pstmtInsert_tDBOutput_5.setNull(42, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(42,
														copyOfcopyOfdepartures.destination_country_code);
											}

											if (copyOfcopyOfdepartures.destination_city == null) {
												pstmtInsert_tDBOutput_5.setNull(43, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(43,
														copyOfcopyOfdepartures.destination_city);
											}

											if (copyOfcopyOfdepartures.destination_timezone == null) {
												pstmtInsert_tDBOutput_5.setNull(44, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(44,
														copyOfcopyOfdepartures.destination_timezone);
											}

											if (copyOfcopyOfdepartures.destination_timezone_offset == null) {
												pstmtInsert_tDBOutput_5.setNull(45, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(45,
														copyOfcopyOfdepartures.destination_timezone_offset);
											}

											if (copyOfcopyOfdepartures.destination_visible == null) {
												pstmtInsert_tDBOutput_5.setNull(46, java.sql.Types.BOOLEAN);
											} else {
												pstmtInsert_tDBOutput_5.setBoolean(46,
														copyOfcopyOfdepartures.destination_visible);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(47,
													copyOfcopyOfdepartures.destination_avg_rating);

											if (copyOfcopyOfdepartures.destination_total_ratings == null) {
												pstmtInsert_tDBOutput_5.setNull(48, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(48,
														copyOfcopyOfdepartures.destination_total_ratings);
											}

											if (copyOfcopyOfdepartures.destination_reviews_count == null) {
												pstmtInsert_tDBOutput_5.setNull(49, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(49,
														copyOfcopyOfdepartures.destination_reviews_count);
											}

											if (copyOfcopyOfdepartures.destination_evaluation_score == null) {
												pstmtInsert_tDBOutput_5.setNull(50, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(50,
														copyOfcopyOfdepartures.destination_evaluation_score);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(51,
													copyOfcopyOfdepartures.destination_arrivals_delay_index);

											if (copyOfcopyOfdepartures.destination_arrivals_delay_avg == null) {
												pstmtInsert_tDBOutput_5.setNull(52, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(52,
														copyOfcopyOfdepartures.destination_arrivals_delay_avg);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(53,
													copyOfcopyOfdepartures.destination_departures_delay_index);

											if (copyOfcopyOfdepartures.destination_departures_delay_avg == null) {
												pstmtInsert_tDBOutput_5.setNull(54, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setInt(54,
														copyOfcopyOfdepartures.destination_departures_delay_avg);
											}

											pstmtInsert_tDBOutput_5.setBigDecimal(55,
													copyOfcopyOfdepartures.destination_arrivals_today_pct_delayed);

											pstmtInsert_tDBOutput_5.setBigDecimal(56,
													copyOfcopyOfdepartures.destination_departures_today_pct_delayed);

											pstmtInsert_tDBOutput_5.setBigDecimal(57,
													copyOfcopyOfdepartures.destination_arrivals_today_pct_canceled);

											pstmtInsert_tDBOutput_5.setBigDecimal(58,
													copyOfcopyOfdepartures.destination_departures_today_pct_canceled);

											if (copyOfcopyOfdepartures.scheduled_departure == null) {
												pstmtInsert_tDBOutput_5.setNull(59, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setLong(59,
														copyOfcopyOfdepartures.scheduled_departure);
											}

											if (copyOfcopyOfdepartures.scheduled_arrival == null) {
												pstmtInsert_tDBOutput_5.setNull(60, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setLong(60,
														copyOfcopyOfdepartures.scheduled_arrival);
											}

											if (copyOfcopyOfdepartures.real_departure == null) {
												pstmtInsert_tDBOutput_5.setNull(61, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setLong(61,
														copyOfcopyOfdepartures.real_departure);
											}

											if (copyOfcopyOfdepartures.real_arrival == null) {
												pstmtInsert_tDBOutput_5.setNull(62, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setLong(62,
														copyOfcopyOfdepartures.real_arrival);
											}

											if (copyOfcopyOfdepartures.estimated_departure == null) {
												pstmtInsert_tDBOutput_5.setNull(63, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setLong(63,
														copyOfcopyOfdepartures.estimated_departure);
											}

											if (copyOfcopyOfdepartures.estimated_arrival == null) {
												pstmtInsert_tDBOutput_5.setNull(64, java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tDBOutput_5.setLong(64,
														copyOfcopyOfdepartures.estimated_arrival);
											}

											if (copyOfcopyOfdepartures.type == null) {
												pstmtInsert_tDBOutput_5.setNull(65, java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tDBOutput_5.setString(65, copyOfcopyOfdepartures.type);
											}

											try {
												int processedCount_tDBOutput_5 = pstmtInsert_tDBOutput_5
														.executeUpdate();
												insertedCount_tDBOutput_5 += processedCount_tDBOutput_5;
												rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
												nb_line_tDBOutput_5++;
											} catch (java.lang.Exception e) {
												globalMap.put("tDBOutput_5_ERROR_MESSAGE", e.getMessage());
												whetherReject_tDBOutput_5 = true;
												nb_line_tDBOutput_5++;
												System.err.print(e.getMessage());
											}
										}
										if (!whetherReject_tDBOutput_5) {
										}
										commitCounter_tDBOutput_5++;

										if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

											if (rowsToCommitCount_tDBOutput_5 != 0) {
											}
											conn_tDBOutput_5.commit();
											if (rowsToCommitCount_tDBOutput_5 != 0) {
												rowsToCommitCount_tDBOutput_5 = 0;
											}
											commitCounter_tDBOutput_5 = 0;

										}

										tos_count_tDBOutput_5++;

										/**
										 * [tDBOutput_5 main ] stop
										 */

										/**
										 * [tDBOutput_5 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_5";

										/**
										 * [tDBOutput_5 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_5 process_data_end ] start
										 */

										currentComponent = "tDBOutput_5";

										/**
										 * [tDBOutput_5 process_data_end ] stop
										 */

									} // End of branch "copyOfcopyOfdepartures"

									/**
									 * [tMap_8 process_data_end ] start
									 */

									currentComponent = "tMap_8";

									/**
									 * [tMap_8 process_data_end ] stop
									 */

								} // End of branch "row28"

								/**
								 * [tUniqRow_8 process_data_end ] start
								 */

								currentComponent = "tUniqRow_8";

								/**
								 * [tUniqRow_8 process_data_end ] stop
								 */

							} // End of branch "row26"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_8 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_8";

					/**
					 * [tExtractJSONFields_8 process_data_end ] stop
					 */

					/**
					 * [tSleep_3 process_data_end ] start
					 */

					currentComponent = "tSleep_3";

					/**
					 * [tSleep_3 process_data_end ] stop
					 */

				} // End of branch "copyOfcopyOfFlight_departures"

				/**
				 * [tMap_7 process_data_end ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 process_data_end ] stop
				 */

				/**
				 * [tREST_5 process_data_end ] start
				 */

				currentComponent = "tREST_5";

				/**
				 * [tREST_5 process_data_end ] stop
				 */

				/**
				 * [tREST_5 end ] start
				 */

				currentComponent = "tREST_5";

				ok_Hash.put("tREST_5", true);
				end_Hash.put("tREST_5", System.currentTimeMillis());

				/**
				 * [tREST_5 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tExtractJSONFields_7 end ] start
				 */

				currentComponent = "tExtractJSONFields_7";

				globalMap.put("tExtractJSONFields_7_NB_LINE", nb_line_tExtractJSONFields_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfAirport_details");
				}

				ok_Hash.put("tExtractJSONFields_7", true);
				end_Hash.put("tExtractJSONFields_7", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_7 end ] stop
				 */

				/**
				 * [tUniqRow_7 end ] start
				 */

				currentComponent = "tUniqRow_7";

				globalMap.put("tUniqRow_7_NB_UNIQUES", nb_uniques_tUniqRow_7);
				globalMap.put("tUniqRow_7_NB_DUPLICATES", nb_duplicates_tUniqRow_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tUniqRow_7", true);
				end_Hash.put("tUniqRow_7", System.currentTimeMillis());

				/**
				 * [tUniqRow_7 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tSleep_3 end ] start
				 */

				currentComponent = "tSleep_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfFlight_departures");
				}

				ok_Hash.put("tSleep_3", true);
				end_Hash.put("tSleep_3", System.currentTimeMillis());

				/**
				 * [tSleep_3 end ] stop
				 */

				/**
				 * [tExtractJSONFields_8 end ] start
				 */

				currentComponent = "tExtractJSONFields_8";

				globalMap.put("tExtractJSONFields_7_NB_LINE", nb_line_tExtractJSONFields_8);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tExtractJSONFields_8", true);
				end_Hash.put("tExtractJSONFields_8", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_8 end ] stop
				 */

				/**
				 * [tUniqRow_8 end ] start
				 */

				currentComponent = "tUniqRow_8";

				globalMap.put("tUniqRow_8_NB_UNIQUES", nb_uniques_tUniqRow_8);
				globalMap.put("tUniqRow_8_NB_DUPLICATES", nb_duplicates_tUniqRow_8);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tUniqRow_8", true);
				end_Hash.put("tUniqRow_8", System.currentTimeMillis());

				/**
				 * [tUniqRow_8 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (pstmtUpdate_tDBOutput_5 != null) {
					pstmtUpdate_tDBOutput_5.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_5");
				}
				if (pstmtInsert_tDBOutput_5 != null) {
					pstmtInsert_tDBOutput_5.close();
					resourceMap.remove("pstmtInsert_tDBOutput_5");
				}
				if (pstmt_tDBOutput_5 != null) {
					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				if (commitCounter_tDBOutput_5 > 0 && rowsToCommitCount_tDBOutput_5 != 0) {

				}
				conn_tDBOutput_5.commit();
				if (commitCounter_tDBOutput_5 > 0 && rowsToCommitCount_tDBOutput_5 != 0) {

					rowsToCommitCount_tDBOutput_5 = 0;
				}
				commitCounter_tDBOutput_5 = 0;

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfdepartures");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tREST_6Process(globalMap);

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_5 finally ] start
				 */

				currentComponent = "tREST_5";

				/**
				 * [tREST_5 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_7 finally ] start
				 */

				currentComponent = "tExtractJSONFields_7";

				/**
				 * [tExtractJSONFields_7 finally ] stop
				 */

				/**
				 * [tUniqRow_7 finally ] start
				 */

				currentComponent = "tUniqRow_7";

				/**
				 * [tUniqRow_7 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tSleep_3 finally ] start
				 */

				currentComponent = "tSleep_3";

				/**
				 * [tSleep_3 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_8 finally ] start
				 */

				currentComponent = "tExtractJSONFields_8";

				/**
				 * [tExtractJSONFields_8 finally ] stop
				 */

				/**
				 * [tUniqRow_8 finally ] start
				 */

				currentComponent = "tUniqRow_8";

				/**
				 * [tUniqRow_8 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
						if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_5")) != null) {
							pstmtUpdateToClose_tDBOutput_5.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
						if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_5")) != null) {
							pstmtInsertToClose_tDBOutput_5.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_5_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfarrivalsStruct
			implements routines.system.IPersistableRow<copyOfcopyOfarrivalsStruct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public BigDecimal origin_avg_rating;

		public BigDecimal getOrigin_avg_rating() {
			return this.origin_avg_rating;
		}

		public Integer origin_total_ratings;

		public Integer getOrigin_total_ratings() {
			return this.origin_total_ratings;
		}

		public Integer origin_reviews_count;

		public Integer getOrigin_reviews_count() {
			return this.origin_reviews_count;
		}

		public Integer origin_evaluation_score;

		public Integer getOrigin_evaluation_score() {
			return this.origin_evaluation_score;
		}

		public BigDecimal origin_arrivals_delay_index;

		public BigDecimal getOrigin_arrivals_delay_index() {
			return this.origin_arrivals_delay_index;
		}

		public Integer origin_arrivals_delay_avg;

		public Integer getOrigin_arrivals_delay_avg() {
			return this.origin_arrivals_delay_avg;
		}

		public BigDecimal origin_departures_delay_index;

		public BigDecimal getOrigin_departures_delay_index() {
			return this.origin_departures_delay_index;
		}

		public Integer origin_departures_delay_avg;

		public Integer getOrigin_departures_delay_avg() {
			return this.origin_departures_delay_avg;
		}

		public BigDecimal origin_arrivals_today_pct_delayed;

		public BigDecimal getOrigin_arrivals_today_pct_delayed() {
			return this.origin_arrivals_today_pct_delayed;
		}

		public BigDecimal origin_departures_today_pct_delayed;

		public BigDecimal getOrigin_departures_today_pct_delayed() {
			return this.origin_departures_today_pct_delayed;
		}

		public BigDecimal origin_arrivals_today_pct_canceled;

		public BigDecimal getOrigin_arrivals_today_pct_canceled() {
			return this.origin_arrivals_today_pct_canceled;
		}

		public BigDecimal origin_departures_today_pct_canceled;

		public BigDecimal getOrigin_departures_today_pct_canceled() {
			return this.origin_departures_today_pct_canceled;
		}

		public String destination_iata;

		public String getDestination_iata() {
			return this.destination_iata;
		}

		public String destination_icao;

		public String getDestination_icao() {
			return this.destination_icao;
		}

		public String destination_name;

		public String getDestination_name() {
			return this.destination_name;
		}

		public BigDecimal destination_latitude;

		public BigDecimal getDestination_latitude() {
			return this.destination_latitude;
		}

		public BigDecimal destination_longitude;

		public BigDecimal getDestination_longitude() {
			return this.destination_longitude;
		}

		public String destination_country;

		public String getDestination_country() {
			return this.destination_country;
		}

		public String destination_country_code;

		public String getDestination_country_code() {
			return this.destination_country_code;
		}

		public String destination_city;

		public String getDestination_city() {
			return this.destination_city;
		}

		public String destination_timezone;

		public String getDestination_timezone() {
			return this.destination_timezone;
		}

		public Integer destination_timezone_offset;

		public Integer getDestination_timezone_offset() {
			return this.destination_timezone_offset;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		public BigDecimal destination_avg_rating;

		public BigDecimal getDestination_avg_rating() {
			return this.destination_avg_rating;
		}

		public Integer destination_total_ratings;

		public Integer getDestination_total_ratings() {
			return this.destination_total_ratings;
		}

		public Integer destination_reviews_count;

		public Integer getDestination_reviews_count() {
			return this.destination_reviews_count;
		}

		public Integer destination_evaluation_score;

		public Integer getDestination_evaluation_score() {
			return this.destination_evaluation_score;
		}

		public BigDecimal destination_arrivals_delay_index;

		public BigDecimal getDestination_arrivals_delay_index() {
			return this.destination_arrivals_delay_index;
		}

		public Integer destination_arrivals_delay_avg;

		public Integer getDestination_arrivals_delay_avg() {
			return this.destination_arrivals_delay_avg;
		}

		public BigDecimal destination_departures_delay_index;

		public BigDecimal getDestination_departures_delay_index() {
			return this.destination_departures_delay_index;
		}

		public Integer destination_departures_delay_avg;

		public Integer getDestination_departures_delay_avg() {
			return this.destination_departures_delay_avg;
		}

		public BigDecimal destination_arrivals_today_pct_delayed;

		public BigDecimal getDestination_arrivals_today_pct_delayed() {
			return this.destination_arrivals_today_pct_delayed;
		}

		public BigDecimal destination_departures_today_pct_delayed;

		public BigDecimal getDestination_departures_today_pct_delayed() {
			return this.destination_departures_today_pct_delayed;
		}

		public BigDecimal destination_arrivals_today_pct_canceled;

		public BigDecimal getDestination_arrivals_today_pct_canceled() {
			return this.destination_arrivals_today_pct_canceled;
		}

		public BigDecimal destination_departures_today_pct_canceled;

		public BigDecimal getDestination_departures_today_pct_canceled() {
			return this.destination_departures_today_pct_canceled;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_number == null) ? 0 : this.flight_number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfarrivalsStruct other = (copyOfcopyOfarrivalsStruct) obj;

			if (this.flight_number == null) {
				if (other.flight_number != null)
					return false;

			} else if (!this.flight_number.equals(other.flight_number))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfarrivalsStruct other) {

			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.origin_avg_rating = this.origin_avg_rating;
			other.origin_total_ratings = this.origin_total_ratings;
			other.origin_reviews_count = this.origin_reviews_count;
			other.origin_evaluation_score = this.origin_evaluation_score;
			other.origin_arrivals_delay_index = this.origin_arrivals_delay_index;
			other.origin_arrivals_delay_avg = this.origin_arrivals_delay_avg;
			other.origin_departures_delay_index = this.origin_departures_delay_index;
			other.origin_departures_delay_avg = this.origin_departures_delay_avg;
			other.origin_arrivals_today_pct_delayed = this.origin_arrivals_today_pct_delayed;
			other.origin_departures_today_pct_delayed = this.origin_departures_today_pct_delayed;
			other.origin_arrivals_today_pct_canceled = this.origin_arrivals_today_pct_canceled;
			other.origin_departures_today_pct_canceled = this.origin_departures_today_pct_canceled;
			other.destination_iata = this.destination_iata;
			other.destination_icao = this.destination_icao;
			other.destination_name = this.destination_name;
			other.destination_latitude = this.destination_latitude;
			other.destination_longitude = this.destination_longitude;
			other.destination_country = this.destination_country;
			other.destination_country_code = this.destination_country_code;
			other.destination_city = this.destination_city;
			other.destination_timezone = this.destination_timezone;
			other.destination_timezone_offset = this.destination_timezone_offset;
			other.destination_visible = this.destination_visible;
			other.destination_avg_rating = this.destination_avg_rating;
			other.destination_total_ratings = this.destination_total_ratings;
			other.destination_reviews_count = this.destination_reviews_count;
			other.destination_evaluation_score = this.destination_evaluation_score;
			other.destination_arrivals_delay_index = this.destination_arrivals_delay_index;
			other.destination_arrivals_delay_avg = this.destination_arrivals_delay_avg;
			other.destination_departures_delay_index = this.destination_departures_delay_index;
			other.destination_departures_delay_avg = this.destination_departures_delay_avg;
			other.destination_arrivals_today_pct_delayed = this.destination_arrivals_today_pct_delayed;
			other.destination_departures_today_pct_delayed = this.destination_departures_today_pct_delayed;
			other.destination_arrivals_today_pct_canceled = this.destination_arrivals_today_pct_canceled;
			other.destination_departures_today_pct_canceled = this.destination_departures_today_pct_canceled;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.type = this.type;

		}

		public void copyKeysDataTo(copyOfcopyOfarrivalsStruct other) {

			other.flight_number = this.flight_number;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					this.origin_avg_rating = (BigDecimal) dis.readObject();

					this.origin_total_ratings = readInteger(dis);

					this.origin_reviews_count = readInteger(dis);

					this.origin_evaluation_score = readInteger(dis);

					this.origin_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.origin_arrivals_delay_avg = readInteger(dis);

					this.origin_departures_delay_index = (BigDecimal) dis.readObject();

					this.origin_departures_delay_avg = readInteger(dis);

					this.origin_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.origin_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.origin_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_iata = readString(dis);

					this.destination_icao = readString(dis);

					this.destination_name = readString(dis);

					this.destination_latitude = (BigDecimal) dis.readObject();

					this.destination_longitude = (BigDecimal) dis.readObject();

					this.destination_country = readString(dis);

					this.destination_country_code = readString(dis);

					this.destination_city = readString(dis);

					this.destination_timezone = readString(dis);

					this.destination_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

					this.destination_avg_rating = (BigDecimal) dis.readObject();

					this.destination_total_ratings = readInteger(dis);

					this.destination_reviews_count = readInteger(dis);

					this.destination_evaluation_score = readInteger(dis);

					this.destination_arrivals_delay_index = (BigDecimal) dis.readObject();

					this.destination_arrivals_delay_avg = readInteger(dis);

					this.destination_departures_delay_index = (BigDecimal) dis.readObject();

					this.destination_departures_delay_avg = readInteger(dis);

					this.destination_arrivals_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_delayed = (BigDecimal) dis.readObject();

					this.destination_arrivals_today_pct_canceled = (BigDecimal) dis.readObject();

					this.destination_departures_today_pct_canceled = (BigDecimal) dis.readObject();

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// BigDecimal

				dos.writeObject(this.origin_avg_rating);

				// Integer

				writeInteger(this.origin_total_ratings, dos);

				// Integer

				writeInteger(this.origin_reviews_count, dos);

				// Integer

				writeInteger(this.origin_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_delay_index);

				// Integer

				writeInteger(this.origin_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_departures_delay_index);

				// Integer

				writeInteger(this.origin_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.origin_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.origin_departures_today_pct_canceled);

				// String

				writeString(this.destination_iata, dos);

				// String

				writeString(this.destination_icao, dos);

				// String

				writeString(this.destination_name, dos);

				// BigDecimal

				dos.writeObject(this.destination_latitude);

				// BigDecimal

				dos.writeObject(this.destination_longitude);

				// String

				writeString(this.destination_country, dos);

				// String

				writeString(this.destination_country_code, dos);

				// String

				writeString(this.destination_city, dos);

				// String

				writeString(this.destination_timezone, dos);

				// Integer

				writeInteger(this.destination_timezone_offset, dos);

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

				// BigDecimal

				dos.writeObject(this.destination_avg_rating);

				// Integer

				writeInteger(this.destination_total_ratings, dos);

				// Integer

				writeInteger(this.destination_reviews_count, dos);

				// Integer

				writeInteger(this.destination_evaluation_score, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_delay_index);

				// Integer

				writeInteger(this.destination_arrivals_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_departures_delay_index);

				// Integer

				writeInteger(this.destination_departures_delay_avg, dos);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_delayed);

				// BigDecimal

				dos.writeObject(this.destination_arrivals_today_pct_canceled);

				// BigDecimal

				dos.writeObject(this.destination_departures_today_pct_canceled);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",origin_avg_rating=" + String.valueOf(origin_avg_rating));
			sb.append(",origin_total_ratings=" + String.valueOf(origin_total_ratings));
			sb.append(",origin_reviews_count=" + String.valueOf(origin_reviews_count));
			sb.append(",origin_evaluation_score=" + String.valueOf(origin_evaluation_score));
			sb.append(",origin_arrivals_delay_index=" + String.valueOf(origin_arrivals_delay_index));
			sb.append(",origin_arrivals_delay_avg=" + String.valueOf(origin_arrivals_delay_avg));
			sb.append(",origin_departures_delay_index=" + String.valueOf(origin_departures_delay_index));
			sb.append(",origin_departures_delay_avg=" + String.valueOf(origin_departures_delay_avg));
			sb.append(",origin_arrivals_today_pct_delayed=" + String.valueOf(origin_arrivals_today_pct_delayed));
			sb.append(",origin_departures_today_pct_delayed=" + String.valueOf(origin_departures_today_pct_delayed));
			sb.append(",origin_arrivals_today_pct_canceled=" + String.valueOf(origin_arrivals_today_pct_canceled));
			sb.append(",origin_departures_today_pct_canceled=" + String.valueOf(origin_departures_today_pct_canceled));
			sb.append(",destination_iata=" + destination_iata);
			sb.append(",destination_icao=" + destination_icao);
			sb.append(",destination_name=" + destination_name);
			sb.append(",destination_latitude=" + String.valueOf(destination_latitude));
			sb.append(",destination_longitude=" + String.valueOf(destination_longitude));
			sb.append(",destination_country=" + destination_country);
			sb.append(",destination_country_code=" + destination_country_code);
			sb.append(",destination_city=" + destination_city);
			sb.append(",destination_timezone=" + destination_timezone);
			sb.append(",destination_timezone_offset=" + String.valueOf(destination_timezone_offset));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append(",destination_avg_rating=" + String.valueOf(destination_avg_rating));
			sb.append(",destination_total_ratings=" + String.valueOf(destination_total_ratings));
			sb.append(",destination_reviews_count=" + String.valueOf(destination_reviews_count));
			sb.append(",destination_evaluation_score=" + String.valueOf(destination_evaluation_score));
			sb.append(",destination_arrivals_delay_index=" + String.valueOf(destination_arrivals_delay_index));
			sb.append(",destination_arrivals_delay_avg=" + String.valueOf(destination_arrivals_delay_avg));
			sb.append(",destination_departures_delay_index=" + String.valueOf(destination_departures_delay_index));
			sb.append(",destination_departures_delay_avg=" + String.valueOf(destination_departures_delay_avg));
			sb.append(",destination_arrivals_today_pct_delayed="
					+ String.valueOf(destination_arrivals_today_pct_delayed));
			sb.append(",destination_departures_today_pct_delayed="
					+ String.valueOf(destination_departures_today_pct_delayed));
			sb.append(",destination_arrivals_today_pct_canceled="
					+ String.valueOf(destination_arrivals_today_pct_canceled));
			sb.append(",destination_departures_today_pct_canceled="
					+ String.valueOf(destination_departures_today_pct_canceled));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfarrivalsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_number, other.flight_number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long flight_row_id;

		public Long getFlight_row_id() {
			return this.flight_row_id;
		}

		public String flight_number;

		public String getFlight_number() {
			return this.flight_number;
		}

		public String flight_alternative;

		public String getFlight_alternative() {
			return this.flight_alternative;
		}

		public String status_text;

		public String getStatus_text() {
			return this.status_text;
		}

		public Boolean status_live;

		public Boolean getStatus_live() {
			return this.status_live;
		}

		public String status_color;

		public String getStatus_color() {
			return this.status_color;
		}

		public String aircraft_code;

		public String getAircraft_code() {
			return this.aircraft_code;
		}

		public String aircraft_text;

		public String getAircraft_text() {
			return this.aircraft_text;
		}

		public String aircraft_hex;

		public String getAircraft_hex() {
			return this.aircraft_hex;
		}

		public String aircraft_registration;

		public String getAircraft_registration() {
			return this.aircraft_registration;
		}

		public String airline_name;

		public String getAirline_name() {
			return this.airline_name;
		}

		public String airline_iata;

		public String getAirline_iata() {
			return this.airline_iata;
		}

		public String airline_icao;

		public String getAirline_icao() {
			return this.airline_icao;
		}

		public String airline_short;

		public String getAirline_short() {
			return this.airline_short;
		}

		public String origin_iata;

		public String getOrigin_iata() {
			return this.origin_iata;
		}

		public String origin_icao;

		public String getOrigin_icao() {
			return this.origin_icao;
		}

		public String origin_name;

		public String getOrigin_name() {
			return this.origin_name;
		}

		public BigDecimal origin_latitude;

		public BigDecimal getOrigin_latitude() {
			return this.origin_latitude;
		}

		public BigDecimal origin_longitude;

		public BigDecimal getOrigin_longitude() {
			return this.origin_longitude;
		}

		public String origin_country;

		public String getOrigin_country() {
			return this.origin_country;
		}

		public String origin_country_code;

		public String getOrigin_country_code() {
			return this.origin_country_code;
		}

		public String origin_city;

		public String getOrigin_city() {
			return this.origin_city;
		}

		public String origin_timezone;

		public String getOrigin_timezone() {
			return this.origin_timezone;
		}

		public Integer origin_timezone_offset;

		public Integer getOrigin_timezone_offset() {
			return this.origin_timezone_offset;
		}

		public Long scheduled_departure;

		public Long getScheduled_departure() {
			return this.scheduled_departure;
		}

		public Long scheduled_arrival;

		public Long getScheduled_arrival() {
			return this.scheduled_arrival;
		}

		public Long real_departure;

		public Long getReal_departure() {
			return this.real_departure;
		}

		public Long real_arrival;

		public Long getReal_arrival() {
			return this.real_arrival;
		}

		public Long estimated_departure;

		public Long getEstimated_departure() {
			return this.estimated_departure;
		}

		public Long estimated_arrival;

		public Long getEstimated_arrival() {
			return this.estimated_arrival;
		}

		public Boolean destination_visible;

		public Boolean getDestination_visible() {
			return this.destination_visible;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.flight_row_id == null) {
				if (other.flight_row_id != null)
					return false;

			} else if (!this.flight_row_id.equals(other.flight_row_id))

				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.flight_row_id = this.flight_row_id;
			other.flight_number = this.flight_number;
			other.flight_alternative = this.flight_alternative;
			other.status_text = this.status_text;
			other.status_live = this.status_live;
			other.status_color = this.status_color;
			other.aircraft_code = this.aircraft_code;
			other.aircraft_text = this.aircraft_text;
			other.aircraft_hex = this.aircraft_hex;
			other.aircraft_registration = this.aircraft_registration;
			other.airline_name = this.airline_name;
			other.airline_iata = this.airline_iata;
			other.airline_icao = this.airline_icao;
			other.airline_short = this.airline_short;
			other.origin_iata = this.origin_iata;
			other.origin_icao = this.origin_icao;
			other.origin_name = this.origin_name;
			other.origin_latitude = this.origin_latitude;
			other.origin_longitude = this.origin_longitude;
			other.origin_country = this.origin_country;
			other.origin_country_code = this.origin_country_code;
			other.origin_city = this.origin_city;
			other.origin_timezone = this.origin_timezone;
			other.origin_timezone_offset = this.origin_timezone_offset;
			other.scheduled_departure = this.scheduled_departure;
			other.scheduled_arrival = this.scheduled_arrival;
			other.real_departure = this.real_departure;
			other.real_arrival = this.real_arrival;
			other.estimated_departure = this.estimated_departure;
			other.estimated_arrival = this.estimated_arrival;
			other.destination_visible = this.destination_visible;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.flight_row_id = this.flight_row_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.flight_row_id = null;
					} else {
						this.flight_row_id = dis.readLong();
					}

					this.flight_number = readString(dis);

					this.flight_alternative = readString(dis);

					this.status_text = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status_live = null;
					} else {
						this.status_live = dis.readBoolean();
					}

					this.status_color = readString(dis);

					this.aircraft_code = readString(dis);

					this.aircraft_text = readString(dis);

					this.aircraft_hex = readString(dis);

					this.aircraft_registration = readString(dis);

					this.airline_name = readString(dis);

					this.airline_iata = readString(dis);

					this.airline_icao = readString(dis);

					this.airline_short = readString(dis);

					this.origin_iata = readString(dis);

					this.origin_icao = readString(dis);

					this.origin_name = readString(dis);

					this.origin_latitude = (BigDecimal) dis.readObject();

					this.origin_longitude = (BigDecimal) dis.readObject();

					this.origin_country = readString(dis);

					this.origin_country_code = readString(dis);

					this.origin_city = readString(dis);

					this.origin_timezone = readString(dis);

					this.origin_timezone_offset = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_departure = null;
					} else {
						this.scheduled_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.scheduled_arrival = null;
					} else {
						this.scheduled_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_departure = null;
					} else {
						this.real_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.real_arrival = null;
					} else {
						this.real_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_departure = null;
					} else {
						this.estimated_departure = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.estimated_arrival = null;
					} else {
						this.estimated_arrival = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.destination_visible = null;
					} else {
						this.destination_visible = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.flight_row_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.flight_row_id);
				}

				// String

				writeString(this.flight_number, dos);

				// String

				writeString(this.flight_alternative, dos);

				// String

				writeString(this.status_text, dos);

				// Boolean

				if (this.status_live == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status_live);
				}

				// String

				writeString(this.status_color, dos);

				// String

				writeString(this.aircraft_code, dos);

				// String

				writeString(this.aircraft_text, dos);

				// String

				writeString(this.aircraft_hex, dos);

				// String

				writeString(this.aircraft_registration, dos);

				// String

				writeString(this.airline_name, dos);

				// String

				writeString(this.airline_iata, dos);

				// String

				writeString(this.airline_icao, dos);

				// String

				writeString(this.airline_short, dos);

				// String

				writeString(this.origin_iata, dos);

				// String

				writeString(this.origin_icao, dos);

				// String

				writeString(this.origin_name, dos);

				// BigDecimal

				dos.writeObject(this.origin_latitude);

				// BigDecimal

				dos.writeObject(this.origin_longitude);

				// String

				writeString(this.origin_country, dos);

				// String

				writeString(this.origin_country_code, dos);

				// String

				writeString(this.origin_city, dos);

				// String

				writeString(this.origin_timezone, dos);

				// Integer

				writeInteger(this.origin_timezone_offset, dos);

				// Long

				if (this.scheduled_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_departure);
				}

				// Long

				if (this.scheduled_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.scheduled_arrival);
				}

				// Long

				if (this.real_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_departure);
				}

				// Long

				if (this.real_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.real_arrival);
				}

				// Long

				if (this.estimated_departure == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_departure);
				}

				// Long

				if (this.estimated_arrival == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.estimated_arrival);
				}

				// Boolean

				if (this.destination_visible == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.destination_visible);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("flight_row_id=" + String.valueOf(flight_row_id));
			sb.append(",flight_number=" + flight_number);
			sb.append(",flight_alternative=" + flight_alternative);
			sb.append(",status_text=" + status_text);
			sb.append(",status_live=" + String.valueOf(status_live));
			sb.append(",status_color=" + status_color);
			sb.append(",aircraft_code=" + aircraft_code);
			sb.append(",aircraft_text=" + aircraft_text);
			sb.append(",aircraft_hex=" + aircraft_hex);
			sb.append(",aircraft_registration=" + aircraft_registration);
			sb.append(",airline_name=" + airline_name);
			sb.append(",airline_iata=" + airline_iata);
			sb.append(",airline_icao=" + airline_icao);
			sb.append(",airline_short=" + airline_short);
			sb.append(",origin_iata=" + origin_iata);
			sb.append(",origin_icao=" + origin_icao);
			sb.append(",origin_name=" + origin_name);
			sb.append(",origin_latitude=" + String.valueOf(origin_latitude));
			sb.append(",origin_longitude=" + String.valueOf(origin_longitude));
			sb.append(",origin_country=" + origin_country);
			sb.append(",origin_country_code=" + origin_country_code);
			sb.append(",origin_city=" + origin_city);
			sb.append(",origin_timezone=" + origin_timezone);
			sb.append(",origin_timezone_offset=" + String.valueOf(origin_timezone_offset));
			sb.append(",scheduled_departure=" + String.valueOf(scheduled_departure));
			sb.append(",scheduled_arrival=" + String.valueOf(scheduled_arrival));
			sb.append(",real_departure=" + String.valueOf(real_departure));
			sb.append(",real_arrival=" + String.valueOf(real_arrival));
			sb.append(",estimated_departure=" + String.valueOf(estimated_departure));
			sb.append(",estimated_arrival=" + String.valueOf(estimated_arrival));
			sb.append(",destination_visible=" + String.valueOf(destination_visible));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.flight_row_id, other.flight_row_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];
		static byte[] commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length) {
					if (length < 1024 && commonByteArray_AIRPORT_ETL_Staging_From_API_DJE.length == 0) {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[1024];
					} else {
						commonByteArray_AIRPORT_ETL_Staging_From_API_DJE = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length);
				strReturn = new String(commonByteArray_AIRPORT_ETL_Staging_From_API_DJE, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AIRPORT_ETL_Staging_From_API_DJE) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tREST_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();
				row31Struct row31 = new row31Struct();
				row32Struct row32 = new row32Struct();
				copyOfcopyOfarrivalsStruct copyOfcopyOfarrivals = new copyOfcopyOfarrivalsStruct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcopyOfarrivals");
				}

				int tos_count_tDBOutput_6 = 0;

				int updateKeyCount_tDBOutput_6 = 1;
				if (updateKeyCount_tDBOutput_6 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_6 == 65 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rowsToCommitCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "Raw_Flights";
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar.getInstance();
				calendar_tDBOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
				calendar_tDBOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_6 = calendar_tDBOutput_6.getTime().getTime();
				long date_tDBOutput_6;

				java.sql.Connection conn_tDBOutput_6 = null;

				String properties_tDBOutput_6 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBOutput_6 == null || properties_tDBOutput_6.trim().length() == 0) {
					properties_tDBOutput_6 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_6.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_6 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_6.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_6 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_6 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "airportdata" + "?"
						+ properties_tDBOutput_6;

				String driverClass_tDBOutput_6 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_6 = "root";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:lEXuUfnX8fOIh0doEFU15sXziCKhbl6Fr+sCA6B3RRI=");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				java.lang.Class.forName(driverClass_tDBOutput_6);

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6, dbUser_tDBOutput_6,
						dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6.getTables("airportdata", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_6 = false;
				while (rsTable_tDBOutput_6.next()) {
					String table_tDBOutput_6 = rsTable_tDBOutput_6.getString("TABLE_NAME");
					if (table_tDBOutput_6.equalsIgnoreCase("Raw_Flights")) {
						whetherExist_tDBOutput_6 = true;
						break;
					}
				}
				if (!whetherExist_tDBOutput_6) {
					try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6.createStatement()) {
						stmtCreate_tDBOutput_6.execute("CREATE TABLE `" + tableName_tDBOutput_6
								+ "`(`flight_number` VARCHAR(20)  ,`flight_alternative` VARCHAR(20)  ,`status_text` VARCHAR(50)  ,`status_live` BIT(1)  ,`status_color` VARCHAR(20)  ,`aircraft_code` VARCHAR(10)  ,`aircraft_text` VARCHAR(100)  ,`aircraft_hex` VARCHAR(10)  ,`aircraft_registration` VARCHAR(20)  ,`airline_name` VARCHAR(100)  ,`airline_iata` VARCHAR(2)  ,`airline_icao` VARCHAR(3)  ,`airline_short` VARCHAR(50)  ,`origin_iata` VARCHAR(3)  ,`origin_icao` VARCHAR(4)  ,`origin_name` VARCHAR(200)  ,`origin_latitude` DECIMAL(10,7)  ,`origin_longitude` DECIMAL(10,7)  ,`origin_country` VARCHAR(100)  ,`origin_country_code` VARCHAR(2)  ,`origin_city` VARCHAR(100)  ,`origin_timezone` VARCHAR(50)  ,`origin_timezone_offset` INT(10)  ,`origin_avg_rating` DECIMAL(3,2)  ,`origin_total_ratings` INT(10)  ,`origin_reviews_count` INT(10)  ,`origin_evaluation_score` INT(10)  ,`origin_arrivals_delay_index` DECIMAL(5,2)  ,`origin_arrivals_delay_avg` INT(10)  ,`origin_departures_delay_index` DECIMAL(5,2)  ,`origin_departures_delay_avg` INT(10)  ,`origin_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`origin_departures_today_pct_delayed` DECIMAL(3,2)  ,`origin_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`origin_departures_today_pct_canceled` DECIMAL(3,2)  ,`destination_iata` VARCHAR(3)  ,`destination_icao` VARCHAR(4)  ,`destination_name` VARCHAR(200)  ,`destination_latitude` DECIMAL(10,7)  ,`destination_longitude` DECIMAL(10,7)  ,`destination_country` VARCHAR(100)  ,`destination_country_code` VARCHAR(2)  ,`destination_city` VARCHAR(100)  ,`destination_timezone` VARCHAR(50)  ,`destination_timezone_offset` INT(10)  ,`destination_visible` BIT(1)  ,`destination_avg_rating` DECIMAL(3,2)  ,`destination_total_ratings` INT(10)  ,`destination_reviews_count` INT(10)  ,`destination_evaluation_score` INT(10)  ,`destination_arrivals_delay_index` DECIMAL(5,2)  ,`destination_arrivals_delay_avg` INT(10)  ,`destination_departures_delay_index` DECIMAL(5,2)  ,`destination_departures_delay_avg` INT(10)  ,`destination_arrivals_today_pct_delayed` DECIMAL(3,2)  ,`destination_departures_today_pct_delayed` DECIMAL(3,2)  ,`destination_arrivals_today_pct_canceled` DECIMAL(3,2)  ,`destination_departures_today_pct_canceled` DECIMAL(3,2)  ,`scheduled_departure` BIGINT(20)  ,`scheduled_arrival` BIGINT(20)  ,`real_departure` BIGINT(20)  ,`real_arrival` BIGINT(20)  ,`estimated_departure` BIGINT(20)  ,`estimated_arrival` BIGINT(20)  ,`type` VARCHAR(10)  ,primary key(`flight_number`))");
					}
				}
				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement("SELECT COUNT(1) FROM `" + "Raw_Flights" + "` WHERE `flight_number` = ?");
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
				String insert_tDBOutput_6 = "INSERT INTO `" + "Raw_Flights"
						+ "` (`flight_number`,`flight_alternative`,`status_text`,`status_live`,`status_color`,`aircraft_code`,`aircraft_text`,`aircraft_hex`,`aircraft_registration`,`airline_name`,`airline_iata`,`airline_icao`,`airline_short`,`origin_iata`,`origin_icao`,`origin_name`,`origin_latitude`,`origin_longitude`,`origin_country`,`origin_country_code`,`origin_city`,`origin_timezone`,`origin_timezone_offset`,`origin_avg_rating`,`origin_total_ratings`,`origin_reviews_count`,`origin_evaluation_score`,`origin_arrivals_delay_index`,`origin_arrivals_delay_avg`,`origin_departures_delay_index`,`origin_departures_delay_avg`,`origin_arrivals_today_pct_delayed`,`origin_departures_today_pct_delayed`,`origin_arrivals_today_pct_canceled`,`origin_departures_today_pct_canceled`,`destination_iata`,`destination_icao`,`destination_name`,`destination_latitude`,`destination_longitude`,`destination_country`,`destination_country_code`,`destination_city`,`destination_timezone`,`destination_timezone_offset`,`destination_visible`,`destination_avg_rating`,`destination_total_ratings`,`destination_reviews_count`,`destination_evaluation_score`,`destination_arrivals_delay_index`,`destination_arrivals_delay_avg`,`destination_departures_delay_index`,`destination_departures_delay_avg`,`destination_arrivals_today_pct_delayed`,`destination_departures_today_pct_delayed`,`destination_arrivals_today_pct_canceled`,`destination_departures_today_pct_canceled`,`scheduled_departure`,`scheduled_arrival`,`real_departure`,`real_arrival`,`estimated_departure`,`estimated_arrival`,`type`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmtInsert_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmtInsert_tDBOutput_6", pstmtInsert_tDBOutput_6);
				String update_tDBOutput_6 = "UPDATE `" + "Raw_Flights"
						+ "` SET `flight_alternative` = ?,`status_text` = ?,`status_live` = ?,`status_color` = ?,`aircraft_code` = ?,`aircraft_text` = ?,`aircraft_hex` = ?,`aircraft_registration` = ?,`airline_name` = ?,`airline_iata` = ?,`airline_icao` = ?,`airline_short` = ?,`origin_iata` = ?,`origin_icao` = ?,`origin_name` = ?,`origin_latitude` = ?,`origin_longitude` = ?,`origin_country` = ?,`origin_country_code` = ?,`origin_city` = ?,`origin_timezone` = ?,`origin_timezone_offset` = ?,`origin_avg_rating` = ?,`origin_total_ratings` = ?,`origin_reviews_count` = ?,`origin_evaluation_score` = ?,`origin_arrivals_delay_index` = ?,`origin_arrivals_delay_avg` = ?,`origin_departures_delay_index` = ?,`origin_departures_delay_avg` = ?,`origin_arrivals_today_pct_delayed` = ?,`origin_departures_today_pct_delayed` = ?,`origin_arrivals_today_pct_canceled` = ?,`origin_departures_today_pct_canceled` = ?,`destination_iata` = ?,`destination_icao` = ?,`destination_name` = ?,`destination_latitude` = ?,`destination_longitude` = ?,`destination_country` = ?,`destination_country_code` = ?,`destination_city` = ?,`destination_timezone` = ?,`destination_timezone_offset` = ?,`destination_visible` = ?,`destination_avg_rating` = ?,`destination_total_ratings` = ?,`destination_reviews_count` = ?,`destination_evaluation_score` = ?,`destination_arrivals_delay_index` = ?,`destination_arrivals_delay_avg` = ?,`destination_departures_delay_index` = ?,`destination_departures_delay_avg` = ?,`destination_arrivals_today_pct_delayed` = ?,`destination_departures_today_pct_delayed` = ?,`destination_arrivals_today_pct_canceled` = ?,`destination_departures_today_pct_canceled` = ?,`scheduled_departure` = ?,`scheduled_arrival` = ?,`real_departure` = ?,`real_arrival` = ?,`estimated_departure` = ?,`estimated_arrival` = ?,`type` = ? WHERE `flight_number` = ?";

				java.sql.PreparedStatement pstmtUpdate_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(update_tDBOutput_6);
				resourceMap.put("pstmtUpdate_tDBOutput_6", pstmtUpdate_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row32");
				}

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfarrivalsStruct copyOfcopyOfarrivals_tmp = new copyOfcopyOfarrivalsStruct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tUniqRow_9 begin ] start
				 */

				ok_Hash.put("tUniqRow_9", false);
				start_Hash.put("tUniqRow_9", System.currentTimeMillis());

				currentComponent = "tUniqRow_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row31");
				}

				int tos_count_tUniqRow_9 = 0;

				class KeyStruct_tUniqRow_9 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Long flight_row_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.flight_row_id == null) ? 0 : this.flight_row_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_9 other = (KeyStruct_tUniqRow_9) obj;

						if (this.flight_row_id == null) {
							if (other.flight_row_id != null)
								return false;

						} else if (!this.flight_row_id.equals(other.flight_row_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_9 = 0;
				int nb_duplicates_tUniqRow_9 = 0;
				KeyStruct_tUniqRow_9 finder_tUniqRow_9 = new KeyStruct_tUniqRow_9();
				java.util.Set<KeyStruct_tUniqRow_9> keystUniqRow_9 = new java.util.HashSet<KeyStruct_tUniqRow_9>();

				/**
				 * [tUniqRow_9 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_9 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_9", false);
				start_Hash.put("tExtractJSONFields_9", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row30");
				}

				int tos_count_tExtractJSONFields_9 = 0;

				int nb_line_tExtractJSONFields_9 = 0;
				String jsonStr_tExtractJSONFields_9 = "";

				class JsonPathCache_tExtractJSONFields_9 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_9 jsonPathCache_tExtractJSONFields_9 = new JsonPathCache_tExtractJSONFields_9();

				/**
				 * [tExtractJSONFields_9 begin ] stop
				 */

				/**
				 * [tREST_6 begin ] start
				 */

				ok_Hash.put("tREST_6", false);
				start_Hash.put("tREST_6", System.currentTimeMillis());

				currentComponent = "tREST_6";

				int tos_count_tREST_6 = 0;

				String endpoint_tREST_6 = "https://api.flightapi.io/schedule/" + context.apikey
						+ "?mode=arrivals&iata=DJE&day=1";

				String trustStoreFile_tREST_6 = System.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_6 = System.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_6 = System.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_6 = System.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_6 = System.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_6 = System.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_6 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_6 = javax.net.ssl.SSLContext.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_6 = null;
				if (trustStoreFile_tREST_6 != null && trustStoreType_tREST_6 != null) {
					char[] password_tREST_6 = null;
					if (trustStorePWD_tREST_6 != null)
						password_tREST_6 = trustStorePWD_tREST_6.toCharArray();
					java.security.KeyStore trustStore_tREST_6 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_6);
					trustStore_tREST_6.load(new java.io.FileInputStream(trustStoreFile_tREST_6), password_tREST_6);

					javax.net.ssl.TrustManagerFactory tmf_tREST_6 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					tmf_tREST_6.init(trustStore_tREST_6);
					tms_tREST_6 = tmf_tREST_6.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_6 = null;
				if (keyStoreFile_tREST_6 != null && keyStoreType_tREST_6 != null) {
					char[] password_tREST_6 = null;
					if (keyStorePWD_tREST_6 != null)
						password_tREST_6 = keyStorePWD_tREST_6.toCharArray();
					java.security.KeyStore keyStore_tREST_6 = java.security.KeyStore.getInstance(keyStoreType_tREST_6);
					keyStore_tREST_6.load(new java.io.FileInputStream(keyStoreFile_tREST_6), password_tREST_6);

					javax.net.ssl.KeyManagerFactory kmf_tREST_6 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
					kmf_tREST_6.init(keyStore_tREST_6, password_tREST_6);
					kms_tREST_6 = kmf_tREST_6.getKeyManagers();
				}

				ctx_tREST_6.init(kms_tREST_6, tms_tREST_6, null);
				config_tREST_6.getProperties().put(
						com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
						new com.sun.jersey.client.urlconnection.HTTPSProperties(new javax.net.ssl.HostnameVerifier() {

							public boolean verify(String hostName, javax.net.ssl.SSLSession session) {
								return true;
							}
						}, ctx_tREST_6));

				com.sun.jersey.api.client.Client restClient_tREST_6 = com.sun.jersey.api.client.Client
						.create(config_tREST_6);

				java.util.Map<String, Object> headers_tREST_6 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_6 = headers_tREST_6.get("Transfer-Encoding");
				if (transfer_encoding_tREST_6 != null && "chunked".equals(transfer_encoding_tREST_6)) {
					restClient_tREST_6.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_6;
				if (endpoint_tREST_6 != null && !("").equals(endpoint_tREST_6)) {
					restResource_tREST_6 = restClient_tREST_6.resource(endpoint_tREST_6);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_6 = null;
				String restResponse_tREST_6 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_6 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_6 : headers_tREST_6.entrySet()) {
						if (builder_tREST_6 == null) {
							builder_tREST_6 = restResource_tREST_6.header(header_tREST_6.getKey(),
									header_tREST_6.getValue());
						} else {
							builder_tREST_6.header(header_tREST_6.getKey(), header_tREST_6.getValue());
						}
					}

					if (builder_tREST_6 != null) {
						restResponse_tREST_6 = builder_tREST_6.get(String.class);
					} else {
						restResponse_tREST_6 = restResource_tREST_6.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					globalMap.put("tREST_6_ERROR_MESSAGE", ue.getMessage());
					errorResponse_tREST_6 = ue.getResponse();
				}

				// for output

				row30 = new row30Struct();
				if (errorResponse_tREST_6 != null) {
					row30.ERROR_CODE = errorResponse_tREST_6.getStatus();
					if (row30.ERROR_CODE != 204) {
						row30.Body = errorResponse_tREST_6.getEntity(String.class);
					}
				} else {
					row30.Body = restResponse_tREST_6;
				}

				/**
				 * [tREST_6 begin ] stop
				 */

				/**
				 * [tREST_6 main ] start
				 */

				currentComponent = "tREST_6";

				tos_count_tREST_6++;

				/**
				 * [tREST_6 main ] stop
				 */

				/**
				 * [tREST_6 process_data_begin ] start
				 */

				currentComponent = "tREST_6";

				/**
				 * [tREST_6 process_data_begin ] stop
				 */

				/**
				 * [tExtractJSONFields_9 main ] start
				 */

				currentComponent = "tExtractJSONFields_9";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1

							, "row30"

					);
				}

				if (row30.Body != null) {// C_01
					jsonStr_tExtractJSONFields_9 = row30.Body.toString();

					row31 = null;

					String loopPath_tExtractJSONFields_9 = "$.airport.pluginData.schedule.arrivals.data[*]";
					java.util.List<Object> resultset_tExtractJSONFields_9 = new java.util.ArrayList<Object>();

					boolean isStructError_tExtractJSONFields_9 = true;
					com.jayway.jsonpath.ReadContext document_tExtractJSONFields_9 = null;
					try {
						document_tExtractJSONFields_9 = com.jayway.jsonpath.JsonPath
								.parse(jsonStr_tExtractJSONFields_9);
						com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
								.getCompiledJsonPath(loopPath_tExtractJSONFields_9);
						Object result_tExtractJSONFields_9 = document_tExtractJSONFields_9
								.read(compiledLoopPath_tExtractJSONFields_9, net.minidev.json.JSONObject.class);
						if (result_tExtractJSONFields_9 instanceof net.minidev.json.JSONArray) {
							resultset_tExtractJSONFields_9 = (net.minidev.json.JSONArray) result_tExtractJSONFields_9;
						} else {
							resultset_tExtractJSONFields_9.add(result_tExtractJSONFields_9);
						}

						isStructError_tExtractJSONFields_9 = false;
					} catch (java.lang.Exception ex_tExtractJSONFields_9) {
						globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE", ex_tExtractJSONFields_9.getMessage());
						System.err.println(ex_tExtractJSONFields_9.getMessage());
					}

					String jsonPath_tExtractJSONFields_9 = null;
					com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_9 = null;

					Object value_tExtractJSONFields_9 = null;

					Object root_tExtractJSONFields_9 = null;
					for (int i_tExtractJSONFields_9 = 0; isStructError_tExtractJSONFields_9
							|| (i_tExtractJSONFields_9 < resultset_tExtractJSONFields_9
									.size()); i_tExtractJSONFields_9++) {
						if (!isStructError_tExtractJSONFields_9) {
							Object row_tExtractJSONFields_9 = resultset_tExtractJSONFields_9
									.get(i_tExtractJSONFields_9);
							row31 = null;
							row31 = new row31Struct();
							nb_line_tExtractJSONFields_9++;
							try {
								jsonPath_tExtractJSONFields_9 = "$.flight.identification.row";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.flight_row_id = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_9.toString());
									} else {
										row31.flight_row_id =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.flight_row_id =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.identification.number.default";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.flight_number = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.flight_number =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.identification.number.alternative";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.flight_alternative = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.flight_alternative =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.status.text";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.status_text = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.status_text =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.status.live";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.status_live = ParserUtils
												.parseTo_Boolean(value_tExtractJSONFields_9.toString());
									} else {
										row31.status_live =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.status_live =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.status.generic.status.color";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.status_color = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.status_color =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.aircraft.model.code";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.aircraft_code = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.aircraft_code =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.aircraft.model.text";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.aircraft_text = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.aircraft_text =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.aircraft.hex";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.aircraft_hex = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.aircraft_hex =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.aircraft.registration";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.aircraft_registration = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.aircraft_registration =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airline.name";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.airline_name = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.airline_name =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airline.code.iata";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.airline_iata = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.airline_iata =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airline.code.icao";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.airline_icao = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.airline_icao =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airline.short";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.airline_short = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.airline_short =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.code.iata";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.origin_iata = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_iata =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.code.icao";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.origin_icao = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_icao =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.name";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.origin_name = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_name =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.position.latitude";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.origin_latitude = ParserUtils
												.parseTo_BigDecimal(value_tExtractJSONFields_9.toString());
									} else {
										row31.origin_latitude =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_latitude =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.position.longitude";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.origin_longitude = ParserUtils
												.parseTo_BigDecimal(value_tExtractJSONFields_9.toString());
									} else {
										row31.origin_longitude =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_longitude =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.position.country.name";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.origin_country = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_country =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.position.country.code";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.origin_country_code = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_country_code =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.position.region.city";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.origin_city = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_city =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.timezone.name";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									row31.origin_timezone = value_tExtractJSONFields_9 == null ?

											null

											: value_tExtractJSONFields_9.toString();
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_timezone =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.origin.timezone.offset";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.origin_timezone_offset = ParserUtils
												.parseTo_Integer(value_tExtractJSONFields_9.toString());
									} else {
										row31.origin_timezone_offset =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.origin_timezone_offset =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.time.scheduled.departure";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.scheduled_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_9.toString());
									} else {
										row31.scheduled_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.scheduled_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.time.scheduled.arrival";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.scheduled_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_9.toString());
									} else {
										row31.scheduled_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.scheduled_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.time.real.departure";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.real_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_9.toString());
									} else {
										row31.real_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.real_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.time.real.arrival";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.real_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_9.toString());
									} else {
										row31.real_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.real_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.time.estimated.departure";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.estimated_departure = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_9.toString());
									} else {
										row31.estimated_departure =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.estimated_departure =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.time.estimated.arrival";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.estimated_arrival = ParserUtils
												.parseTo_Long(value_tExtractJSONFields_9.toString());
									} else {
										row31.estimated_arrival =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.estimated_arrival =

											null

									;
								}
								jsonPath_tExtractJSONFields_9 = "$.flight.airport.destination.visible";
								compiledJsonPath_tExtractJSONFields_9 = jsonPathCache_tExtractJSONFields_9
										.getCompiledJsonPath(jsonPath_tExtractJSONFields_9);

								try {

									value_tExtractJSONFields_9 = compiledJsonPath_tExtractJSONFields_9
											.read(row_tExtractJSONFields_9);

									if (value_tExtractJSONFields_9 != null
											&& !value_tExtractJSONFields_9.toString().isEmpty()) {
										row31.destination_visible = ParserUtils
												.parseTo_Boolean(value_tExtractJSONFields_9.toString());
									} else {
										row31.destination_visible =

												null

										;
									}
								} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_9) {
									globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
											e_tExtractJSONFields_9.getMessage());
									row31.destination_visible =

											null

									;
								}
							} catch (java.lang.Exception ex_tExtractJSONFields_9) {
								globalMap.put("tExtractJSONFields_9_ERROR_MESSAGE",
										ex_tExtractJSONFields_9.getMessage());
								System.err.println(ex_tExtractJSONFields_9.getMessage());
								row31 = null;
							}

						}

						isStructError_tExtractJSONFields_9 = false;

//}

						tos_count_tExtractJSONFields_9++;

						/**
						 * [tExtractJSONFields_9 main ] stop
						 */

						/**
						 * [tExtractJSONFields_9 process_data_begin ] start
						 */

						currentComponent = "tExtractJSONFields_9";

						/**
						 * [tExtractJSONFields_9 process_data_begin ] stop
						 */
// Start of branch "row31"
						if (row31 != null) {

							/**
							 * [tUniqRow_9 main ] start
							 */

							currentComponent = "tUniqRow_9";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row31"

								);
							}

							row32 = null;
							finder_tUniqRow_9.flight_row_id = row31.flight_row_id;
							finder_tUniqRow_9.hashCodeDirty = true;
							if (!keystUniqRow_9.contains(finder_tUniqRow_9)) {
								KeyStruct_tUniqRow_9 new_tUniqRow_9 = new KeyStruct_tUniqRow_9();

								new_tUniqRow_9.flight_row_id = row31.flight_row_id;

								keystUniqRow_9.add(new_tUniqRow_9);
								if (row32 == null) {

									row32 = new row32Struct();
								}
								row32.flight_row_id = row31.flight_row_id;
								row32.flight_number = row31.flight_number;
								row32.flight_alternative = row31.flight_alternative;
								row32.status_text = row31.status_text;
								row32.status_live = row31.status_live;
								row32.status_color = row31.status_color;
								row32.aircraft_code = row31.aircraft_code;
								row32.aircraft_text = row31.aircraft_text;
								row32.aircraft_hex = row31.aircraft_hex;
								row32.aircraft_registration = row31.aircraft_registration;
								row32.airline_name = row31.airline_name;
								row32.airline_iata = row31.airline_iata;
								row32.airline_icao = row31.airline_icao;
								row32.airline_short = row31.airline_short;
								row32.origin_iata = row31.origin_iata;
								row32.origin_icao = row31.origin_icao;
								row32.origin_name = row31.origin_name;
								row32.origin_latitude = row31.origin_latitude;
								row32.origin_longitude = row31.origin_longitude;
								row32.origin_country = row31.origin_country;
								row32.origin_country_code = row31.origin_country_code;
								row32.origin_city = row31.origin_city;
								row32.origin_timezone = row31.origin_timezone;
								row32.origin_timezone_offset = row31.origin_timezone_offset;
								row32.scheduled_departure = row31.scheduled_departure;
								row32.scheduled_arrival = row31.scheduled_arrival;
								row32.real_departure = row31.real_departure;
								row32.real_arrival = row31.real_arrival;
								row32.estimated_departure = row31.estimated_departure;
								row32.estimated_arrival = row31.estimated_arrival;
								row32.destination_visible = row31.destination_visible;
								nb_uniques_tUniqRow_9++;
							} else {
								nb_duplicates_tUniqRow_9++;
							}

							tos_count_tUniqRow_9++;

							/**
							 * [tUniqRow_9 main ] stop
							 */

							/**
							 * [tUniqRow_9 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_9";

							/**
							 * [tUniqRow_9 process_data_begin ] stop
							 */
// Start of branch "row32"
							if (row32 != null) {

								/**
								 * [tMap_9 main ] start
								 */

								currentComponent = "tMap_9";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row32"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_9 = false;
								boolean mainRowRejected_tMap_9 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
									// ###############################
									// # Output tables

									copyOfcopyOfarrivals = null;

// # Output table : 'copyOfcopyOfarrivals'
									copyOfcopyOfarrivals_tmp.flight_number = row32.flight_number;
									copyOfcopyOfarrivals_tmp.flight_alternative = row32.flight_alternative;
									copyOfcopyOfarrivals_tmp.status_text = row32.status_text;
									copyOfcopyOfarrivals_tmp.status_live = row32.status_live;
									copyOfcopyOfarrivals_tmp.status_color = row32.status_color;
									copyOfcopyOfarrivals_tmp.aircraft_code = row32.aircraft_code;
									copyOfcopyOfarrivals_tmp.aircraft_text = row32.aircraft_text;
									copyOfcopyOfarrivals_tmp.aircraft_hex = row32.aircraft_hex;
									copyOfcopyOfarrivals_tmp.aircraft_registration = row32.aircraft_registration;
									copyOfcopyOfarrivals_tmp.airline_name = row32.airline_name;
									copyOfcopyOfarrivals_tmp.airline_iata = row32.airline_iata;
									copyOfcopyOfarrivals_tmp.airline_icao = row32.airline_icao;
									copyOfcopyOfarrivals_tmp.airline_short = row32.airline_short;
									copyOfcopyOfarrivals_tmp.origin_iata = row32.origin_iata;
									copyOfcopyOfarrivals_tmp.origin_icao = row32.origin_icao;
									copyOfcopyOfarrivals_tmp.origin_name = row32.origin_name;
									copyOfcopyOfarrivals_tmp.origin_latitude = row32.origin_latitude;
									copyOfcopyOfarrivals_tmp.origin_longitude = row32.origin_longitude;
									copyOfcopyOfarrivals_tmp.origin_country = row32.origin_country;
									copyOfcopyOfarrivals_tmp.origin_country_code = row32.origin_country_code;
									copyOfcopyOfarrivals_tmp.origin_city = row32.origin_city;
									copyOfcopyOfarrivals_tmp.origin_timezone = row32.origin_timezone;
									copyOfcopyOfarrivals_tmp.origin_timezone_offset = row32.origin_timezone_offset;
									copyOfcopyOfarrivals_tmp.origin_avg_rating = null;
									copyOfcopyOfarrivals_tmp.origin_total_ratings = null;
									copyOfcopyOfarrivals_tmp.origin_reviews_count = null;
									copyOfcopyOfarrivals_tmp.origin_evaluation_score = null;
									copyOfcopyOfarrivals_tmp.origin_arrivals_delay_index = null;
									copyOfcopyOfarrivals_tmp.origin_arrivals_delay_avg = null;
									copyOfcopyOfarrivals_tmp.origin_departures_delay_index = null;
									copyOfcopyOfarrivals_tmp.origin_departures_delay_avg = null;
									copyOfcopyOfarrivals_tmp.origin_arrivals_today_pct_delayed = null;
									copyOfcopyOfarrivals_tmp.origin_departures_today_pct_delayed = null;
									copyOfcopyOfarrivals_tmp.origin_arrivals_today_pct_canceled = null;
									copyOfcopyOfarrivals_tmp.origin_departures_today_pct_canceled = null;
									copyOfcopyOfarrivals_tmp.destination_iata = (String) globalMap.get("iata_code");
									copyOfcopyOfarrivals_tmp.destination_icao = (String) globalMap.get("icao_code");
									copyOfcopyOfarrivals_tmp.destination_name = (String) globalMap.get("country_name");
									copyOfcopyOfarrivals_tmp.destination_latitude = (BigDecimal) globalMap
											.get("latitude");
									copyOfcopyOfarrivals_tmp.destination_longitude = (BigDecimal) globalMap
											.get("longitude");
									copyOfcopyOfarrivals_tmp.destination_country = (String) globalMap
											.get("country_name");
									copyOfcopyOfarrivals_tmp.destination_country_code = (String) globalMap
											.get("country_code");
									copyOfcopyOfarrivals_tmp.destination_city = (String) globalMap.get("city");
									copyOfcopyOfarrivals_tmp.destination_timezone = (String) globalMap
											.get("timezone_name");
									copyOfcopyOfarrivals_tmp.destination_timezone_offset = (Integer) globalMap
											.get("timezone_offset");
									copyOfcopyOfarrivals_tmp.destination_visible = (Boolean) globalMap
											.get("is_visible");
									copyOfcopyOfarrivals_tmp.destination_avg_rating = (BigDecimal) globalMap
											.get("avg_rating");
									copyOfcopyOfarrivals_tmp.destination_total_ratings = (Integer) globalMap
											.get("total_ratings");
									copyOfcopyOfarrivals_tmp.destination_reviews_count = (Integer) globalMap
											.get("reviews_count");
									copyOfcopyOfarrivals_tmp.destination_evaluation_score = (Integer) globalMap
											.get("evaluation_score");
									copyOfcopyOfarrivals_tmp.destination_arrivals_delay_index = (BigDecimal) globalMap
											.get("arrivals_delay_index");
									copyOfcopyOfarrivals_tmp.destination_arrivals_delay_avg = (Integer) globalMap
											.get("arrivals_delay_avg");
									copyOfcopyOfarrivals_tmp.destination_departures_delay_index = (BigDecimal) globalMap
											.get("departures_delay_index");
									copyOfcopyOfarrivals_tmp.destination_departures_delay_avg = (Integer) globalMap
											.get("departures_delay_avg");
									copyOfcopyOfarrivals_tmp.destination_arrivals_today_pct_delayed = (BigDecimal) globalMap
											.get("arrivals_today_pct_delayed");
									copyOfcopyOfarrivals_tmp.destination_departures_today_pct_delayed = (BigDecimal) globalMap
											.get("departures_today_pct_delayed");
									copyOfcopyOfarrivals_tmp.destination_arrivals_today_pct_canceled = (BigDecimal) globalMap
											.get("arrivals_today_pct_canceled");
									copyOfcopyOfarrivals_tmp.destination_departures_today_pct_canceled = (BigDecimal) globalMap
											.get("departures_today_pct_canceled");
									copyOfcopyOfarrivals_tmp.scheduled_departure = row32.scheduled_departure;
									copyOfcopyOfarrivals_tmp.scheduled_arrival = row32.scheduled_arrival;
									copyOfcopyOfarrivals_tmp.real_departure = row32.real_departure;
									copyOfcopyOfarrivals_tmp.real_arrival = row32.real_arrival;
									copyOfcopyOfarrivals_tmp.estimated_departure = row32.estimated_departure;
									copyOfcopyOfarrivals_tmp.estimated_arrival = row32.estimated_arrival;
									copyOfcopyOfarrivals_tmp.type = "Arrival";
									copyOfcopyOfarrivals = copyOfcopyOfarrivals_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_9 = false;

								tos_count_tMap_9++;

								/**
								 * [tMap_9 main ] stop
								 */

								/**
								 * [tMap_9 process_data_begin ] start
								 */

								currentComponent = "tMap_9";

								/**
								 * [tMap_9 process_data_begin ] stop
								 */
// Start of branch "copyOfcopyOfarrivals"
								if (copyOfcopyOfarrivals != null) {

									/**
									 * [tDBOutput_6 main ] start
									 */

									currentComponent = "tDBOutput_6";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "copyOfcopyOfarrivals"

										);
									}

									whetherReject_tDBOutput_6 = false;
									if (copyOfcopyOfarrivals.flight_number == null) {
										pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_6.setString(1, copyOfcopyOfarrivals.flight_number);
									}

									int checkCount_tDBOutput_6 = -1;
									try (java.sql.ResultSet rs_tDBOutput_6 = pstmt_tDBOutput_6.executeQuery()) {
										while (rs_tDBOutput_6.next()) {
											checkCount_tDBOutput_6 = rs_tDBOutput_6.getInt(1);
										}
									}
									if (checkCount_tDBOutput_6 > 0) {
										if (copyOfcopyOfarrivals.flight_alternative == null) {
											pstmtUpdate_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(1,
													copyOfcopyOfarrivals.flight_alternative);
										}

										if (copyOfcopyOfarrivals.status_text == null) {
											pstmtUpdate_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(2, copyOfcopyOfarrivals.status_text);
										}

										if (copyOfcopyOfarrivals.status_live == null) {
											pstmtUpdate_tDBOutput_6.setNull(3, java.sql.Types.BOOLEAN);
										} else {
											pstmtUpdate_tDBOutput_6.setBoolean(3, copyOfcopyOfarrivals.status_live);
										}

										if (copyOfcopyOfarrivals.status_color == null) {
											pstmtUpdate_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(4, copyOfcopyOfarrivals.status_color);
										}

										if (copyOfcopyOfarrivals.aircraft_code == null) {
											pstmtUpdate_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(5, copyOfcopyOfarrivals.aircraft_code);
										}

										if (copyOfcopyOfarrivals.aircraft_text == null) {
											pstmtUpdate_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(6, copyOfcopyOfarrivals.aircraft_text);
										}

										if (copyOfcopyOfarrivals.aircraft_hex == null) {
											pstmtUpdate_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(7, copyOfcopyOfarrivals.aircraft_hex);
										}

										if (copyOfcopyOfarrivals.aircraft_registration == null) {
											pstmtUpdate_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(8,
													copyOfcopyOfarrivals.aircraft_registration);
										}

										if (copyOfcopyOfarrivals.airline_name == null) {
											pstmtUpdate_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(9, copyOfcopyOfarrivals.airline_name);
										}

										if (copyOfcopyOfarrivals.airline_iata == null) {
											pstmtUpdate_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(10, copyOfcopyOfarrivals.airline_iata);
										}

										if (copyOfcopyOfarrivals.airline_icao == null) {
											pstmtUpdate_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(11, copyOfcopyOfarrivals.airline_icao);
										}

										if (copyOfcopyOfarrivals.airline_short == null) {
											pstmtUpdate_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(12, copyOfcopyOfarrivals.airline_short);
										}

										if (copyOfcopyOfarrivals.origin_iata == null) {
											pstmtUpdate_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(13, copyOfcopyOfarrivals.origin_iata);
										}

										if (copyOfcopyOfarrivals.origin_icao == null) {
											pstmtUpdate_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(14, copyOfcopyOfarrivals.origin_icao);
										}

										if (copyOfcopyOfarrivals.origin_name == null) {
											pstmtUpdate_tDBOutput_6.setNull(15, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(15, copyOfcopyOfarrivals.origin_name);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(16, copyOfcopyOfarrivals.origin_latitude);

										pstmtUpdate_tDBOutput_6.setBigDecimal(17,
												copyOfcopyOfarrivals.origin_longitude);

										if (copyOfcopyOfarrivals.origin_country == null) {
											pstmtUpdate_tDBOutput_6.setNull(18, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(18, copyOfcopyOfarrivals.origin_country);
										}

										if (copyOfcopyOfarrivals.origin_country_code == null) {
											pstmtUpdate_tDBOutput_6.setNull(19, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(19,
													copyOfcopyOfarrivals.origin_country_code);
										}

										if (copyOfcopyOfarrivals.origin_city == null) {
											pstmtUpdate_tDBOutput_6.setNull(20, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(20, copyOfcopyOfarrivals.origin_city);
										}

										if (copyOfcopyOfarrivals.origin_timezone == null) {
											pstmtUpdate_tDBOutput_6.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(21, copyOfcopyOfarrivals.origin_timezone);
										}

										if (copyOfcopyOfarrivals.origin_timezone_offset == null) {
											pstmtUpdate_tDBOutput_6.setNull(22, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(22,
													copyOfcopyOfarrivals.origin_timezone_offset);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(23,
												copyOfcopyOfarrivals.origin_avg_rating);

										if (copyOfcopyOfarrivals.origin_total_ratings == null) {
											pstmtUpdate_tDBOutput_6.setNull(24, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(24,
													copyOfcopyOfarrivals.origin_total_ratings);
										}

										if (copyOfcopyOfarrivals.origin_reviews_count == null) {
											pstmtUpdate_tDBOutput_6.setNull(25, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(25,
													copyOfcopyOfarrivals.origin_reviews_count);
										}

										if (copyOfcopyOfarrivals.origin_evaluation_score == null) {
											pstmtUpdate_tDBOutput_6.setNull(26, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(26,
													copyOfcopyOfarrivals.origin_evaluation_score);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(27,
												copyOfcopyOfarrivals.origin_arrivals_delay_index);

										if (copyOfcopyOfarrivals.origin_arrivals_delay_avg == null) {
											pstmtUpdate_tDBOutput_6.setNull(28, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(28,
													copyOfcopyOfarrivals.origin_arrivals_delay_avg);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(29,
												copyOfcopyOfarrivals.origin_departures_delay_index);

										if (copyOfcopyOfarrivals.origin_departures_delay_avg == null) {
											pstmtUpdate_tDBOutput_6.setNull(30, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(30,
													copyOfcopyOfarrivals.origin_departures_delay_avg);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(31,
												copyOfcopyOfarrivals.origin_arrivals_today_pct_delayed);

										pstmtUpdate_tDBOutput_6.setBigDecimal(32,
												copyOfcopyOfarrivals.origin_departures_today_pct_delayed);

										pstmtUpdate_tDBOutput_6.setBigDecimal(33,
												copyOfcopyOfarrivals.origin_arrivals_today_pct_canceled);

										pstmtUpdate_tDBOutput_6.setBigDecimal(34,
												copyOfcopyOfarrivals.origin_departures_today_pct_canceled);

										if (copyOfcopyOfarrivals.destination_iata == null) {
											pstmtUpdate_tDBOutput_6.setNull(35, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(35,
													copyOfcopyOfarrivals.destination_iata);
										}

										if (copyOfcopyOfarrivals.destination_icao == null) {
											pstmtUpdate_tDBOutput_6.setNull(36, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(36,
													copyOfcopyOfarrivals.destination_icao);
										}

										if (copyOfcopyOfarrivals.destination_name == null) {
											pstmtUpdate_tDBOutput_6.setNull(37, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(37,
													copyOfcopyOfarrivals.destination_name);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(38,
												copyOfcopyOfarrivals.destination_latitude);

										pstmtUpdate_tDBOutput_6.setBigDecimal(39,
												copyOfcopyOfarrivals.destination_longitude);

										if (copyOfcopyOfarrivals.destination_country == null) {
											pstmtUpdate_tDBOutput_6.setNull(40, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(40,
													copyOfcopyOfarrivals.destination_country);
										}

										if (copyOfcopyOfarrivals.destination_country_code == null) {
											pstmtUpdate_tDBOutput_6.setNull(41, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(41,
													copyOfcopyOfarrivals.destination_country_code);
										}

										if (copyOfcopyOfarrivals.destination_city == null) {
											pstmtUpdate_tDBOutput_6.setNull(42, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(42,
													copyOfcopyOfarrivals.destination_city);
										}

										if (copyOfcopyOfarrivals.destination_timezone == null) {
											pstmtUpdate_tDBOutput_6.setNull(43, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(43,
													copyOfcopyOfarrivals.destination_timezone);
										}

										if (copyOfcopyOfarrivals.destination_timezone_offset == null) {
											pstmtUpdate_tDBOutput_6.setNull(44, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(44,
													copyOfcopyOfarrivals.destination_timezone_offset);
										}

										if (copyOfcopyOfarrivals.destination_visible == null) {
											pstmtUpdate_tDBOutput_6.setNull(45, java.sql.Types.BOOLEAN);
										} else {
											pstmtUpdate_tDBOutput_6.setBoolean(45,
													copyOfcopyOfarrivals.destination_visible);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(46,
												copyOfcopyOfarrivals.destination_avg_rating);

										if (copyOfcopyOfarrivals.destination_total_ratings == null) {
											pstmtUpdate_tDBOutput_6.setNull(47, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(47,
													copyOfcopyOfarrivals.destination_total_ratings);
										}

										if (copyOfcopyOfarrivals.destination_reviews_count == null) {
											pstmtUpdate_tDBOutput_6.setNull(48, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(48,
													copyOfcopyOfarrivals.destination_reviews_count);
										}

										if (copyOfcopyOfarrivals.destination_evaluation_score == null) {
											pstmtUpdate_tDBOutput_6.setNull(49, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(49,
													copyOfcopyOfarrivals.destination_evaluation_score);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(50,
												copyOfcopyOfarrivals.destination_arrivals_delay_index);

										if (copyOfcopyOfarrivals.destination_arrivals_delay_avg == null) {
											pstmtUpdate_tDBOutput_6.setNull(51, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(51,
													copyOfcopyOfarrivals.destination_arrivals_delay_avg);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(52,
												copyOfcopyOfarrivals.destination_departures_delay_index);

										if (copyOfcopyOfarrivals.destination_departures_delay_avg == null) {
											pstmtUpdate_tDBOutput_6.setNull(53, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setInt(53,
													copyOfcopyOfarrivals.destination_departures_delay_avg);
										}

										pstmtUpdate_tDBOutput_6.setBigDecimal(54,
												copyOfcopyOfarrivals.destination_arrivals_today_pct_delayed);

										pstmtUpdate_tDBOutput_6.setBigDecimal(55,
												copyOfcopyOfarrivals.destination_departures_today_pct_delayed);

										pstmtUpdate_tDBOutput_6.setBigDecimal(56,
												copyOfcopyOfarrivals.destination_arrivals_today_pct_canceled);

										pstmtUpdate_tDBOutput_6.setBigDecimal(57,
												copyOfcopyOfarrivals.destination_departures_today_pct_canceled);

										if (copyOfcopyOfarrivals.scheduled_departure == null) {
											pstmtUpdate_tDBOutput_6.setNull(58, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setLong(58,
													copyOfcopyOfarrivals.scheduled_departure);
										}

										if (copyOfcopyOfarrivals.scheduled_arrival == null) {
											pstmtUpdate_tDBOutput_6.setNull(59, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setLong(59, copyOfcopyOfarrivals.scheduled_arrival);
										}

										if (copyOfcopyOfarrivals.real_departure == null) {
											pstmtUpdate_tDBOutput_6.setNull(60, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setLong(60, copyOfcopyOfarrivals.real_departure);
										}

										if (copyOfcopyOfarrivals.real_arrival == null) {
											pstmtUpdate_tDBOutput_6.setNull(61, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setLong(61, copyOfcopyOfarrivals.real_arrival);
										}

										if (copyOfcopyOfarrivals.estimated_departure == null) {
											pstmtUpdate_tDBOutput_6.setNull(62, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setLong(62,
													copyOfcopyOfarrivals.estimated_departure);
										}

										if (copyOfcopyOfarrivals.estimated_arrival == null) {
											pstmtUpdate_tDBOutput_6.setNull(63, java.sql.Types.INTEGER);
										} else {
											pstmtUpdate_tDBOutput_6.setLong(63, copyOfcopyOfarrivals.estimated_arrival);
										}

										if (copyOfcopyOfarrivals.type == null) {
											pstmtUpdate_tDBOutput_6.setNull(64, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(64, copyOfcopyOfarrivals.type);
										}

										if (copyOfcopyOfarrivals.flight_number == null) {
											pstmtUpdate_tDBOutput_6.setNull(65 + count_tDBOutput_6,
													java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_6.setString(65 + count_tDBOutput_6,
													copyOfcopyOfarrivals.flight_number);
										}

										try {
											int processedCount_tDBOutput_6 = pstmtUpdate_tDBOutput_6.executeUpdate();
											updatedCount_tDBOutput_6 += processedCount_tDBOutput_6;
											rowsToCommitCount_tDBOutput_6 += processedCount_tDBOutput_6;
											nb_line_tDBOutput_6++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_6 = true;
											nb_line_tDBOutput_6++;
											System.err.print(e.getMessage());
										}
									} else {
										if (copyOfcopyOfarrivals.flight_number == null) {
											pstmtInsert_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(1, copyOfcopyOfarrivals.flight_number);
										}

										if (copyOfcopyOfarrivals.flight_alternative == null) {
											pstmtInsert_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(2,
													copyOfcopyOfarrivals.flight_alternative);
										}

										if (copyOfcopyOfarrivals.status_text == null) {
											pstmtInsert_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(3, copyOfcopyOfarrivals.status_text);
										}

										if (copyOfcopyOfarrivals.status_live == null) {
											pstmtInsert_tDBOutput_6.setNull(4, java.sql.Types.BOOLEAN);
										} else {
											pstmtInsert_tDBOutput_6.setBoolean(4, copyOfcopyOfarrivals.status_live);
										}

										if (copyOfcopyOfarrivals.status_color == null) {
											pstmtInsert_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(5, copyOfcopyOfarrivals.status_color);
										}

										if (copyOfcopyOfarrivals.aircraft_code == null) {
											pstmtInsert_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(6, copyOfcopyOfarrivals.aircraft_code);
										}

										if (copyOfcopyOfarrivals.aircraft_text == null) {
											pstmtInsert_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(7, copyOfcopyOfarrivals.aircraft_text);
										}

										if (copyOfcopyOfarrivals.aircraft_hex == null) {
											pstmtInsert_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(8, copyOfcopyOfarrivals.aircraft_hex);
										}

										if (copyOfcopyOfarrivals.aircraft_registration == null) {
											pstmtInsert_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(9,
													copyOfcopyOfarrivals.aircraft_registration);
										}

										if (copyOfcopyOfarrivals.airline_name == null) {
											pstmtInsert_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(10, copyOfcopyOfarrivals.airline_name);
										}

										if (copyOfcopyOfarrivals.airline_iata == null) {
											pstmtInsert_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(11, copyOfcopyOfarrivals.airline_iata);
										}

										if (copyOfcopyOfarrivals.airline_icao == null) {
											pstmtInsert_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(12, copyOfcopyOfarrivals.airline_icao);
										}

										if (copyOfcopyOfarrivals.airline_short == null) {
											pstmtInsert_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(13, copyOfcopyOfarrivals.airline_short);
										}

										if (copyOfcopyOfarrivals.origin_iata == null) {
											pstmtInsert_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(14, copyOfcopyOfarrivals.origin_iata);
										}

										if (copyOfcopyOfarrivals.origin_icao == null) {
											pstmtInsert_tDBOutput_6.setNull(15, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(15, copyOfcopyOfarrivals.origin_icao);
										}

										if (copyOfcopyOfarrivals.origin_name == null) {
											pstmtInsert_tDBOutput_6.setNull(16, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(16, copyOfcopyOfarrivals.origin_name);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(17, copyOfcopyOfarrivals.origin_latitude);

										pstmtInsert_tDBOutput_6.setBigDecimal(18,
												copyOfcopyOfarrivals.origin_longitude);

										if (copyOfcopyOfarrivals.origin_country == null) {
											pstmtInsert_tDBOutput_6.setNull(19, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(19, copyOfcopyOfarrivals.origin_country);
										}

										if (copyOfcopyOfarrivals.origin_country_code == null) {
											pstmtInsert_tDBOutput_6.setNull(20, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(20,
													copyOfcopyOfarrivals.origin_country_code);
										}

										if (copyOfcopyOfarrivals.origin_city == null) {
											pstmtInsert_tDBOutput_6.setNull(21, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(21, copyOfcopyOfarrivals.origin_city);
										}

										if (copyOfcopyOfarrivals.origin_timezone == null) {
											pstmtInsert_tDBOutput_6.setNull(22, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(22, copyOfcopyOfarrivals.origin_timezone);
										}

										if (copyOfcopyOfarrivals.origin_timezone_offset == null) {
											pstmtInsert_tDBOutput_6.setNull(23, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(23,
													copyOfcopyOfarrivals.origin_timezone_offset);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(24,
												copyOfcopyOfarrivals.origin_avg_rating);

										if (copyOfcopyOfarrivals.origin_total_ratings == null) {
											pstmtInsert_tDBOutput_6.setNull(25, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(25,
													copyOfcopyOfarrivals.origin_total_ratings);
										}

										if (copyOfcopyOfarrivals.origin_reviews_count == null) {
											pstmtInsert_tDBOutput_6.setNull(26, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(26,
													copyOfcopyOfarrivals.origin_reviews_count);
										}

										if (copyOfcopyOfarrivals.origin_evaluation_score == null) {
											pstmtInsert_tDBOutput_6.setNull(27, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(27,
													copyOfcopyOfarrivals.origin_evaluation_score);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(28,
												copyOfcopyOfarrivals.origin_arrivals_delay_index);

										if (copyOfcopyOfarrivals.origin_arrivals_delay_avg == null) {
											pstmtInsert_tDBOutput_6.setNull(29, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(29,
													copyOfcopyOfarrivals.origin_arrivals_delay_avg);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(30,
												copyOfcopyOfarrivals.origin_departures_delay_index);

										if (copyOfcopyOfarrivals.origin_departures_delay_avg == null) {
											pstmtInsert_tDBOutput_6.setNull(31, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(31,
													copyOfcopyOfarrivals.origin_departures_delay_avg);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(32,
												copyOfcopyOfarrivals.origin_arrivals_today_pct_delayed);

										pstmtInsert_tDBOutput_6.setBigDecimal(33,
												copyOfcopyOfarrivals.origin_departures_today_pct_delayed);

										pstmtInsert_tDBOutput_6.setBigDecimal(34,
												copyOfcopyOfarrivals.origin_arrivals_today_pct_canceled);

										pstmtInsert_tDBOutput_6.setBigDecimal(35,
												copyOfcopyOfarrivals.origin_departures_today_pct_canceled);

										if (copyOfcopyOfarrivals.destination_iata == null) {
											pstmtInsert_tDBOutput_6.setNull(36, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(36,
													copyOfcopyOfarrivals.destination_iata);
										}

										if (copyOfcopyOfarrivals.destination_icao == null) {
											pstmtInsert_tDBOutput_6.setNull(37, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(37,
													copyOfcopyOfarrivals.destination_icao);
										}

										if (copyOfcopyOfarrivals.destination_name == null) {
											pstmtInsert_tDBOutput_6.setNull(38, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(38,
													copyOfcopyOfarrivals.destination_name);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(39,
												copyOfcopyOfarrivals.destination_latitude);

										pstmtInsert_tDBOutput_6.setBigDecimal(40,
												copyOfcopyOfarrivals.destination_longitude);

										if (copyOfcopyOfarrivals.destination_country == null) {
											pstmtInsert_tDBOutput_6.setNull(41, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(41,
													copyOfcopyOfarrivals.destination_country);
										}

										if (copyOfcopyOfarrivals.destination_country_code == null) {
											pstmtInsert_tDBOutput_6.setNull(42, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(42,
													copyOfcopyOfarrivals.destination_country_code);
										}

										if (copyOfcopyOfarrivals.destination_city == null) {
											pstmtInsert_tDBOutput_6.setNull(43, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(43,
													copyOfcopyOfarrivals.destination_city);
										}

										if (copyOfcopyOfarrivals.destination_timezone == null) {
											pstmtInsert_tDBOutput_6.setNull(44, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(44,
													copyOfcopyOfarrivals.destination_timezone);
										}

										if (copyOfcopyOfarrivals.destination_timezone_offset == null) {
											pstmtInsert_tDBOutput_6.setNull(45, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(45,
													copyOfcopyOfarrivals.destination_timezone_offset);
										}

										if (copyOfcopyOfarrivals.destination_visible == null) {
											pstmtInsert_tDBOutput_6.setNull(46, java.sql.Types.BOOLEAN);
										} else {
											pstmtInsert_tDBOutput_6.setBoolean(46,
													copyOfcopyOfarrivals.destination_visible);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(47,
												copyOfcopyOfarrivals.destination_avg_rating);

										if (copyOfcopyOfarrivals.destination_total_ratings == null) {
											pstmtInsert_tDBOutput_6.setNull(48, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(48,
													copyOfcopyOfarrivals.destination_total_ratings);
										}

										if (copyOfcopyOfarrivals.destination_reviews_count == null) {
											pstmtInsert_tDBOutput_6.setNull(49, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(49,
													copyOfcopyOfarrivals.destination_reviews_count);
										}

										if (copyOfcopyOfarrivals.destination_evaluation_score == null) {
											pstmtInsert_tDBOutput_6.setNull(50, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(50,
													copyOfcopyOfarrivals.destination_evaluation_score);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(51,
												copyOfcopyOfarrivals.destination_arrivals_delay_index);

										if (copyOfcopyOfarrivals.destination_arrivals_delay_avg == null) {
											pstmtInsert_tDBOutput_6.setNull(52, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(52,
													copyOfcopyOfarrivals.destination_arrivals_delay_avg);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(53,
												copyOfcopyOfarrivals.destination_departures_delay_index);

										if (copyOfcopyOfarrivals.destination_departures_delay_avg == null) {
											pstmtInsert_tDBOutput_6.setNull(54, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setInt(54,
													copyOfcopyOfarrivals.destination_departures_delay_avg);
										}

										pstmtInsert_tDBOutput_6.setBigDecimal(55,
												copyOfcopyOfarrivals.destination_arrivals_today_pct_delayed);

										pstmtInsert_tDBOutput_6.setBigDecimal(56,
												copyOfcopyOfarrivals.destination_departures_today_pct_delayed);

										pstmtInsert_tDBOutput_6.setBigDecimal(57,
												copyOfcopyOfarrivals.destination_arrivals_today_pct_canceled);

										pstmtInsert_tDBOutput_6.setBigDecimal(58,
												copyOfcopyOfarrivals.destination_departures_today_pct_canceled);

										if (copyOfcopyOfarrivals.scheduled_departure == null) {
											pstmtInsert_tDBOutput_6.setNull(59, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setLong(59,
													copyOfcopyOfarrivals.scheduled_departure);
										}

										if (copyOfcopyOfarrivals.scheduled_arrival == null) {
											pstmtInsert_tDBOutput_6.setNull(60, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setLong(60, copyOfcopyOfarrivals.scheduled_arrival);
										}

										if (copyOfcopyOfarrivals.real_departure == null) {
											pstmtInsert_tDBOutput_6.setNull(61, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setLong(61, copyOfcopyOfarrivals.real_departure);
										}

										if (copyOfcopyOfarrivals.real_arrival == null) {
											pstmtInsert_tDBOutput_6.setNull(62, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setLong(62, copyOfcopyOfarrivals.real_arrival);
										}

										if (copyOfcopyOfarrivals.estimated_departure == null) {
											pstmtInsert_tDBOutput_6.setNull(63, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setLong(63,
													copyOfcopyOfarrivals.estimated_departure);
										}

										if (copyOfcopyOfarrivals.estimated_arrival == null) {
											pstmtInsert_tDBOutput_6.setNull(64, java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tDBOutput_6.setLong(64, copyOfcopyOfarrivals.estimated_arrival);
										}

										if (copyOfcopyOfarrivals.type == null) {
											pstmtInsert_tDBOutput_6.setNull(65, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_6.setString(65, copyOfcopyOfarrivals.type);
										}

										try {
											int processedCount_tDBOutput_6 = pstmtInsert_tDBOutput_6.executeUpdate();
											insertedCount_tDBOutput_6 += processedCount_tDBOutput_6;
											rowsToCommitCount_tDBOutput_6 += processedCount_tDBOutput_6;
											nb_line_tDBOutput_6++;
										} catch (java.lang.Exception e) {
											globalMap.put("tDBOutput_6_ERROR_MESSAGE", e.getMessage());
											whetherReject_tDBOutput_6 = true;
											nb_line_tDBOutput_6++;
											System.err.print(e.getMessage());
										}
									}
									commitCounter_tDBOutput_6++;

									if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {

										if (rowsToCommitCount_tDBOutput_6 != 0) {
										}
										conn_tDBOutput_6.commit();
										if (rowsToCommitCount_tDBOutput_6 != 0) {
											rowsToCommitCount_tDBOutput_6 = 0;
										}
										commitCounter_tDBOutput_6 = 0;

									}

									tos_count_tDBOutput_6++;

									/**
									 * [tDBOutput_6 main ] stop
									 */

									/**
									 * [tDBOutput_6 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_6";

									/**
									 * [tDBOutput_6 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_6 process_data_end ] start
									 */

									currentComponent = "tDBOutput_6";

									/**
									 * [tDBOutput_6 process_data_end ] stop
									 */

								} // End of branch "copyOfcopyOfarrivals"

								/**
								 * [tMap_9 process_data_end ] start
								 */

								currentComponent = "tMap_9";

								/**
								 * [tMap_9 process_data_end ] stop
								 */

							} // End of branch "row32"

							/**
							 * [tUniqRow_9 process_data_end ] start
							 */

							currentComponent = "tUniqRow_9";

							/**
							 * [tUniqRow_9 process_data_end ] stop
							 */

						} // End of branch "row31"

						// end for
					}

				} // C_01

				/**
				 * [tExtractJSONFields_9 process_data_end ] start
				 */

				currentComponent = "tExtractJSONFields_9";

				/**
				 * [tExtractJSONFields_9 process_data_end ] stop
				 */

				/**
				 * [tREST_6 process_data_end ] start
				 */

				currentComponent = "tREST_6";

				/**
				 * [tREST_6 process_data_end ] stop
				 */

				/**
				 * [tREST_6 end ] start
				 */

				currentComponent = "tREST_6";

				ok_Hash.put("tREST_6", true);
				end_Hash.put("tREST_6", System.currentTimeMillis());

				/**
				 * [tREST_6 end ] stop
				 */

				/**
				 * [tExtractJSONFields_9 end ] start
				 */

				currentComponent = "tExtractJSONFields_9";

				globalMap.put("tExtractJSONFields_7_NB_LINE", nb_line_tExtractJSONFields_9);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row30");
				}

				ok_Hash.put("tExtractJSONFields_9", true);
				end_Hash.put("tExtractJSONFields_9", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_9 end ] stop
				 */

				/**
				 * [tUniqRow_9 end ] start
				 */

				currentComponent = "tUniqRow_9";

				globalMap.put("tUniqRow_9_NB_UNIQUES", nb_uniques_tUniqRow_9);
				globalMap.put("tUniqRow_9_NB_DUPLICATES", nb_duplicates_tUniqRow_9);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row31");
				}

				ok_Hash.put("tUniqRow_9", true);
				end_Hash.put("tUniqRow_9", System.currentTimeMillis());

				/**
				 * [tUniqRow_9 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row32");
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				if (pstmtUpdate_tDBOutput_6 != null) {
					pstmtUpdate_tDBOutput_6.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_6");
				}
				if (pstmtInsert_tDBOutput_6 != null) {
					pstmtInsert_tDBOutput_6.close();
					resourceMap.remove("pstmtInsert_tDBOutput_6");
				}
				if (pstmt_tDBOutput_6 != null) {
					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");
				}
				resourceMap.put("statementClosed_tDBOutput_6", true);
				if (commitCounter_tDBOutput_6 > 0 && rowsToCommitCount_tDBOutput_6 != 0) {

				}
				conn_tDBOutput_6.commit();
				if (commitCounter_tDBOutput_6 > 0 && rowsToCommitCount_tDBOutput_6 != 0) {

					rowsToCommitCount_tDBOutput_6 = 0;
				}
				commitCounter_tDBOutput_6 = 0;

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcopyOfarrivals");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_6 finally ] start
				 */

				currentComponent = "tREST_6";

				/**
				 * [tREST_6 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_9 finally ] start
				 */

				currentComponent = "tExtractJSONFields_9";

				/**
				 * [tExtractJSONFields_9 finally ] stop
				 */

				/**
				 * [tUniqRow_9 finally ] start
				 */

				currentComponent = "tUniqRow_9";

				/**
				 * [tUniqRow_9 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_6 = null;
						if ((pstmtUpdateToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_6")) != null) {
							pstmtUpdateToClose_tDBOutput_6.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_6 = null;
						if ((pstmtInsertToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_6")) != null) {
							pstmtInsertToClose_tDBOutput_6.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_6_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Staging_From_API_DJE Staging_From_API_DJEClass = new Staging_From_API_DJE();

		int exitCode = Staging_From_API_DJEClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Staging_From_API_DJE.class.getClassLoader()
					.getResourceAsStream("airport_etl/staging_from_api_dje_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Staging_From_API_DJE.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("apikey", "id_String");
					if (context.getStringValue("apikey") == null) {
						context.apikey = null;
					} else {
						context.apikey = (String) context.getProperty("apikey");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("apikey")) {
				context.apikey = (String) parentContextMap.get("apikey");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tREST_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tREST_3) {
			globalMap.put("tREST_3_SUBPROCESS_STATE", -1);

			e_tREST_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Staging_From_API_DJE");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1611662 characters generated by Talend Open Studio for Data Integration on
 * the August 16, 2025 at 3:05:38 AM GMT+01:00
 ************************************************************************************************/