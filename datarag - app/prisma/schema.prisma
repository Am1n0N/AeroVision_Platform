generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/* ---------------------------
   Core Chat Models
--------------------------- */
model ChatSession {
  id               String    @id @default(cuid())
  title            String
  userId           String
  modelKey         String    @default("openai/gpt-oss-20b")
  useDatabase      Boolean   @default(true)
  useKnowledgeBase Boolean   @default(true)
  temperature      Float     @default(0.2)
  isPinned         Boolean   @default(false)
  isArchived       Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastMessageAt    DateTime?

  // Relations
  messages ChatMessage[]

  @@index([userId, isArchived, isPinned])
  @@index([userId, lastMessageAt])
  @@map("chat_sessions")
}

model ChatMessage {
  id             String   @id @default(cuid())
  content        String   @db.Text
  role           String   // USER, ASSISTANT, SYSTEM
  sessionId      String
  userId         String
  modelUsed      String?
  executionTime  Int?
  dbQueryUsed    Boolean  @default(false)
  contextSources String?
  metadata       String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  session ChatSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sources MessageSource[]

  @@index([sessionId, createdAt])
  @@index([userId, createdAt])
  @@map("chat_messages")
}

model MessageSource {
  id             String    @id @default(cuid())
  messageId      String
  type           String
  title          String
  section        String?
  pageNumber     Int?
  snippet        String    @db.Text
  relevanceScore Float?
  url            String?
  metadata       String?   @db.Text
  timestamp      DateTime?
  createdAt      DateTime  @default(now())

  // Relations
  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([type])
  @@map("message_sources")
}

/* ---------------------------
   Documents & Categories
--------------------------- */
model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  documents Document[]

  @@index([name])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  fileUrl     String?  @db.Text
  userId      String
  status      String   @default("PROCESSING") // PROCESSING, COMPLETED, ERROR
  errorReason String?  @db.Text              // Store error details if processing fails
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category          @relation(fields: [categoryId], references: [id])
  categoryId String
  messages   DocumentMessage[]
  chunks     DocumentChunk[]

  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@index([userId, status])
  @@index([createdAt])
  @@map("documents")
}

model DocumentMessage {
  id         String   @id @default(cuid())
  content    String   @db.Text
  role       String   // USER, ASSISTANT, SYSTEM
  documentId String
  userId     String
  createdAt  DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId, createdAt])
  @@index([userId])
  @@map("document_messages")
}

model DocumentChunk {
  id            String   @id @default(cuid())
  documentId    String
  content       String   @db.Text
  chunkIndex    Int
  pageNumber    Int?
  chunkType     String?  @default("text")
  wordCount     Int?
  tokenEstimate Int?
  vectorId      String?  @unique // Unique for vector DB backrefs
  metadata      String?  @db.Text
  createdAt     DateTime @default(now())

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([chunkIndex])
  @@index([documentId, chunkIndex])
  @@map("document_chunks")
}

/* -----------------------------------------
   Knowledge Base (with tags & full-text)
----------------------------------------- */
model KnowledgeBaseEntry {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(500)
  content   String   @db.Text
  category  String?  @db.VarChar(100)
  userId    String?
  isPublic  Boolean  @default(true)
  vectorId  String?  @unique
  metadata  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tags KnowledgeBaseTag[] @relation("EntryTags")

  @@index([category])
  @@index([userId])
  @@index([isPublic])
  @@index([userId, isPublic])
  @@index([category, isPublic])
  @@index([createdAt])
  @@fulltext([title, content])
  @@map("knowledge_base_entries")
}

model KnowledgeBaseTag {
  id   String @id @default(cuid())
  name String @unique @db.VarChar(50)

  // Relations
  entries KnowledgeBaseEntry[] @relation("EntryTags")

  @@index([name])
  @@map("knowledge_base_tags")
}

/* ---------------------------
   Query History & Settings
--------------------------- */
model QueryHistory {
  id            String   @id @default(cuid())
  userId        String
  sessionId     String?
  query         String   @db.Text
  sqlGenerated  String?  @db.Text
  success       Boolean
  resultCount   Int?
  executionTime Int?
  errorMessage  String?  @db.Text
  context       String?  @db.Text
  createdAt     DateTime @default(now())

  @@index([userId])
  @@index([sessionId])
  @@index([success])
  @@index([createdAt])
  @@index([userId, success])
  @@map("query_history")
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  defaultModel         String   @default("deepseek-r1:7b")
  defaultTemperature   Float    @default(0.2)
  useDatabase          Boolean  @default(true)
  useKnowledgeBase     Boolean  @default(true)
  theme                String   @default("system")
  sidebarCollapsed     Boolean  @default(false)
  showTokenCount       Boolean  @default(false)
  showExecutionTime    Boolean  @default(false)
  showSourceReferences Boolean  @default(true)
  maxContextLength     Int      @default(6000)
  rerankingThreshold   Float    @default(0.5)
  enableReranking      Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
  @@map("user_settings")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String   @db.VarChar(100)
  sessionId String?
  metadata  String?  @db.Text
  timestamp DateTime @default(now())

  @@index([userId, eventType])
  @@index([timestamp])
  @@index([eventType, timestamp])
  @@map("analytics_events")
}

/* ---------------------------
   Evaluation & Metrics
--------------------------- */
model EvaluationRun {
  id            String   @id @default(cuid())
  userId        String
  config        String   @db.Text      // JSON config
  results       String   @db.LongText  // JSON results
  totalTests    Int
  avgScore      Float
  executionTime Int                   // ms
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@map("evaluation_runs")
}

model EvaluationDataset {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String   @default("")
  dataset     String   @db.LongText // JSON dataset
  itemCount   Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@map("evaluation_datasets")
}

model ModelPerformance {
  id               String   @id @default(cuid())
  userId           String
  modelId          String
  modelName        String
  avgScore         Float
  testCount        Int
  avgExecutionTime Float
  lastEvaluated    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Component scores
  retrievalScore    Float @default(0)
  augmentationScore Float @default(0)
  generationScore   Float @default(0)
  relevanceScore    Float @default(0)
  accuracyScore     Float @default(0)
  completenessScore Float @default(0)
  coherenceScore    Float @default(0)

  @@unique([userId, modelId])
  @@index([userId])
  @@index([modelId])
  @@map("model_performance")
}

model EvaluationMetrics {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  metric    String // 'overall', 'retrieval', 'augmentation', 'generation', etc.
  value     Float
  testCount Int
  createdAt DateTime @default(now())

  @@index([userId, date])
  @@index([metric])
  @@map("evaluation_metrics")
}
