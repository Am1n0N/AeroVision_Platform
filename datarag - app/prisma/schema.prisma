// schema.prisma â€” PostgreSQL version

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // e.g. postgresql://user:pass@host:5432/db?schema=public
}

/* ---------------------------
   Core Chat Models (Enhanced)
--------------------------- */
model ChatSession {
  id               String    @id @default(cuid())
  title            String
  userId           String
  modelKey         String    @default("openai/gpt-oss-20b")
  useDatabase      Boolean   @default(true)
  useKnowledgeBase Boolean   @default(true)
  temperature      Float     @default(0.2)
  isPinned         Boolean   @default(false)
  isArchived       Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastMessageAt    DateTime?

  // Enhanced metadata for evaluation integration
  evaluationRuns String? @db.Text // JSON array of evaluation run IDs this session contributed to
  contextSources Int?    @default(0) // Count of knowledge base entries used

  // Relations
  messages ChatMessage[]

  @@index([userId, isArchived, isPinned])
  @@index([userId, lastMessageAt])
  @@index([userId, modelKey])
  @@index([createdAt])
  @@map("chat_sessions")
}

model ChatMessage {
  id             String   @id @default(cuid())
  content        String   @db.Text
  role           String   // USER, ASSISTANT, SYSTEM
  sessionId      String
  userId         String
  modelUsed      String?
  executionTime  Int?
  dbQueryUsed    Boolean  @default(false)
  contextSources String?
  metadata       String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Enhanced fields for evaluation tracking
  evaluationRunId String? // Link to evaluation run if this was an evaluation message
  relevanceScore  Float?  // If this message was evaluated

  // Relations
  session ChatSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sources MessageSource[]

  @@index([sessionId, createdAt])
  @@index([userId, createdAt])
  @@index([evaluationRunId])
  @@index([modelUsed, createdAt])
  @@map("chat_messages")
}

model MessageSource {
  id             String    @id @default(cuid())
  messageId      String
  type           String
  title          String
  section        String?
  pageNumber     Int?
  snippet        String    @db.Text
  relevanceScore Float?
  url            String?
  metadata       String?   @db.Text
  timestamp      DateTime?
  createdAt      DateTime  @default(now())

  // Enhanced fields
  sourceCategory String? // "document", "knowledge_base", "database", "web"
  usageCount     Int     @default(1) // How many times this source was referenced

  // Relations
  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([type])
  @@index([sourceCategory, relevanceScore])
  @@index([usageCount])
  @@map("message_sources")
}

/* ---------------------------
   Documents & Categories (Enhanced)
--------------------------- */
model Category {
  id          String     @id @db.Uuid @default(uuid())
  name        String     @unique
  description String?    @db.Text
  color       String?    @default("#3B82F6") // UI color for category
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  documents Document[]

  // Performance tracking
  documentCount Int @default(0) // Denormalized count for performance
  lastUsed      DateTime?

  @@index([name])
  @@index([isActive])
  @@index([documentCount])
}

model Document {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  fileUrl       String?  @db.Text
  userId        String
  status        String   @default("PROCESSING") // PROCESSING, COMPLETED, ERROR
  errorReason   String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Enhanced metadata
  fileSize       Int?     // File size in bytes
  mimeType       String?
  language       String?  @default("en")
  wordCount      Int?
  pageCount      Int?
  processingTime Int?     // Time taken to process in milliseconds

  // Usage statistics
  viewCount    Int      @default(0)
  queryCount   Int      @default(0) // How many queries referenced this document
  lastAccessed DateTime?

  // Relations
  category   Category          @relation(fields: [categoryId], references: [id])
  categoryId String            @db.Uuid
  messages   DocumentMessage[]
  chunks     DocumentChunk[]

  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@index([userId, status])
  @@index([createdAt])
  @@index([queryCount, lastAccessed])
  @@index([wordCount])
  // NOTE: MySQL @@fulltext removed for Postgres (see note below)
  @@map("documents")
}

model DocumentMessage {
  id         String   @id @default(cuid())
  content    String   @db.Text
  role       String   // USER, ASSISTANT, SYSTEM
  documentId String
  userId     String
  createdAt  DateTime @default(now())

  // Enhanced fields
  relevanceScore Float?
  modelUsed      String?
  executionTime  Int?

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId, createdAt])
  @@index([userId])
  @@index([modelUsed])
  @@map("document_messages")
}

model DocumentChunk {
  id             String   @id @default(cuid())
  documentId     String
  content        String   @db.Text
  chunkIndex     Int
  pageNumber     Int?
  chunkType      String?  @default("text")
  wordCount      Int?
  tokenEstimate  Int?
  vectorId       String?  @unique
  metadata       String?  @db.Text
  createdAt      DateTime @default(now())

  // Enhanced fields for better retrieval
  embedding      String?  @db.Text // from LongText -> Text
  language       String?  @default("en")
  relevanceScores String? @db.Text // JSON of relevance scores for different queries
  usageCount     Int      @default(0)
  avgRelevance   Float?

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([chunkIndex])
  @@index([documentId, chunkIndex])
  @@index([usageCount, avgRelevance])
  @@index([tokenEstimate])
  // NOTE: MySQL @@fulltext removed for Postgres (see note below)
  @@map("document_chunks")
}

/* -----------------------------------------
   Knowledge Base (Enhanced with better organization)
----------------------------------------- */
model KnowledgeBaseEntry {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(500)
  content   String   @db.Text
  category  String?  @db.VarChar(100)
  userId    String?
  isPublic  Boolean  @default(true)
  vectorId  String?  @unique
  metadata  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Enhanced fields
  language     String?  @default("en")
  wordCount    Int?
  isVerified   Boolean  @default(false)
  verifiedBy   String?
  verifiedAt   DateTime?
  version      Int      @default(1)
  parentId     String?

  // Usage tracking
  viewCount    Int      @default(0)
  queryCount   Int      @default(0)
  lastAccessed DateTime?
  avgRating    Float?
  ratingCount  Int      @default(0)

  // Relations
  tags     KnowledgeBaseTag[] @relation("EntryTags")
  ratings  KnowledgeBaseRating[]
  parent   KnowledgeBaseEntry? @relation("EntryHierarchy", fields: [parentId], references: [id])
  children KnowledgeBaseEntry[] @relation("EntryHierarchy")

  @@index([category])
  @@index([userId])
  @@index([isPublic])
  @@index([userId, isPublic])
  @@index([category, isPublic])
  @@index([createdAt])
  @@index([queryCount, lastAccessed])
  @@index([isVerified, avgRating])
  @@index([parentId])
  // NOTE: MySQL @@fulltext removed for Postgres (see note below)
  @@map("knowledge_base_entries")
}

model KnowledgeBaseTag {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  color       String?  @default("#10B981")
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  entries KnowledgeBaseEntry[] @relation("EntryTags")

  @@index([name])
  @@index([usageCount])
  @@map("knowledge_base_tags")
}

model KnowledgeBaseRating {
  id        String   @id @default(cuid())
  entryId   String
  userId    String
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  // Relations
  entry KnowledgeBaseEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@unique([entryId, userId])
  @@index([entryId, rating])
  @@index([userId])
  @@map("knowledge_base_ratings")
}

/* ---------------------------
   Query History & Settings (Enhanced)
--------------------------- */
model QueryHistory {
  id            String   @id @default(cuid())
  userId        String
  sessionId     String?
  query         String   @db.Text
  sqlGenerated  String?  @db.Text
  success       Boolean
  resultCount   Int?
  executionTime Int?
  errorMessage  String?  @db.Text
  context       String?  @db.Text
  createdAt     DateTime @default(now())

  // Enhanced fields
  modelUsed        String?
  temperature      Float?
  maxTokens        Int?
  contextSources   String? @db.Text // JSON array of source types used
  evaluationRunId  String?
  queryType        String? // "evaluation", "chat", "document", "knowledge_base"
  responseQuality  Float?

  // Performance metrics
  retrievalTime    Int?
  generationTime   Int?
  totalTokensUsed  Int?
  promptTokens     Int?
  completionTokens Int?

  @@index([userId])
  @@index([sessionId])
  @@index([success])
  @@index([createdAt])
  @@index([userId, success])
  @@index([evaluationRunId])
  @@index([queryType, createdAt])
  @@index([modelUsed, success])
  // NOTE: MySQL @@fulltext removed for Postgres (see note below)
  @@map("query_history")
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  defaultModel         String   @default("deepseek-r1:7b")
  defaultTemperature   Float    @default(0.2)
  useDatabase          Boolean  @default(true)
  useKnowledgeBase     Boolean  @default(true)
  theme                String   @default("system")
  sidebarCollapsed     Boolean  @default(false)
  showTokenCount       Boolean  @default(false)
  showExecutionTime    Boolean  @default(false)
  showSourceReferences Boolean  @default(true)
  maxContextLength     Int      @default(6000)
  rerankingThreshold   Float    @default(0.5)
  enableReranking      Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Enhanced evaluation settings
  evaluationPreferences String? @db.Text
  autoEvaluate          Boolean  @default(false)
  evaluationFrequency   String?  @default("weekly")
  notificationSettings  String?  @db.Text

  @@index([userId])
  @@map("user_settings")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String   @db.VarChar(100)
  sessionId String?
  metadata  String?  @db.Text
  timestamp DateTime @default(now())

  // Enhanced fields
  duration     Int?
  success      Boolean @default(true)
  errorMessage String? @db.Text
  userAgent    String? @db.VarChar(500)
  ipAddress    String? @db.VarChar(45) // IPv6

  @@index([userId, eventType])
  @@index([timestamp])
  @@index([eventType, timestamp])
  @@index([sessionId])
  @@index([success, eventType])
  @@map("analytics_events")
}

/* ---------------------------
   Enhanced Evaluation & Metrics
--------------------------- */
model EvaluationRun {
  id            String   @id @default(cuid())
  userId        String
  config        String   @db.Text
  results       String   @db.Text // from LongText -> Text
  totalTests    Int
  avgScore      Float
  executionTime Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Enhanced fields
  status        String   @default("completed") // "running", "completed", "failed", "cancelled"
  progress      Float    @default(0)
  startedAt     DateTime?
  completedAt   DateTime?
  errorMessage  String?  @db.Text

  // Detailed metrics
  avgRetrievalScore    Float @default(0)
  avgAugmentationScore Float @default(0)
  avgGenerationScore   Float @default(0)
  avgRelevanceScore    Float @default(0)
  avgAccuracyScore     Float @default(0)
  avgCompletenessScore Float @default(0)
  avgCoherenceScore    Float @default(0)

  // Resource usage
  totalTokensUsed      Int?
  estimatedCost        Float?

  // Relations
  datasetId String?
  dataset   EvaluationDataset? @relation(fields: [datasetId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([avgScore, createdAt])
  @@index([datasetId])
  @@map("evaluation_runs")
}

model EvaluationDataset {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String   @default("")
  dataset     String   @db.Text // from LongText -> Text
  itemCount   Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Enhanced fields
  version     Int     @default(1)
  parentId    String?
  language    String  @default("en")
  difficulty  String?
  categories  String? @db.Text // JSON array

  // Usage statistics
  usageCount    Int      @default(0)
  lastUsed      DateTime?
  avgPerformance Float?

  // Quality metrics
  isVerified  Boolean @default(false)
  verifiedBy  String?
  verifiedAt  DateTime?

  // Relations
  evaluationRuns EvaluationRun[]
  parent         EvaluationDataset?  @relation("DatasetVersions", fields: [parentId], references: [id])
  versions       EvaluationDataset[] @relation("DatasetVersions")

  @@index([userId])
  @@index([createdAt])
  @@index([isActive, usageCount])
  @@index([parentId])
  @@index([name, userId])
  // NOTE: MySQL @@fulltext removed for Postgres (see note below)
  @@map("evaluation_datasets")
}

model ModelPerformance {
  id               String   @id @default(cuid())
  userId           String
  modelId          String
  modelName        String
  avgScore         Float
  testCount        Int
  avgExecutionTime Float
  lastEvaluated    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Enhanced component scores
  retrievalScore      Float @default(0)
  augmentationScore   Float @default(0)
  generationScore     Float @default(0)
  relevanceScore      Float @default(0)
  accuracyScore       Float @default(0)
  completenessScore   Float @default(0)
  coherenceScore      Float @default(0)

  // Performance trends
  scoreHistory      String? @db.Text // JSON
  performanceTrend  String? @default("stable")

  // Cost analysis
  totalTokensUsed   Int?
  estimatedCost     Float?
  costPerToken      Float?

  // Usage patterns
  peakPerformanceScore   Float?
  worstPerformanceScore  Float?
  consistencyScore       Float?

  // Comparative metrics
  rankAmongModels     Int?
  industryPercentile  Float?

  @@unique([userId, modelId])
  @@index([userId])
  @@index([modelId])
  @@index([avgScore, lastEvaluated])
  @@index([userId, avgScore])
  @@map("model_performance")
}

model EvaluationMetrics {
  id        String   @id @default(cuid())
  userId    String   @db.VarChar(64)
  date      DateTime
  metric    String   @db.VarChar(64)
  value     Float
  testCount Int
  createdAt DateTime @default(now())

  // Narrowed types so the unique index fits
  modelId      String? @db.VarChar(64)  // e.g., "groq/llama-3.1-8b-instant"
  categoryId   String? @db.VarChar(36)  // UUID length
  difficulty   String? @db.VarChar(16)  // "Easy" | "Medium" | "Hard"
  confidence   Float?
  sampleSize   Int?

  percentileRank Float?
  zScore         Float?

  @@unique([userId, date, metric, modelId, categoryId, difficulty])
  @@index([userId, date])
  @@index([metric])
  @@index([modelId, date])
  @@index([date, value])
  @@map("evaluation_metrics")
}
